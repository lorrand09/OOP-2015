% XLRELOADFILTERCOEF reloads the filter coefficients used in the
%   5x5 filter shared memory video processing example.
%
%   xlReloadFilterCoef(kernel) reloads the filter coefficients used
%   by the 5x5 image processing kernel using the coefficients defined 
%   by the kernel string parameter.  You may select from the list of 
%   filter kernels:
%
%   Type         Kernel String
%   ==========================
%   Edge         edge
%   Sobel X      sobelx
%   Sobel Y      sobely
%   Sobel X-Y    sobelxy
%   Blur         blur
%   Smooth       smooth
%   Sharpen      sharpen
%   Gaussian     gaussian
%   Detail       detail
%   Identity     identity
%
%   e.g. "xlReloadFilterCoef('sobelxy')"
%        "xlReloadFilterCoef('blur')"
%
%   The filter coefficients are stored in an unprotected shared 
%   memory residing on the hardware co-simulation platform.  The
%   function creates a shared memory object that connects to the
%   hardware shared memory, and writes a new set of coefficients
%   into it.  The simulation should be running before invoking 
%   this function.
%
%     Copyright 2004, Xilinx, Inc.
%     All Rights Reserved.
%
function [] = xlReloadFilterCoef(kernel)

  CR = char(13);
  kernel_str =  ['Type         Kernel String' CR ...
                 '==========================' CR ...
                 'Edge         edge         ' CR ...
                 'Sobel X      sobelx       ' CR ...
                 'Sobel Y      sobely       ' CR ...
                 'Sobel X-Y    sobelxy      ' CR ...
                 'Blur         blur         ' CR ...
                 'Smooth       smooth       ' CR ...
                 'Sharpen      sharpen      ' CR ...
                 'Gaussian     gaussian     ' CR ...
                 'Detail       detail       ' CR ...
                 'Identity     identity     '];

  % The shared memory object in the FPGA used for coefficient storage
  % is named 'coef_buffer'.
  coef_memory_name = 'coef_buffer';

  % Define 5x5 filter kernels and coefficient gain divisors.
  kernels.edge =     [ 0   0   0   0   0; ...
                       0  -1  -1  -1   0; ...
                       0  -1   8  -1   0; ...
                       0  -1  -1  -1   0; ...
                       0   0   0   0   0 ];
  divs.edge = 1;		       
  
  kernels.detail =   [ 0   0   0   0   0; ...
                       0   0  -1   0   0; ...
                       0  -1  10  -1   0; ...
                       0   0  -1   0   0; ...
                       0   0   0   0   0 ];
  divs.detail = 1/6;

  kernels.sobelx =   [ 0   0   0   0   0; ...
                       0  -1   0   1   0; ...
                       0  -2   0   2   0; ...
                       0  -1   0   1   0; ...
                       0   0   0   0   0 ];
  divs.sobelx = 1/2;

  kernels.sobely =   [ 0   0   0   0   0; ...
                       0   1   2   1   0; ...
                       0   0   0   0   0; ...
                       0  -1  -2  -1   0; ...
                       0   0   0   0   0 ];
  divs.sobely = 1/2;

  kernels.sobelxy =  [ 0   0   0   0   0; ...
                       0   0  -1  -1   0; ...
                       0   1   0  -1   0; ...
                       0   1   1   0   0; ...
                       0   0   0   0   0 ];
  divs.sobelxy = 1;

  kernels.blur =     [ 1   1   1   1   1; ...
                       1   0   0   0   1; ...
                       1   0   0   0   1; ...
                       1   0   0   0   1; ...
                       1   1   1   1   1 ];
  divs.blur = 1/16;

  kernels.smooth =   [ 1   1   1   1   1; ...
                       1   5   5   5   1; ...
                       1   5  44   5   1; ...
                       1   5   5   5   1; ...
                       1   1   1   1   1 ];
  divs.smooth = 1/32;		       

  kernels.sharpen =  [ 0   0   0   0   0; ...
                       0  -2  -2  -2   0; ...
                       0  -2  32  -2   0; ...
                       0  -2  -2  -2   0; ...
                       0   0   0   0   0 ];
  divs.sharpen = 1/48;

  kernels.gaussian = [ 1   1   2   1   1; ...
                       1   2   4   2   1; ...
                       2   4   8   4   2; ...
                       1   2   4   2   1; ...
                       1   1   2   1   1 ];
  divs.gaussian = 1/52;

  kernels.identity = [ 0   0   0   0   0; ...
                       0   0   0   0   0; ...
                       0   0   1   0   0; ...
                       0   0   0   0   0; ...
                       0   0   0   0   0];
  divs.identity = 1;

  if (~isfield(kernels,kernel))
    errmsg = ['Filter kernel ''' kernel ''' is not supported.  ' ...
              'You may select from the following kernels: ' ...
	      CR CR kernel_str];
    error(errmsg);        
  end
  mem_data = reshape(kernels.(kernel),1,25);
  
  % System Generator shared memory objects may be accessed as MATLAB
  % objects.  A SharedMemory object is created as follows:
  %
  %   obj = SharedMemory('memory_name');
  %
  % where 'memory_name' is the name of the unprotected shared memory object.
  try
    coef = SharedMemory(coef_memory_name);
  catch
    error('Could not connect to coefficient memory.');
    return;
  end
  
  % Once a shared memory object is created, it may be read from or written
  % to.  You may read the contents of a shared memory by indexing into the
  % object, e.g.,
  %
  %   obj(0) % Returns memory data at index 0.
  %
  % You may also write data into the shared memory, e.g.,
  %
  %   obj(0) = 5; % Writes the value 5 into memory index 0.
  % 
  % You may also use vector indexing to read or write vector data, e.g.,
  %
  %   obj(0:255) = [1:256]; % Writes values 1-256 into memory.
  %
  try 
    coef(0:24) = mem_data; % Write new kernel into the shared memory.
  catch
    error('Trouble writing to coefficient memory.');
    release(coef);
    return;
  end
  
  % Adjust the coefficient gain to sensible value for the kernel.
  try
    set_param('conv5x5_video_testbench/Gain Adjust', 'gain', ... 
      num2str(divs.(kernel)));
  catch
  end
  
  % The shared memory must be released once you have finished
  % accessing the data.  
  release(coef);
