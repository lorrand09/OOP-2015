
function transpose_fir_config(this_block)

  % Revision History:
  %
  %   03-Mar-2003  (21:32 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\work\sysgen\BlackBox\example1\answer\transpose_fir.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('transpose_fir');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('din');
  this_block.addSimulinkInport('rst');

  this_block.addSimulinkOutport('dout');

  dout_port = this_block.port('dout');
  dout_port.setType('Fix_26_12');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking and dynamic output type and generic settup in this code block.

    if (this_block.port('din').width ~= 12);
      this_block.setError('Input data type for port "din" must have width=12.');
    end

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);
  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------


  % add addtional source files as needed 
  % Add the files in the order they should be compiled.
  %    this_block.addFile('');
  this_block.addFile('mac.vhd');
  this_block.addFile('transpose_fir.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.setError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.setError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

