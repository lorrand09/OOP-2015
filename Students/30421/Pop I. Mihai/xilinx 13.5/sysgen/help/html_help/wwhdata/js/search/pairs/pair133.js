function FileData_Pairs(x)
{
x.t("supports","galois");
x.t("states","determined");
x.t("double-clicking","icon");
x.t("taps","together");
x.t("registers","lfsr");
x.t("determined","lfsr");
x.t("provide","ability");
x.t("parameter","dialog");
x.t("just","last");
x.t("lfsr","lfsr");
x.t("lfsr","counters");
x.t("lfsr","required");
x.t("lfsr","field");
x.t("lfsr","xilinx");
x.t("lfsr","start");
x.t("lfsr","advanced");
x.t("lfsr","block");
x.t("lfsr","chain");
x.t("lfsr","behave");
x.t("lfsr","continue");
x.t("lfsr","remain");
x.t("lfsr","options");
x.t("lfsr","seed");
x.t("lfsr","begins");
x.t("lfsr","output");
x.t("lfsr","runtime");
x.t("lfsr","structure");
x.t("shown","table");
x.t("counters","long");
x.t("description","port");
x.t("table","above");
x.t("required","serial");
x.t("always","msb");
x.t("ability","change");
x.t("optimal","settings");
x.t("current","value");
x.t("topic","common");
x.t("dout","data");
x.t("until","port");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("field","specifies");
x.t("last","register");
x.t("register","tap");
x.t("register","time");
x.t("register","chain");
x.t("register","chains");
x.t("register","(lfsr)");
x.t("register","galois");
x.t("interface","port");
x.t("icon","simulink");
x.t("tap","points");
x.t("tap","gate");
x.t("tap","gates");
x.t("points","feedback");
x.t("basic","elements");
x.t("basic","tab");
x.t("change","current");
x.t("change","until");
x.t("type","gate");
x.t("type","din");
x.t("type","may");
x.t("type","initial");
x.t("type","optional");
x.t("type","xor");
x.t("type","fibonacci");
x.t("please","xilinx");
x.t("titled","efficient");
x.t("time","lfsr");
x.t("time","happens");
x.t("reset","signal");
x.t("reloadable","input");
x.t("reloadable","seed");
x.t("shifted","bit");
x.t("xilinx","lfsr");
x.t("xilinx","application");
x.t("xilinx","blockset");
x.t("polynomial","always");
x.t("polynomial","field");
x.t("implied","specified");
x.t("listed","following");
x.t("gate","tap");
x.t("gate","type");
x.t("gate","beginning");
x.t("gate","allows");
x.t("gate","used");
x.t("lsb","polynomial");
x.t("needed","reload");
x.t("start","new");
x.t("start","specified");
x.t("new","sequence");
x.t("low","lfsr");
x.t("low","optional");
x.t("single","quotes");
x.t("advanced","tab");
x.t("block","supports");
x.t("block","parameter");
x.t("block","interface");
x.t("block","listed");
x.t("block","parameters");
x.t("block","explained");
x.t("block","input");
x.t("block","implements");
x.t("chain","xors");
x.t("chain","serial");
x.t("chain","connected");
x.t("chain","value");
x.t("chain","result");
x.t("size","input");
x.t("repeating","sequence");
x.t("again","block");
x.t("invoked","double-clicking");
x.t("parallel","reloadable");
x.t("parallel","parameters");
x.t("parallel","ports");
x.t("parallel","input");
x.t("parallel","output");
x.t("parallel","feedback");
x.t("beginning","register");
x.t("bits","lfsr");
x.t("dsp","memory");
x.t("xnor","field");
x.t("xnor","gate");
x.t("xnor","values");
x.t("behave","input");
x.t("requires","inputs");
x.t("specified","initial");
x.t("specified","hex");
x.t("high","again");
x.t("gates","last");
x.t("libraries","basic");
x.t("name","port");
x.t("box","invoked");
x.t("settings","maximum");
x.t("common","options");
x.t("exactly","output");
x.t("follows","type");
x.t("follows","parallel");
x.t("entered","hex");
x.t("boolean","input");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("parameters","used");
x.t("going","first");
x.t("loaded","seed");
x.t("continue","rst");
x.t("allows","re-loadable");
x.t("explained","topic");
x.t("structures","using");
x.t("input","dout");
x.t("input","field");
x.t("input","register");
x.t("input","change");
x.t("input","please");
x.t("input","needed");
x.t("input","ports");
x.t("input","configured");
x.t("input","seed");
x.t("input","enable");
x.t("input","output");
x.t("input","re-loadable");
x.t("input","case");
x.t("input","rst");
x.t("input","load");
x.t("ports","provide");
x.t("ports","block");
x.t("ports","exactly");
x.t("remain","current");
x.t("xors","xnors");
x.t("selected","parallel");
x.t("selected","requires");
x.t("signals","number");
x.t("quotes","lsb");
x.t("random","sequence");
x.t("ones","choosing");
x.t("configured","lfsr");
x.t("configured","either");
x.t("chains","output");
x.t("choosing","xnor");
x.t("choosing","xor");
x.t("din","data");
x.t("din","optional");
x.t("din","load");
x.t("(lfsr)","block");
x.t("serial","parallel");
x.t("options","block");
x.t("options","structure");
x.t("first","register");
x.t("long","pseudo-");
x.t("seed","lfsr");
x.t("seed","shifted");
x.t("seed","statically");
x.t("seed","value");
x.t("seed","optional");
x.t("seed","values");
x.t("number","registers");
x.t("number","bits");
x.t("number","specifies");
x.t("implements","linear");
x.t("signal","low");
x.t("signal","din");
x.t("signal","optional");
x.t("statically","specified");
x.t("statically","configured");
x.t("equation","optimal");
x.t("maximum","repeating");
x.t("specifies","tap");
x.t("specifies","gate");
x.t("specifies","size");
x.t("specifies","number");
x.t("specifies","whether");
x.t("specifies","initial");
x.t("specifies","structure");
x.t("may","ones");
x.t("may","zeroes");
x.t("whether","reloadable");
x.t("whether","bits");
x.t("whether","input");
x.t("index","xilinx");
x.t("step","repeatable");
x.t("begins","repeating");
x.t("zeroes","choosing");
x.t("initial","seed");
x.t("initial","value");
x.t("msb","implied");
x.t("enable","signal");
x.t("connected","output");
x.t("completes","lfsr");
x.t("stall","lfsr");
x.t("memory","index");
x.t("upon","newly");
x.t("together","result");
x.t("reload","statically");
x.t("reload","dynamic");
x.t("configuration","selected");
x.t("simulink","model");
x.t("value","lfsr");
x.t("value","field");
x.t("value","register");
x.t("value","change");
x.t("value","entered");
x.t("value","may");
x.t("value","step");
x.t("value","runtime");
x.t("specific","basic");
x.t("specific","advanced");
x.t("output","just");
x.t("output","lfsr");
x.t("output","shown");
x.t("output","field");
x.t("output","input");
x.t("output","selected");
x.t("output","re-loadable");
x.t("output","port");
x.t("sequence","states");
x.t("sequence","initial");
x.t("sequence","based");
x.t("sequence","generators");
x.t("pseudo-","random");
x.t("dynamic","lfsr");
x.t("data","input");
x.t("data","output");
x.t("optional","boolean");
x.t("optional","din");
x.t("optional","serial");
x.t("optional","rst");
x.t("optional","port");
x.t("xnors","taps");
x.t("information","specify");
x.t("newly","loaded");
x.t("result","going");
x.t("result","number");
x.t("bit","time");
x.t("happens","parallel");
x.t("re-loadable","input");
x.t("re-loadable","seed");
x.t("runtime","parallel");
x.t("runtime","load");
x.t("case","start");
x.t("application","note");
x.t("values","field");
x.t("values","stall");
x.t("feedback","polynomial");
x.t("feedback","chain");
x.t("feedback","signals");
x.t("feedback","fibonacci");
x.t("feedback","shift");
x.t("xor","gate");
x.t("xor","xnor");
x.t("port","description");
x.t("port","type");
x.t("port","low");
x.t("port","high");
x.t("port","name");
x.t("port","reload");
x.t("port","configuration");
x.t("rst","reset");
x.t("rst","signal");
x.t("rst","port");
x.t("above","block");
x.t("repeatable","sequence");
x.t("structure","type");
x.t("structure","gate");
x.t("structure","feedback");
x.t("efficient","shift");
x.t("fibonacci","structures");
x.t("fibonacci","xor");
x.t("fibonacci","galois");
x.t("note","titled");
x.t("galois","field");
x.t("galois","xor");
x.t("galois","fibonacci");
x.t("based","upon");
x.t("following","xilinx");
x.t("elements","dsp");
x.t("either","serial");
x.t("either","xor");
x.t("model","basic");
x.t("used","block");
x.t("used","feedback");
x.t("hex","single");
x.t("hex","input");
x.t("using","either");
x.t("blockset","lfsr");
x.t("blockset","libraries");
x.t("tab","follows");
x.t("tab","parameters");
x.t("load","ports");
x.t("load","signal");
x.t("load","completes");
x.t("load","load");
x.t("shift","registers");
x.t("shift","register");
x.t("generators","information");
x.t("linear","feedback");
x.t("inputs","lfsr");
x.t("specify","equation");
}
