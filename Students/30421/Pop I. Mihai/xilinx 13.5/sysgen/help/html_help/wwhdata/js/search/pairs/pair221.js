function FileData_Pairs(x)
{
x.t("included","benadda");
x.t("clock","system");
x.t("double-clicking","icon");
x.t("hardware","co-simulation");
x.t("hardware","components");
x.t("hardware","ports");
x.t("co-simulation","block");
x.t("co-simulation","implementation");
x.t("having","binary");
x.t("binary","point");
x.t("components","read");
x.t("components","connect");
x.t("prepared","hardware");
x.t("xtremedsp","external");
x.t("xtremedsp","kit");
x.t("zbt","sram");
x.t("uses","clock");
x.t("uses","external");
x.t("hdl","appropriate");
x.t("dialog","box");
x.t("look","behave");
x.t("18-bit","xilinx");
x.t("icon","simulink");
x.t("type","selects");
x.t("type","ram");
x.t("external","256k");
x.t("external","ram");
x.t("pin","location");
x.t("xilinx","xtremedsp");
x.t("xilinx","boolean");
x.t("xilinx","fixed-point");
x.t("nallatech","benadda");
x.t("contents","binary");
x.t("block","look");
x.t("block","follows");
x.t("block","provides");
x.t("block","parameters");
x.t("block","allows");
x.t("block","translated");
x.t("block","simulink");
x.t("block","drives");
x.t("256k","zbt");
x.t("file","zbt");
x.t("invoked","double-clicking");
x.t("behave","ports");
x.t("selects","binary");
x.t("selects","output");
x.t("ram","xtremedsp");
x.t("ram","xilinx");
x.t("ram","block");
x.t("ram","device");
x.t("ram","may");
x.t("kit","blockset");
x.t("constraints","file");
x.t("constraints","ports");
x.t("box","invoked");
x.t("stored","memory");
x.t("follows","output");
x.t("synchronous","ram");
x.t("provides","simulink");
x.t("boolean","signal");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("allows","system");
x.t("address","port");
x.t("sram","nallatech");
x.t("sram","device");
x.t("write","block");
x.t("write","micron");
x.t("device","uses");
x.t("device","address");
x.t("device","ports");
x.t("device","benadda");
x.t("ports","included");
x.t("ports","block");
x.t("ports","ram");
x.t("ports","traditional");
x.t("ports","model");
x.t("micron","zbt");
x.t("input","output");
x.t("input","data");
x.t("two's","complement");
x.t("width","input");
x.t("width","specifies");
x.t("point","selects");
x.t("point","position");
x.t("benadda","constraints");
x.t("benadda","board");
x.t("top-level","input");
x.t("signal","having");
x.t("signal","block");
x.t("signal","data");
x.t("may","choose");
x.t("specifies","width");
x.t("types","data");
x.t("16-bit","xilinx");
x.t("memory","contents");
x.t("memory","device");
x.t("translated","hardware");
x.t("translated","top-level");
x.t("board","model");
x.t("board","system");
x.t("simulink","read");
x.t("simulink","simulation");
x.t("simulink","model");
x.t("implementation","block");
x.t("specific","block");
x.t("signed","two's");
x.t("generator","components");
x.t("generator","model");
x.t("generator","portion");
x.t("fixed-point","signal");
x.t("fixed-point","data");
x.t("read","write");
x.t("output","ports");
x.t("output","data");
x.t("output","port");
x.t("location","constraints");
x.t("data","binary");
x.t("data","type");
x.t("data","width");
x.t("data","types");
x.t("data","data");
x.t("data","values");
x.t("data","port");
x.t("traditional","synchronous");
x.t("appropriate","pin");
x.t("values","stored");
x.t("values","output");
x.t("port","hardware");
x.t("port","driven");
x.t("choose","unsigned");
x.t("driven","xilinx");
x.t("driven","16-bit");
x.t("driven","unsigned");
x.t("complement","data");
x.t("system","generator");
x.t("model","prepared");
x.t("model","uses");
x.t("model","hdl");
x.t("model","parameters");
x.t("model","memory");
x.t("simulation","model");
x.t("connect","external");
x.t("blockset","xtremedsp");
x.t("portion","hardware");
x.t("unsigned","18-bit");
x.t("unsigned","signed");
x.t("position","data");
x.t("position","port");
x.t("drives","16-bit");
}
