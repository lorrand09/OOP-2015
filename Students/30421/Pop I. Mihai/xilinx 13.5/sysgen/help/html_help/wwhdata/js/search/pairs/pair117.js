function FileData_Pairs(x)
{
x.t("complex","multipliers");
x.t("complex","values");
x.t("root","inverse");
x.t("example","1024-point");
x.t("modes","input");
x.t("modes","rounding");
x.t("active","high");
x.t("overflow","condition");
x.t("double-clicking","icon");
x.t("clock","cycle");
x.t("clock","frequency");
x.t("clock","enable");
x.t("precision","options");
x.t("below","theory");
x.t("pulse","start");
x.t("pulse","read");
x.t("available","pipelined");
x.t("available","sample");
x.t("available","block");
x.t("available","checkbox");
x.t("available","fixed");
x.t("available","implementing");
x.t("available","output");
x.t("256","value");
x.t("parameter","dialog");
x.t("computing","discrete");
x.t("simultaneously","fwd_inv");
x.t("detected","processing");
x.t("throughput","(msps)");
x.t("throughput","transform");
x.t("version","data");
x.t("computation","uses");
x.t("full","description");
x.t("applied","start");
x.t("applied","implementation");
x.t("applied","output");
x.t("reorder","buffer");
x.t("refer","page");
x.t("description","port");
x.t("scale_sch_we","bool");
x.t("scale_sch_we","port");
x.t("scale_sch_we","asserted");
x.t("rfd","active");
x.t("rfd","signal");
x.t("_streaming_io","radix_4_burst_io");
x.t("timing","please");
x.t("timing","better");
x.t("timing","offset");
x.t("4-multiplier","structure");
x.t("binary","point");
x.t("always","unload");
x.t("nfft_we","bool");
x.t("nfft_we","port");
x.t("nfft_we","asserted");
x.t("scaling","options");
x.t("scaling","option");
x.t("scaling","schedule");
x.t("formula","explained");
x.t("few","cycles");
x.t("user","always");
x.t("current","state");
x.t("current","operation");
x.t("current","input");
x.t("reaches","n-1");
x.t("3-multiplier","structure");
x.t("topic","common");
x.t("uses","cooley-tukey");
x.t("uses","following");
x.t("outputs","data");
x.t("last","frame");
x.t("ufix_n_0","cp_len");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("until","enable");
x.t("pair","applied");
x.t("pair","read");
x.t("xtremedsp","slices");
x.t("interface","input");
x.t("bit-/digit-reversed","order");
x.t("configurable","transform");
x.t("points","ufix_n_0");
x.t("points","1024");
x.t("points","till");
x.t("points","transform");
x.t("mode","refer");
x.t("mode","width");
x.t("mode","signal");
x.t("mode","blk_exp");
x.t("mode","choose");
x.t("mode","log2n");
x.t("icon","simulink");
x.t("provided","section");
x.t("state","until");
x.t("state","reset");
x.t("pipelined","_streaming_io");
x.t("pipelined","streaming");
x.t("sample","pair");
x.t("sample","points");
x.t("sample","rate");
x.t("sample","sizes");
x.t("sample","period");
x.t("type","start");
x.t("type","width");
x.t("type","input");
x.t("type","xn_index");
x.t("resets","current");
x.t("xk_index","signal");
x.t("xk_index","marks");
x.t("basic","tab");
x.t("titled","transform");
x.t("pins","clock");
x.t("please","consult");
x.t("vector","complex");
x.t("pin","start");
x.t("pin","block");
x.t("farme","simultaneously");
x.t("time","configurable");
x.t("left","xn_im");
x.t("left","xn_re");
x.t("edone","active");
x.t("edone","marked");
x.t("reset","signal");
x.t("reset","activates");
x.t("reset","rst");
x.t("reset","port");
x.t("fourier","transform");
x.t("xilinx","fast");
x.t("xilinx","logicore");
x.t("xilinx","blockset");
x.t("followed","complete");
x.t("multiple","block's");
x.t("rate","signal");
x.t("listed","following");
x.t("default","fft");
x.t("fwd","next");
x.t("count","reaches");
x.t("count","using");
x.t("block's","sample");
x.t("back","initial");
x.t("start","pulse");
x.t("start","applied");
x.t("start","input");
x.t("start","processing");
x.t("start","signal");
x.t("start","marks");
x.t("start","bool");
x.t("start","asserted");
x.t("new","farme");
x.t("new","transform");
x.t("prefix","length");
x.t("prefix","insertion");
x.t("prefix","data");
x.t("prefix","copy");
x.t("advanced","tab");
x.t("consists","cyclic");
x.t("precedence","enable");
x.t("precedence","optional");
x.t("block","parameter");
x.t("block","timing");
x.t("block","outputs");
x.t("block","uses");
x.t("block","interface");
x.t("block","reset");
x.t("block","xilinx");
x.t("block","listed");
x.t("block","back");
x.t("block","ram");
x.t("block","floating");
x.t("block","parameters");
x.t("block","explained");
x.t("block","loads");
x.t("block","processing");
x.t("block","implements");
x.t("block","enable");
x.t("block","ready");
x.t("block","holds");
x.t("block","done");
x.t("xn_im","binary");
x.t("xn_im","signals");
x.t("xn_im","scaled");
x.t("xn_im","imaginary");
x.t("xn_im","signed");
x.t("frame","active");
x.t("frame","scale_sch_we");
x.t("frame","nfft_we");
x.t("frame","edone");
x.t("frame","start");
x.t("frame","block");
x.t("frame","cp_len_we");
x.t("frame","cyclic");
x.t("frame","nfft");
x.t("frame","busy");
x.t("frame","tied");
x.t("frame","signal");
x.t("frame","cp_len");
x.t("frame","scaled");
x.t("frame","scale_sch");
x.t("frame","overwritten");
x.t("frame","done");
x.t("frame","load");
x.t("size","example");
x.t("size","rfd");
x.t("size","nfft_we");
x.t("size","xk_index");
x.t("size","cp_len_we");
x.t("size","input");
x.t("size","next");
x.t("size","signal");
x.t("size","port");
x.t("size","transform");
x.t("size","associated");
x.t("size","hybrid");
x.t("cp_len_we","bool");
x.t("cp_len_we","port");
x.t("cp_len_we","asserted");
x.t("cp_len_we","dynamically");
x.t("indicates","output");
x.t("invoked","double-clicking");
x.t("radix_2_lite_burst_io","automatically_select");
x.t("again","reset");
x.t("decimation","frequency");
x.t("beginning","data");
x.t("beginning","transform");
x.t("cpv","signal");
x.t("cpv","marks");
x.t("cpv","port");
x.t("complete","output");
x.t("optimize","block");
x.t("optimize","options");
x.t("1024-point","fft");
x.t("presented","output");
x.t("check","box");
x.t("dsp","index");
x.t("dsp","-1l");
x.t("rfs","active");
x.t("rfs","signal");
x.t("rfs","port");
x.t("truncation","convergent");
x.t("xn_re","binary");
x.t("xn_re","xn_im");
x.t("xn_re","width");
x.t("xn_re","signed");
x.t("xn_re","real");
x.t("high","sample");
x.t("high","start");
x.t("high","block");
x.t("high","indicates");
x.t("high","ovflo");
x.t("high","signal");
x.t("high","blk_exp");
x.t("high","data");
x.t("high","note");
x.t("high","xk_im");
x.t("processed","data");
x.t("v7.1","advanced");
x.t("cycle","offset");
x.t("ram","count");
x.t("ram","partially");
x.t("ram","store");
x.t("ram","option");
x.t("ram","1024");
x.t("ram","distributed");
x.t("libraries","dsp");
x.t("forward","inverse");
x.t("forward","transform");
x.t("operation","block");
x.t("operation","fft");
x.t("run-time","configurable");
x.t("box","invoked");
x.t("box","optimize");
x.t("settings","corresponding");
x.t("common","options");
x.t("inclusive","fix_8_7");
x.t("inclusive","used");
x.t("inclusive","transform");
x.t("sampled","block");
x.t("follows","precision");
x.t("follows","memory");
x.t("follows","transform");
x.t("performance","optimization");
x.t("virtex","device");
x.t("discrete","fourier");
x.t("component","input");
x.t("component","output");
x.t("cycles","start");
x.t("cycles","unload");
x.t("3,3e","dsp");
x.t("(idft)","block");
x.t("(idft)","computed");
x.t("fix_8_7","fix_34_33");
x.t("provides","scaling");
x.t("provides","cyclic");
x.t("provides","point");
x.t("zero","less");
x.t("floating","point");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("parameters","used");
x.t("boolean","ovflo");
x.t("boolean","rst");
x.t("65536","implementation");
x.t("boxes","block");
x.t("fast","fourier");
x.t("explained","below");
x.t("explained","topic");
x.t("loading","rfs");
x.t("resultant","output");
x.t("partially","distributed");
x.t("multipliers","choose");
x.t("natural","order");
x.t("immediate","output");
x.t("started","last");
x.t("cyclic","prefix");
x.t("(3..16)","65536");
x.t("target","clock");
x.t("target","throughput");
x.t("target","data");
x.t("optimization","4-multiplier");
x.t("optimization","butterfly");
x.t("input","frame");
x.t("input","xn_im");
x.t("input","xn_re");
x.t("input","ports");
x.t("input","signals");
x.t("input","begin");
x.t("input","data");
x.t("input","port");
x.t("stream","signal");
x.t("stream","xk_im");
x.t("stream","xk_re");
x.t("width","modes");
x.t("width","binary");
x.t("width","choose");
x.t("width","log2n");
x.t("width","xk_im");
x.t("width","xk_re");
x.t("logicore","version");
x.t("logicore","block");
x.t("logicore","fast");
x.t("logicore","logicore");
x.t("logicore","data");
x.t("marked","bool");
x.t("marked","unsigned");
x.t("ports","cp_len");
x.t("resource","optimization");
x.t("understand","fft");
x.t("device","virtex");
x.t("device","3,3e");
x.t("device","kintex");
x.t("signals","xn_re");
x.t("signals","data");
x.t("signals","xk_re");
x.t("selected","input");
x.t("selected","signal");
x.t("selected","unload");
x.t("selected","valid");
x.t("selected","output");
x.t("fwd_inv","inverse");
x.t("fwd_inv","bool");
x.t("begin","data");
x.t("store","data");
x.t("frequency","pipelined");
x.t("frequency","target");
x.t("frequency","(mhz)");
x.t("sizes","provided");
x.t("sizes","1024");
x.t("sizes","positive");
x.t("point","mode");
x.t("point","size");
x.t("point","sizes");
x.t("point","maximum");
x.t("point","signal");
x.t("point","log2");
x.t("point","scaled");
x.t("point","s-1");
x.t("point","output");
x.t("point","ufix_5_0");
x.t("point","unscaled");
x.t("configured","forward");
x.t("nfft","size");
x.t("nfft","provides");
x.t("nfft","next");
x.t("nfft","log2");
x.t("nfft","port");
x.t("nfft","unsigned");
x.t("grows","left");
x.t("ovflo","signal");
x.t("ovflo","marks");
x.t("ovflo","scaled");
x.t("ovflo","option");
x.t("logic","3-multiplier");
x.t("logic","xtremedsp");
x.t("blocks","control");
x.t("(dft)","sample");
x.t("(dft)","n-point");
x.t("loads","scaling");
x.t("loads","point");
x.t("loads","cyclix");
x.t("loads","transform");
x.t("next","input");
x.t("checkbox","cyclic");
x.t("checkbox","run");
x.t("busy","active");
x.t("busy","signal");
x.t("period","block");
x.t("bit/digit","reversed");
x.t("smaller","point");
x.t("fixed","point");
x.t("options","complex");
x.t("options","block");
x.t("options","select");
x.t("options","data");
x.t("options","choose");
x.t("options","phase");
x.t("options","run");
x.t("automatically_select","target");
x.t("select","unscaled");
x.t("first","sample");
x.t("computed","vector");
x.t("processing","current");
x.t("processing","input");
x.t("number","sample");
x.t("number","zero");
x.t("number","stages");
x.t("control","behavior");
x.t("implements","efficient");
x.t("length","size");
x.t("length","(3..16)");
x.t("length","input");
x.t("length","selected");
x.t("length","nfft");
x.t("length","options");
x.t("length","square");
x.t("length","transform");
x.t("signal","overflow");
x.t("signal","available");
x.t("signal","precedence");
x.t("signal","sampled");
x.t("signal","width");
x.t("signal","marked");
x.t("signal","grows");
x.t("signal","driving");
x.t("signal","enable");
x.t("signal","bool");
x.t("signal","valid");
x.t("signal","asserted");
x.t("signal","run");
x.t("tied","high");
x.t("maximum","point");
x.t("maximum","number");
x.t("better","understand");
x.t("driving","scale_sch_we");
x.t("driving","nfft_we");
x.t("driving","reset");
x.t("driving","start");
x.t("driving","xn_im");
x.t("driving","cp_len_we");
x.t("driving","xn_re");
x.t("driving","fwd_inv");
x.t("driving","nfft");
x.t("driving","cp_len");
x.t("driving","enable");
x.t("driving","fwd_inv_we");
x.t("unload","pin");
x.t("unload","new");
x.t("unload","signal");
x.t("unload","unload");
x.t("unload","previous");
x.t("unload","data");
x.t("unload","port");
x.t("unload","asserted");
x.t("unload","used");
x.t("insertion","available");
x.t("insertion","selected");
x.t("insertion","option");
x.t("insertion","takes");
x.t("insertion","transform");
x.t("specifies","exponent");
x.t("index","xilinx");
x.t("index","input");
x.t("index","output");
x.t("inverse","dft");
x.t("inverse","transform");
x.t("(msps)","enter");
x.t("implementing","radix-4");
x.t("cp_len","cp_len_we");
x.t("cp_len","provides");
x.t("cp_len","next");
x.t("cp_len","number");
x.t("cp_len","port");
x.t("cp_len","unsigned");
x.t("xn_index","clock");
x.t("xn_index","count");
x.t("xn_index","cycles");
x.t("xn_index","signal");
x.t("xn_index","xn_index");
x.t("xn_index","marks");
x.t("section","titled");
x.t("section","output");
x.t("types","rounding");
x.t("marks","beginning");
x.t("marks","index");
x.t("marks","output");
x.t("lite","burst");
x.t("ordering","natural");
x.t("ordering","selected");
x.t("ordering","output");
x.t("ordering","choose");
x.t("factors","scaling");
x.t("factors","choose");
x.t("initial","state");
x.t("-1l","fast");
x.t("-1l","-1l");
x.t("theory","operation");
x.t("end","output");
x.t("enable","signal");
x.t("enable","activates");
x.t("enable","(en)");
x.t("enable","port");
x.t("transition","xn_index");
x.t("fft","configured");
x.t("fft","blocks");
x.t("fft","prefixes");
x.t("fft","computationally");
x.t("fft","compute");
x.t("fft","general");
x.t("bool","edone");
x.t("bool","default");
x.t("bool","cpv");
x.t("bool","rfs");
x.t("bool","high");
x.t("bool","nfft");
x.t("bool","ovflo");
x.t("bool","busy");
x.t("bool","unload");
x.t("bool","cp_len");
x.t("bool","scale_sch");
x.t("bool","output");
x.t("bool","blk_exp");
x.t("bool","done");
x.t("fwd_inv_we","bool");
x.t("fwd_inv_we","asserted");
x.t("log2","point");
x.t("log2","maximum");
x.t("scaled","scaling");
x.t("scaled","mode");
x.t("scaled","block");
x.t("consult","core");
x.t("square","root");
x.t("imaginary","component");
x.t("previous","frame");
x.t("scale_sch","provides");
x.t("scale_sch","next");
x.t("scale_sch","port");
x.t("ready","process");
x.t("ready","output");
x.t("option","available");
x.t("option","selected");
x.t("option","optional");
x.t("option","choose");
x.t("memory","options");
x.t("clb","logic");
x.t("architectures","decimation");
x.t("architectures","fft");
x.t("enter","target");
x.t("prefixes","beginning");
x.t("click","check");
x.t("radix-2","lite");
x.t("radix-2","burst");
x.t("architecture","natural");
x.t("1024","points");
x.t("1024","option");
x.t("1024","512");
x.t("less","point");
x.t("pre-v7.0","behavior");
x.t("simulink","model");
x.t("activates","optional");
x.t("n-point","forward");
x.t("represented","using");
x.t("power","dft");
x.t("s-1","value");
x.t("value","inclusive");
x.t("value","nfft");
x.t("value","output");
x.t("radix-4","burst");
x.t("till","xn_index");
x.t("till","1024");
x.t("core","data");
x.t("signed","data");
x.t("implementation","reorder");
x.t("implementation","checkbox");
x.t("implementation","options");
x.t("implementation","number");
x.t("implementation","phase");
x.t("implementation","tab");
x.t("specific","basic");
x.t("specific","advanced");
x.t("specific","implementation");
x.t("holds","current");
x.t("process","start");
x.t("condition","detected");
x.t("generator","block");
x.t("read","transition");
x.t("read","output");
x.t("asserting","unload");
x.t("cyclix","prefix");
x.t("valid","high");
x.t("valid","settings");
x.t("valid","cyclic");
x.t("valid","signal");
x.t("n-1","maximum");
x.t("takes","section");
x.t("computationally","efficient");
x.t("sequence","defined");
x.t("output","few");
x.t("output","bit-/digit-reversed");
x.t("output","frame");
x.t("output","cpv");
x.t("output","processed");
x.t("output","natural");
x.t("output","cyclic");
x.t("output","signals");
x.t("output","ordering");
x.t("output","fft");
x.t("output","data");
x.t("output","rank");
x.t("output","port");
x.t("schedule","input");
x.t("schedule","used");
x.t("page","logicore");
x.t("blk_exp","marked");
x.t("blk_exp","signal");
x.t("blk_exp","specifies");
x.t("specifying","cyclic");
x.t("data","throughput");
x.t("data","timing");
x.t("data","type");
x.t("data","xk_index");
x.t("data","followed");
x.t("data","start");
x.t("data","consists");
x.t("data","frame");
x.t("data","presented");
x.t("data","loading");
x.t("data","natural");
x.t("data","stream");
x.t("data","xn_index");
x.t("data","types");
x.t("data","option");
x.t("data","valid");
x.t("data","output");
x.t("data","sheet");
x.t("data","phase");
x.t("data","widths");
x.t("cooley-tukey","decimate-in-time");
x.t("optional","pins");
x.t("optional","reset");
x.t("optional","input");
x.t("optional","enable");
x.t("optional","output");
x.t("defined","transform");
x.t("radix_2_burst_io","radix_2_lite_burst_io");
x.t("bit","widths");
x.t("values","represented");
x.t("512","256");
x.t("(mhz)","enter");
x.t("rank","output");
x.t("(en)","pin");
x.t("efficient","algorithm");
x.t("port","available");
x.t("port","scale_sch_we");
x.t("port","fwd");
x.t("port","boolean");
x.t("port","nfft");
x.t("port","ovflo");
x.t("port","cp_len");
x.t("port","scale_sch");
x.t("port","option");
x.t("port","used");
x.t("overwritten","output");
x.t("sheet","full");
x.t("sheet","xilinx");
x.t("sheet","v7.1");
x.t("sheet","spartan");
x.t("exponent","value");
x.t("choose","pipelined");
x.t("choose","block");
x.t("choose","truncation");
x.t("choose","bit/digit");
x.t("choose","value");
x.t("choose","following");
x.t("phase","factors");
x.t("phase","factor");
x.t("rst","reset");
x.t("rst","pin");
x.t("structure","performance");
x.t("structure","resource");
x.t("butterfly","arithmetic");
x.t("7.1","xilinx");
x.t("7.1","block");
x.t("7.1","fast");
x.t("dft","(idft)");
x.t("dft","sequence");
x.t("integer","power");
x.t("note","xn_re");
x.t("note","xk_re");
x.t("done","active");
x.t("done","marked");
x.t("done","processing");
x.t("log2n","binary");
x.t("log2n","maximum");
x.t("algorithm","computing");
x.t("algorithm","burst");
x.t("positive","integer");
x.t("asserted","pulse");
x.t("asserted","resets");
x.t("asserted","reset");
x.t("asserted","block");
x.t("asserted","again");
x.t("asserted","high");
x.t("asserted","immediate");
x.t("asserted","loads");
x.t("asserted","unload");
x.t("asserted","till");
x.t("asserted","asserting");
x.t("ufix_5_0","point");
x.t("unscaled","mode");
x.t("unscaled","scaled");
x.t("factor","block");
x.t("factor","width");
x.t("convergent","rounding");
x.t("copy","end");
x.t("offset","first");
x.t("offset","pre-v7.0");
x.t("slices","parameters");
x.t("burst","i/o");
x.t("real","component");
x.t("order","user");
x.t("order","cpv");
x.t("order","rfs");
x.t("order","natural");
x.t("order","cyclic");
x.t("order","signal");
x.t("order","unload");
x.t("order","output");
x.t("order","optional");
x.t("xk_im","input");
x.t("xk_im","signals");
x.t("xk_im","signal");
x.t("xk_im","imaginary");
x.t("following","xilinx");
x.t("following","clb");
x.t("used","block");
x.t("used","run-time");
x.t("used","input");
x.t("used","read");
x.t("used","bit");
x.t("run","time");
x.t("run","multiple");
x.t("compute","point");
x.t("model","basic");
x.t("corresponding","transform");
x.t("system","generator");
x.t("using","block");
x.t("using","data");
x.t("using","hybrid");
x.t("streaming","i/o");
x.t("general","formula");
x.t("rounding","modes");
x.t("rounding","applied");
x.t("rounding","mode");
x.t("arithmetic","choose");
x.t("blockset","libraries");
x.t("blockset","fast");
x.t("i/o","architectures");
x.t("i/o","radix-2");
x.t("i/o","architecture");
x.t("i/o","implementation");
x.t("tab","follows");
x.t("tab","parameters");
x.t("distributed","ram");
x.t("stages","using");
x.t("kintex","device");
x.t("transform","computation");
x.t("transform","type");
x.t("transform","size");
x.t("transform","v7.1");
x.t("transform","forward");
x.t("transform","resultant");
x.t("transform","started");
x.t("transform","nfft");
x.t("transform","point");
x.t("transform","sizes");
x.t("transform","(dft)");
x.t("transform","smaller");
x.t("transform","length");
x.t("transform","signal");
x.t("transform","fwd_inv_we");
x.t("transform","output");
x.t("transform","7.1");
x.t("transform","system");
x.t("decimate-in-time","algorithm");
x.t("load","new");
x.t("associated","logicore");
x.t("reversed","order");
x.t("behavior","timing");
x.t("behavior","first");
x.t("unsigned","signal");
x.t("xk_re","width");
x.t("xk_re","signal");
x.t("xk_re","real");
x.t("xk_re","xk_im");
x.t("radix_4_burst_io","radix_2_burst_io");
x.t("memories","optimize");
x.t("memories","click");
x.t("spartan","device");
x.t("fix_34_33","xn_im");
x.t("fix_34_33","note");
x.t("buffer","choose");
x.t("hybrid","memories");
x.t("widths","inclusive");
x.t("widths","phase");
x.t("dynamically","specifying");
}
