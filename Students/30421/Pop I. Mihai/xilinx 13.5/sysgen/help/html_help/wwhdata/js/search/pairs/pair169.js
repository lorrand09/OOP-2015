function FileData_Pairs(x)
{
x.t("example","hardware");
x.t("example","shown");
x.t("example","subsystem");
x.t("double-clicking","icon");
x.t("library","xilinx");
x.t("available","black");
x.t("available","system");
x.t("below","using");
x.t("combined","simulation/for");
x.t("token","accompanying");
x.t("token","generation");
x.t("possible","simulate");
x.t("provide","behavioral");
x.t("provide","rtl");
x.t("version","xilinx");
x.t("advantages","simulation");
x.t("hardware","example");
x.t("hardware","co-simulation");
x.t("hardware","hdl");
x.t("hardware","provided");
x.t("hardware","multiplexer");
x.t("hardware","port");
x.t("hardware","simulation");
x.t("hardware","portion");
x.t("fpga","bitstream");
x.t("implement","subsystem");
x.t("shown","below");
x.t("co-simulation","token");
x.t("eliminated","future");
x.t("hdl","provide");
x.t("hdl","driving");
x.t("hdl","used");
x.t("dialog","box");
x.t("support","simulink's");
x.t("configurable","subsystem");
x.t("configurable","subsystems");
x.t("provided","second");
x.t("provided","first");
x.t("icon","simulink");
x.t("usual","simulink");
x.t("xilinx","blockset");
x.t("whenever","difference");
x.t("behavioral","hdl");
x.t("supplied","block");
x.t("block","available");
x.t("block","eliminated");
x.t("block","parameters");
x.t("block","allows");
x.t("block","appears");
x.t("block","simulation");
x.t("need","bit");
x.t("simulated","cannot");
x.t("invoked","double-clicking");
x.t("determines","input");
x.t("parallel","simulation");
x.t("results","provided");
x.t("results","design");
x.t("rtl","used");
x.t("cycle","accurate");
x.t("functionality","supplied");
x.t("box","hardware");
x.t("box","hdl");
x.t("box","invoked");
x.t("box","makes");
x.t("box","incorporate");
x.t("box","port");
x.t("useful","example");
x.t("useful","whenever");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("identified","simulation");
x.t("makes","possible");
x.t("boxes","incorporate");
x.t("allows","two");
x.t("second","useful");
x.t("second","generation");
x.t("ports","block");
x.t("input","port");
x.t("multiplexer's","simulation");
x.t("blocks","black");
x.t("blocks","simulation");
x.t("multiplexer","xilinx");
x.t("multiplexer","block");
x.t("multiplexer","need");
x.t("multiplexer","useful");
x.t("multiplexer","blocks");
x.t("multiplexer","switch");
x.t("multiplexer","deprecated");
x.t("multiplexer","two");
x.t("multiplexer","simulation");
x.t("multiplexer","system");
x.t("appears","index");
x.t("first","portion");
x.t("simulink's","configurable");
x.t("design","work");
x.t("design","drives");
x.t("design","produce");
x.t("design","contains");
x.t("cannot","translated");
x.t("driving","simulation");
x.t("different","types");
x.t("index","library");
x.t("ignored","noted");
x.t("accompanying","fpga");
x.t("types","hdl");
x.t("expected","block");
x.t("switch","black");
x.t("bitstream","available");
x.t("bitstream","simulated");
x.t("translated","hardware");
x.t("incorporate","hdl");
x.t("incorporate","different");
x.t("simulink","blocks");
x.t("simulink","model");
x.t("generator's","support");
x.t("several","advantages");
x.t("implementation","block");
x.t("specific","block");
x.t("generator","block");
x.t("generator","expected");
x.t("subsystem","hardware");
x.t("subsystem","capabilities");
x.t("subsystem","defined");
x.t("subsystem","simulation");
x.t("simulation/for","generation");
x.t("black","box");
x.t("black","boxes");
x.t("capabilities","configurable");
x.t("noted","simulation");
x.t("data","input");
x.t("future","version");
x.t("defined","usual");
x.t("bit","cycle");
x.t("generation","port");
x.t("generation","used");
x.t("generation","portion");
x.t("generation","pass");
x.t("case","portion");
x.t("deprecated","system");
x.t("port","token");
x.t("port","determines");
x.t("port","identified");
x.t("port","black");
x.t("port","used");
x.t("port","either");
x.t("two","portions");
x.t("two","inputs");
x.t("work","parallel");
x.t("accurate","simulation");
x.t("simulation","provide");
x.t("simulation","results");
x.t("simulation","second");
x.t("simulation","multiplexer's");
x.t("simulation","multiplexer");
x.t("simulation","black");
x.t("simulation","generation");
x.t("simulation","port");
x.t("simulation","model");
x.t("simulation","used");
x.t("simulation","pass");
x.t("simulation","produce");
x.t("system","generator's");
x.t("system","generator");
x.t("offers","several");
x.t("used","hardware");
x.t("used","implement");
x.t("used","implementation");
x.t("used","case");
x.t("used","generation");
x.t("used","simulation");
x.t("used","produce");
x.t("model","parameters");
x.t("model","portion");
x.t("either","used");
x.t("portions","design");
x.t("using","subsystem");
x.t("blockset","functionality");
x.t("blockset","simulation");
x.t("portion","hardware");
x.t("portion","design");
x.t("portion","ignored");
x.t("portion","drives");
x.t("pass","data");
x.t("simulate","design");
x.t("drives","combined");
x.t("drives","generation");
x.t("drives","simulation");
x.t("subsystems","offers");
x.t("produce","hardware");
x.t("produce","bitstream");
x.t("inputs","ports");
x.t("contains","simulation");
x.t("difference","used");
}
