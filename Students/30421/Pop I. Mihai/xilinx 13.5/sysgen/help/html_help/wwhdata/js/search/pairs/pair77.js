function FileData_Pairs(x)
{
x.t("double-clicking","icon");
x.t("precision","single");
x.t("precision","bits");
x.t("precision","number");
x.t("precision","specifies");
x.t("example","assert");
x.t("example","circuit");
x.t("clock","decision");
x.t("reported","specify");
x.t("below","example");
x.t("below","fails");
x.t("below","requires");
x.t("below","specify");
x.t("parameter","dialog");
x.t("parameter","assert");
x.t("parameter","block");
x.t("provide","output");
x.t("determined","case");
x.t("determined","assigning");
x.t("hardware","used");
x.t("hardware","using");
x.t("version","data");
x.t("shown","below");
x.t("description","arithmetic");
x.t("srl16","back");
x.t("srl16","input");
x.t("srl16","case");
x.t("6-1l","assert");
x.t("required","block");
x.t("required","resolve");
x.t("binary","point");
x.t("source","example");
x.t("components","certain");
x.t("components","feedback");
x.t("components","even");
x.t("situations","designer");
x.t("double","precision");
x.t("double","specifies");
x.t("topic","common");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("field","below");
x.t("uses","description");
x.t("uses","following");
x.t("implemented","hardware");
x.t("later","resolves");
x.t("icon","simulink");
x.t("provided","signal");
x.t("necessary","system");
x.t("necessary","using");
x.t("introduced","feedback");
x.t("assert","provided");
x.t("assert","assert");
x.t("assert","type");
x.t("assert","xilinx");
x.t("assert","rate");
x.t("assert","block");
x.t("assert","blocks");
x.t("assert","floating-");
x.t("type","parameter");
x.t("type","srl16");
x.t("type","assert");
x.t("type","rate");
x.t("type","specified");
x.t("type","input");
x.t("type","signal");
x.t("type","specifies");
x.t("type","whether");
x.t("type","and/or");
x.t("type","fixed-point");
x.t("type","output");
x.t("type","described");
x.t("sample","rate");
x.t("explicitly","sample");
x.t("explicitly","parameters");
x.t("heme","tic");
x.t("xilinx","assert");
x.t("xilinx","logicore");
x.t("xilinx","blockset");
x.t("rate","parameter");
x.t("rate","determined");
x.t("rate","assert");
x.t("rate","type");
x.t("rate","specified");
x.t("rate","input");
x.t("rate","signal");
x.t("rate","specifies");
x.t("rate","whether");
x.t("rate","and/or");
x.t("rate","constant");
x.t("rate","propagated");
x.t("rate","general");
x.t("however","cases");
x.t("listed","following");
x.t("back","srl16");
x.t("back","assert");
x.t("single","precision");
x.t("single","specifies");
x.t("engine","cannot");
x.t("certain","blocks");
x.t("block","parameter");
x.t("block","required");
x.t("block","dialog");
x.t("block","uses");
x.t("block","introduced");
x.t("block","assert");
x.t("block","xilinx");
x.t("block","listed");
x.t("block","follows");
x.t("block","parameters");
x.t("block","explained");
x.t("block","feature");
x.t("block","resolve");
x.t("block","cost");
x.t("block","seed");
x.t("block","design");
x.t("block","may");
x.t("block","force");
x.t("block","used");
x.t("8.1","later");
x.t("invoked","double-clicking");
x.t("need","add");
x.t("add","assert");
x.t("bits","double");
x.t("bits","custom");
x.t("bits","specifies");
x.t("presented","output");
x.t("fails","following");
x.t("resolves","rates");
x.t("dsp","-1l");
x.t("specified","explicitly");
x.t("specified","assertion");
x.t("specified","types");
x.t("specified","fixed-point");
x.t("specified","rates");
x.t("requires","assert");
x.t("libraries","floating-point");
x.t("box","provide");
x.t("box","components");
x.t("box","invoked");
x.t("box","output");
x.t("common","options");
x.t("path","shown");
x.t("follows","assert");
x.t("deterministically","however");
x.t("virtex","device");
x.t("custom","activates");
x.t("3,3e","dsp");
x.t("parameters","dialog");
x.t("parameters","assert");
x.t("parameters","block");
x.t("parameters","specific");
x.t("parameters","used");
x.t("boolean","fixed-point");
x.t("zero","least");
x.t("boxes","assert");
x.t("boxes","output");
x.t("explained","topic");
x.t("decision","whether");
x.t("basis","system");
x.t("input","srl16");
x.t("input","type");
x.t("input","rate");
x.t("input","port");
x.t("width","rate");
x.t("width","exponent");
x.t("width","fraction");
x.t("width","specify");
x.t("assertion","parameters");
x.t("logicore","version");
x.t("logicore","block");
x.t("logicore","logicore");
x.t("logicore","system");
x.t("logicore","resources");
x.t("device","virtex");
x.t("device","3,3e");
x.t("device","kintex");
x.t("designer","intervention");
x.t("error","assert");
x.t("error","message");
x.t("point","fixed-point");
x.t("point","output");
x.t("point","operator");
x.t("point","position");
x.t("blocks","assert");
x.t("blocks","xilinx");
x.t("blocks","may");
x.t("blocks","force");
x.t("blocks","instruct");
x.t("resolve","type");
x.t("resolve","error");
x.t("resolve","types");
x.t("resolve","rates");
x.t("select","signed");
x.t("feature","output");
x.t("options","block");
x.t("cost","hardware");
x.t("number","bits");
x.t("number","bit");
x.t("seed","rate");
x.t("signal","source");
x.t("signal","block");
x.t("signal","presented");
x.t("signal","connected");
x.t("design","below");
x.t("specifies","double");
x.t("specifies","single");
x.t("specifies","whether");
x.t("specifies","data");
x.t("specifies","bit");
x.t("whether","type");
x.t("whether","block");
x.t("whether","specified");
x.t("whether","initial");
x.t("whether","constant");
x.t("cannot","resolve");
x.t("particular","type");
x.t("may","necessary");
x.t("may","need");
x.t("may","include");
x.t("index","xilinx");
x.t("tic","type");
x.t("arbitrary","determined");
x.t("types","situations");
x.t("types","assert");
x.t("types","deterministically");
x.t("types","error");
x.t("types","resolve");
x.t("types","established");
x.t("types","cases");
x.t("floating-","point");
x.t("initial","rate");
x.t("-1l","6-1l");
x.t("floating-point","precision");
x.t("floating-point","index");
x.t("floating-point","arithmetic");
x.t("connected","input");
x.t("message","reported");
x.t("message","assert");
x.t("least","significant");
x.t("and/or","type");
x.t("and/or","rate");
x.t("and/or","types");
x.t("simulink","model");
x.t("activates","field");
x.t("include","black");
x.t("named","type");
x.t("named","rate");
x.t("specific","block");
x.t("signed","comp");
x.t("constant","clock");
x.t("constant","blocks");
x.t("rates","error");
x.t("rates","arbitrary");
x.t("rates","types");
x.t("rates","and/or");
x.t("fixed-point","precision");
x.t("fixed-point","select");
x.t("fixed-point","floating-point");
x.t("fixed-point","output");
x.t("force","rate");
x.t("force","particular");
x.t("force","rates");
x.t("circuit","below");
x.t("propagated","back");
x.t("generator","components");
x.t("generator","8.1");
x.t("generator","block");
x.t("established","feedback");
x.t("instruct","system");
x.t("intervention","required");
x.t("output","precision");
x.t("output","type");
x.t("output","boolean");
x.t("output","number");
x.t("output","floating-point");
x.t("output","port");
x.t("location","binary");
x.t("black","box");
x.t("data","type");
x.t("data","types");
x.t("data","sheet");
x.t("bit","binary");
x.t("bit","zero");
x.t("bit","location");
x.t("case","assert");
x.t("case","basis");
x.t("case","case");
x.t("port","type");
x.t("port","specifies");
x.t("port","named");
x.t("exponent","width");
x.t("described","topic");
x.t("feedback","path");
x.t("feedback","act");
x.t("feedback","paths");
x.t("sheet","spartan");
x.t("fraction","width");
x.t("significant","bit");
x.t("cases","assert");
x.t("cases","simulation");
x.t("following","xilinx");
x.t("following","message");
x.t("used","assert");
x.t("used","block");
x.t("used","resolve");
x.t("used","force");
x.t("used","data");
x.t("model","parameters");
x.t("simulation","engine");
x.t("system","resolve");
x.t("system","generator");
x.t("arithmetic","type");
x.t("using","components");
x.t("using","assert");
x.t("general","may");
x.t("v6.0","v6.0");
x.t("blockset","assert");
x.t("blockset","libraries");
x.t("assigning","rate");
x.t("kintex","device");
x.t("act","signal");
x.t("paths","block");
x.t("operator","v6.0");
x.t("unsigned","heme");
x.t("position","binary");
x.t("spartan","device");
x.t("even","resolvable");
x.t("specify","type");
x.t("specify","rate");
x.t("specify","exponent");
x.t("specify","fraction");
x.t("comp","unsigned");
x.t("resources","implemented");
x.t("resolvable","blocks");
}
