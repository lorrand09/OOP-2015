function FileData_Pairs(x)
{
x.t("supports","rates");
x.t("coding","available");
x.t("coding","table");
x.t("coding","uses");
x.t("coding","soft");
x.t("coding","requires");
x.t("coding","allows");
x.t("sel","indicates");
x.t("sel","input");
x.t("sel","respectively");
x.t("sel","port");
x.t("clock","cycles");
x.t("clock","enable");
x.t("clock","edge");
x.t("ignore","saving");
x.t("states","states");
x.t("states","within");
x.t("states","initialized");
x.t("equal","states");
x.t("synchronized","out_of_sync");
x.t("active","high");
x.t("active","decoder");
x.t("sclr","synchronously");
x.t("sclr","synchronous");
x.t("possible","data");
x.t("parameter","dialog");
x.t("parameter","decoder");
x.t("below","shows");
x.t("seven","input");
x.t("seven","erase");
x.t("available","soft");
x.t("available","standard");
x.t("available","decoder");
x.t("available","erase");
x.t("indicated","mask");
x.t("indicated","using");
x.t("muli-channel","selection");
x.t("combinations","either");
x.t("five","output");
x.t("detected","divided");
x.t("improved","ber");
x.t("anything","range");
x.t("(ber)","option");
x.t("version","data");
x.t("within","block");
x.t("within","trellis");
x.t("clear","synchronous");
x.t("movement","block");
x.t("table","below");
x.t("table","associated");
x.t("delayed","din");
x.t("delayed","decoder");
x.t("static","thresholds");
x.t("various","optimal");
x.t("binary","available");
x.t("binary","octal");
x.t("required","signals");
x.t("required","next");
x.t("required","dynamic");
x.t("optimal","path");
x.t("optimal","codes");
x.t("optimal","length");
x.t("optimal","convolution");
x.t("controlled","traceback");
x.t("1/2","1/7");
x.t("1/2","rate");
x.t("ber_done","port");
x.t("page1","tab");
x.t("synchronization","check");
x.t("synchronization","out_of_sync");
x.t("synchronization","options");
x.t("synchronization","evaluation");
x.t("synchronization","output");
x.t("synchronization","inputs");
x.t("weighs","cost");
x.t("1/3","rate");
x.t("counting","differences");
x.t("page2","tab");
x.t("derived","array");
x.t("user","input");
x.t("reaches","threshold");
x.t("topic","common");
x.t("shows","various");
x.t("dout","delayed");
x.t("dout","port");
x.t("outputs","bit");
x.t("soft-coded","data");
x.t("implemented","serial");
x.t("uses","euclidean");
x.t("uses","hamming");
x.t("uses","following");
x.t("page3","tab");
x.t("last","clock");
x.t("tothe","ber");
x.t("dialog","boxes");
x.t("interface","viterbi");
x.t("displays","two");
x.t("errors","detected");
x.t("errors","channel");
x.t("errors","present");
x.t("mode","type");
x.t("mode","decoder");
x.t("mode","larger");
x.t("register","encoder");
x.t("state","coding");
x.t("state","best");
x.t("state","ps_state");
x.t("state","rdy");
x.t("state","initialized");
x.t("state","zero");
x.t("state","width");
x.t("state","gives");
x.t("state","generated");
x.t("state","tb_block");
x.t("state","norm");
x.t("state","packet");
x.t("highly","punctured");
x.t("page4","tab");
x.t("modified","static");
x.t("data_out","output");
x.t("euclidean","metric");
x.t("traces","back");
x.t("pins","clock");
x.t("pins","treated");
x.t("type","page1");
x.t("type","basic");
x.t("type","standard");
x.t("type","allows");
x.t("type","trellis");
x.t("basic","viterbi");
x.t("times","constraint");
x.t("times","traceback");
x.t("best","state");
x.t("page5","tab");
x.t("buses","correspond");
x.t("buses","norm_thresh");
x.t("ber_thresh","added");
x.t("obtained","block");
x.t("obtained","theblock");
x.t("resets","decoder");
x.t("trace","trellis");
x.t("1/7","consequently");
x.t("external","erased");
x.t("external","puncturing");
x.t("pin","high");
x.t("time","soft");
x.t("page6","tab");
x.t("erasure","input");
x.t("bit-error-rate","(ber)");
x.t("mandatory","serial");
x.t("reset","active");
x.t("xilinx","logicore");
x.t("xilinx","viterbi");
x.t("xilinx","blockset");
x.t("achieves","minimal");
x.t("rate","sel");
x.t("rate","seven");
x.t("rate","derived");
x.t("rate","errors");
x.t("rate","channel");
x.t("rate","soft");
x.t("rate","(octal)");
x.t("rate","decoder");
x.t("rate","transmission");
x.t("rate","value");
x.t("rate","output");
x.t("rate","used");
x.t("i.e","norm");
x.t("i.e","two");
x.t("page7","tab");
x.t("listed","following");
x.t("back","directly");
x.t("back","trellis");
x.t("constraint","register");
x.t("constraint","length");
x.t("channel","indicated");
x.t("channel","counting");
x.t("channel","frequent");
x.t("channel","number");
x.t("count","indicated");
x.t("count","reaches");
x.t("count","bit-error-rate");
x.t("count","takes");
x.t("multi-channel","type");
x.t("needed","process");
x.t("require","logic");
x.t("product","specification");
x.t("page8","tab");
x.t("differences","re-encoded");
x.t("single","viterbi");
x.t("block","parameter");
x.t("block","uses");
x.t("block","interface");
x.t("block","xilinx");
x.t("block","listed");
x.t("block","depends");
x.t("block","parameters");
x.t("block","explained");
x.t("block","presence");
x.t("block","function");
x.t("block","16-bit");
x.t("block","considered");
x.t("block","valid");
x.t("block","behaves");
x.t("block","data");
x.t("block","norm");
x.t("block","two");
x.t("block","approximately");
x.t("447","block");
x.t("savings","two");
x.t("ps_state","packet_start");
x.t("rdy","indicates");
x.t("determines","optimal");
x.t("soft","coding");
x.t("soft","width");
x.t("soft","widths");
x.t("indicates","number");
x.t("indicates","normalization");
x.t("indicates","convolution");
x.t("indicates","least");
x.t("indicates","value");
x.t("indicates","valid");
x.t("indicates","values");
x.t("tcm","sector_in");
x.t("fashion","number");
x.t("initialization","none");
x.t("initialization","trellis");
x.t("erased","symbols");
x.t("treated","null-symbol");
x.t("parallel","block");
x.t("parallel","large");
x.t("packet_start","input");
x.t("packet_start","signal");
x.t("add","compare");
x.t("track","movement");
x.t("bits","ignore");
x.t("bits","branches");
x.t("bits","traced");
x.t("bits","(inclusive)");
x.t("presented","din");
x.t("vout","indicates");
x.t("frequent","normalization");
x.t("increase","serial");
x.t("non-dual","decoder");
x.t("initialized","state");
x.t("initialized","zero");
x.t("initialized","value");
x.t("initialized","acs");
x.t("check","box");
x.t("normally","signal");
x.t("become","available");
x.t("depends","traceback");
x.t("depends","output");
x.t("large","fast");
x.t("dsp","-1l");
x.t("decoded","rate");
x.t("decoded","value");
x.t("decoded","result");
x.t("decoded","using");
x.t("requires","data");
x.t("high","best");
x.t("high","direct");
x.t("high","signal");
x.t("high","asserting");
x.t("high","output");
x.t("high","corresponding");
x.t("high","higher");
x.t("processed","norm");
x.t("channels","decoded");
x.t("channels","data");
x.t("channels","used");
x.t("viewed","binary");
x.t("directly","range");
x.t("directly","without");
x.t("synchronously","clk");
x.t("libraries","communications");
x.t("path","length");
x.t("operation","convolution");
x.t("117","127");
x.t("wide","soft");
x.t("symbols","depends");
x.t("symbols","selected");
x.t("symbols","error");
x.t("symbols","specifies");
x.t("symbols","deleted");
x.t("range","none");
x.t("range","larger");
x.t("(high)","sel");
x.t("(high)","user");
x.t("(high)","input");
x.t("(high)","costs");
x.t("box","synchronization");
x.t("box","block_in");
x.t("box","selected");
x.t("block_in","delayed");
x.t("block_in","block_out");
x.t("common","options");
x.t("codes","table");
x.t("codes","1/2");
x.t("codes","1/3");
x.t("codes","makes");
x.t("codes","input");
x.t("codes","may");
x.t("codes","output");
x.t("codes","correct");
x.t("codes","dual");
x.t("codes","two");
x.t("codes","used");
x.t("corresponds","sel");
x.t("corresponds","block_in");
x.t("corresponds","array");
x.t("performance","highly");
x.t("block_out","corresponds");
x.t("block_out","signals");
x.t("virtex","device");
x.t("interlaced","channels");
x.t("cycles","needed");
x.t("entered","dual");
x.t("(low)","sel");
x.t("direct","specifies");
x.t("direct","traceback");
x.t("synchronous","clear");
x.t("synchronous","reset");
x.t("3,3e","dsp");
x.t("(octal)","optimal");
x.t("(octal)","117");
x.t("633","447");
x.t("633","755");
x.t("going","high");
x.t("parameters","page1");
x.t("parameters","specific");
x.t("parameters","used");
x.t("reduced","latency");
x.t("halved","latency");
x.t("none","initialization");
x.t("none","direct");
x.t("none","input");
x.t("zero","equal");
x.t("zero","user");
x.t("zero","packet_start");
x.t("zero","trellis");
x.t("zero","tb_block");
x.t("prior","transmission");
x.t("determine","best");
x.t("determine","cost");
x.t("standard","type");
x.t("standard","parallel");
x.t("convolutional","codes");
x.t("makes","sel");
x.t("area","savings");
x.t("place","page7");
x.t("place","internal");
x.t("boxes","xilinx");
x.t("encoded","bits");
x.t("encoded","convolution");
x.t("allows","interlaced");
x.t("allows","widths");
x.t("allows","specify");
x.t("selection","number");
x.t("fast","viterbi");
x.t("explained","topic");
x.t("357","233");
x.t("array","page4");
x.t("array","page5");
x.t("array","respectively");
x.t("array","length");
x.t("array","convolution");
x.t("array","(0-6)");
x.t("immediate","monitoring");
x.t("sets","convolutional");
x.t("allow","thresholds");
x.t("allow","specify");
x.t("input","combinations");
x.t("input","state");
x.t("input","buses");
x.t("input","viewed");
x.t("input","high");
x.t("input","symbols");
x.t("input","ports");
x.t("input","width");
x.t("input","samples");
x.t("input","tb_state");
x.t("input","trellis");
x.t("input","tb_block");
x.t("input","data");
x.t("input","bit");
x.t("input","port");
x.t("input","erase");
x.t("metric","cost");
x.t("metric","may");
x.t("second","step");
x.t("second","output");
x.t("ports","dout");
x.t("ports","become");
x.t("ports","valid");
x.t("ports","labeled");
x.t("mask","processed");
x.t("width","soft-coded");
x.t("width","indicates");
x.t("width","input");
x.t("width","data");
x.t("width","dual");
x.t("logicore","version");
x.t("logicore","product");
x.t("logicore","block");
x.t("logicore","logicore");
x.t("logicore","system");
x.t("out_of_sync","output");
x.t("device","virtex");
x.t("device","3,3e");
x.t("device","kintex");
x.t("viterbi","type");
x.t("viterbi","decoder");
x.t("viterbi","trellis");
x.t("ber","symbols");
x.t("ber","performance");
x.t("ber","options");
x.t("ber","port");
x.t("ber","symbol");
x.t("ber","thresh");
x.t("divided","output");
x.t("present","block");
x.t("selected","synchronization");
x.t("selected","last");
x.t("selected","block");
x.t("selected","latency");
x.t("selected","erase");
x.t("small","processes");
x.t("dual-decoder","offers");
x.t("decoders","constraint");
x.t("activated","select");
x.t("signals","required");
x.t("signals","track");
x.t("error","rate");
x.t("error","count");
x.t("error","threshold");
x.t("error","rates");
x.t("logic","theblock");
x.t("hard","coding");
x.t("din","ports");
x.t("din","values");
x.t("respectively","viterbi");
x.t("respectively","data");
x.t("next","two");
x.t("first","weighs");
x.t("first","array");
x.t("options","synchronization");
x.t("options","block");
x.t("options","reduced");
x.t("options","ber");
x.t("options","trellis");
x.t("options","tab");
x.t("serial","mode");
x.t("serial","fashion");
x.t("serial","small");
x.t("serial","processing");
x.t("serial","case");
x.t("select","dual");
x.t("select","module");
x.t("thresholds","synchronization");
x.t("thresholds","check");
x.t("thresholds","ber");
x.t("communications","index");
x.t("cost","second");
x.t("cost","incoming");
x.t("cost","used");
x.t("hamming","euclidean");
x.t("hamming","difference");
x.t("decoding","constraint");
x.t("decoding","used");
x.t("vin","port");
x.t("number","clock");
x.t("number","errors");
x.t("number","channels");
x.t("number","encoded");
x.t("number","input");
x.t("number","ber");
x.t("processing","time");
x.t("processing","data");
x.t("presence","null-symbols");
x.t("stops","processing");
x.t("decoder","supports");
x.t("decoder","achieves");
x.t("decoder","rate");
x.t("decoder","i.e");
x.t("decoder","multi-channel");
x.t("decoder","block");
x.t("decoder","v7.0");
x.t("decoder","block_out");
x.t("decoder","selected");
x.t("decoder","dual-decoder");
x.t("decoder","viterbi");
x.t("decoder","options");
x.t("decoder","serial");
x.t("decoder","number");
x.t("decoder","stops");
x.t("decoder","processes");
x.t("decoder","internal");
x.t("decoder","capability");
x.t("decoder","convolution");
x.t("decoder","given");
x.t("decoder","latency");
x.t("decoder","dual");
x.t("decoder","7.0");
x.t("decoder","two");
x.t("decoder","costs");
x.t("decoder","using");
x.t("length","parameter");
x.t("length","required");
x.t("length","optimal");
x.t("length","page2");
x.t("length","times");
x.t("length","trace");
x.t("length","constraint");
x.t("length","block");
x.t("length","reduced");
x.t("length","length");
x.t("length","traceback");
x.t("length","equals");
x.t("length","traceback-length");
x.t("length","(inclusive)");
x.t("function","dual");
x.t("re-encoded","dout");
x.t("signal","active");
x.t("signal","indicates");
x.t("signal","high");
x.t("signal","inactive");
x.t("signal","asserted");
x.t("magnitude","offset-binary");
x.t("magnitude","offset");
x.t("maximum","direct");
x.t("maximum","value");
x.t("may","decoded");
x.t("may","entered");
x.t("may","used");
x.t("against","possible");
x.t("against","branches");
x.t("normalization","i.e");
x.t("normalization","count");
x.t("normalization","threshold");
x.t("normalization","occurred");
x.t("normalization","taken");
x.t("processes","input");
x.t("different","decoders");
x.t("specifies","number");
x.t("index","data");
x.t("step","traces");
x.t("theblock","implemented");
x.t("theblock","considered");
x.t("match","decoding");
x.t("samples","error");
x.t("format","soft");
x.t("format","signed");
x.t("offset-binary","data");
x.t("handling","traceback");
x.t("internal","state");
x.t("internal","add");
x.t("capability","page3");
x.t("added","block");
x.t("transmission","channel");
x.t("transmission","across");
x.t("-1l","viterbi");
x.t("-1l","-1l");
x.t("steps","decode");
x.t("155","357");
x.t("code","array");
x.t("code","input");
x.t("code","radix");
x.t("end","state");
x.t("16-bit","input");
x.t("correspond","tothe");
x.t("enable","active");
x.t("enable","core");
x.t("convolution","codes");
x.t("convolution","code");
x.t("convolution","encoder");
x.t("convolution","output");
x.t("encoder","may");
x.t("encoder","traceback");
x.t("traceback","state");
x.t("traceback","direct");
x.t("traceback","allows");
x.t("traceback","viterbi");
x.t("traceback","length");
x.t("traceback","end");
x.t("given","constraint");
x.t("option","selected");
x.t("option","monitors");
x.t("least","significant");
x.t("null-symbols","symbols");
x.t("threshold","synchronization");
x.t("threshold","obtained");
x.t("threshold","normalization");
x.t("threshold","bit");
x.t("branches","viterbi");
x.t("tb_state","selected");
x.t("tb_state","value");
x.t("trellis","controlled");
x.t("trellis","optimal");
x.t("trellis","mode");
x.t("trellis","state");
x.t("trellis","determines");
x.t("trellis","initialization");
x.t("trellis","initialized");
x.t("trellis","hard");
x.t("occurred","within");
x.t("architecture","parallel");
x.t("taken","place");
x.t("din1","din7");
x.t("latency","times");
x.t("latency","block");
x.t("latency","parameters");
x.t("latency","option");
x.t("latency","latency");
x.t("saving","cost");
x.t("value","packet_start");
x.t("value","(high)");
x.t("value","(low)");
x.t("value","second");
x.t("value","convolution");
x.t("value","tb_state");
x.t("value","trellis");
x.t("value","valid");
x.t("value","except");
x.t("modules","page6");
x.t("core","clock");
x.t("consequently","displays");
x.t("depending","decoder");
x.t("gives","improved");
x.t("gives","immediate");
x.t("gives","measurement");
x.t("specific","page1");
x.t("signed","magnitude");
x.t("process","input");
x.t("process","first");
x.t("rates","1/2");
x.t("rates","input");
x.t("rates","used");
x.t("rates","using");
x.t("generated","internally");
x.t("generator","block");
x.t("decode","process");
x.t("valid","check");
x.t("valid","ber");
x.t("valid","data");
x.t("valid","using");
x.t("tb_block","signal");
x.t("takes","place");
x.t("evaluation","normalization");
x.t("evaluation","bit");
x.t("evaluation","dynamically");
x.t("considered","synchronized");
x.t("considered","synchronization");
x.t("deasserted","page8");
x.t("asserting","sclr");
x.t("output","required");
x.t("output","mandatory");
x.t("output","rate");
x.t("output","ports");
x.t("output","ber");
x.t("output","rates");
x.t("output","deasserted");
x.t("output","port");
x.t("output","asserted");
x.t("larger","soft");
x.t("larger","widths");
x.t("sequence","user");
x.t("sequence","state");
x.t("sequence","best");
x.t("dynamic","thresholds");
x.t("data","anything");
x.t("data","pins");
x.t("data","best");
x.t("data","bits");
x.t("data","normally");
x.t("data","decoded");
x.t("data","corresponds");
x.t("data","encoded");
x.t("data","input");
x.t("data","serial");
x.t("data","decoder");
x.t("data","against");
x.t("data","format");
x.t("data","output");
x.t("data","punctured");
x.t("data","sheet");
x.t("data","traced");
x.t("data","maintains");
x.t("correct","operation");
x.t("din7","hard");
x.t("dual","rate");
x.t("dual","decoding");
x.t("dual","decoder");
x.t("dual","incoming");
x.t("measurement","bit");
x.t("monitoring","errors");
x.t("behaves","dual");
x.t("punctured","external");
x.t("punctured","data");
x.t("internally","decoder");
x.t("module","block");
x.t("module","maximum");
x.t("optional","pins");
x.t("clk","resets");
x.t("bit","decoded");
x.t("bit","wide");
x.t("bit","error");
x.t("result","vout");
x.t("equals","length");
x.t("inactive","decoder");
x.t("233","357");
x.t("233","251");
x.t("values","presented");
x.t("values","number");
x.t("norm","indicates");
x.t("norm","signal");
x.t("norm","port");
x.t("norm","thresh");
x.t("(0-6)","first");
x.t("case","sclr");
x.t("7.0","xilinx");
x.t("7.0","block");
x.t("7.0","viterbi");
x.t("port","available");
x.t("port","ber_done");
x.t("port","outputs");
x.t("port","data_out");
x.t("port","indicates");
x.t("port","corresponds");
x.t("port","going");
x.t("port","added");
x.t("port","gives");
x.t("port","labeled");
x.t("specification","signed");
x.t("norm_thresh","ber_thresh");
x.t("sheet","spartan");
x.t("two","seven");
x.t("two","five");
x.t("two","sets");
x.t("two","different");
x.t("two","steps");
x.t("two","convolution");
x.t("two","output");
x.t("two","tabs");
x.t("puncturing","none");
x.t("puncturing","depending");
x.t("significant","bits");
x.t("significant","chip");
x.t("offset","binary");
x.t("asserted","(high)");
x.t("asserted","norm");
x.t("monitors","error");
x.t("incoming","data");
x.t("radix","convolutional");
x.t("packet","options");
x.t("packet","maximum");
x.t("costs","states");
x.t("costs","acs");
x.t("training","sequence");
x.t("following","xilinx");
x.t("either","hamming");
x.t("used","muli-channel");
x.t("used","block");
x.t("used","non-dual");
x.t("used","determine");
x.t("used","decoder");
x.t("used","value");
x.t("used","internally");
x.t("used","encoding");
x.t("corresponding","data");
x.t("offers","significant");
x.t("except","state");
x.t("except","dynamically");
x.t("system","generator");
x.t("using","optimal");
x.t("using","external");
x.t("using","erasure");
x.t("using","xilinx");
x.t("using","single");
x.t("using","tcm");
x.t("using","convolution");
x.t("127","117");
x.t("127","155");
x.t("tabs","allow");
x.t("symbol","count");
x.t("thresh","allow");
x.t("thresh","norm");
x.t("thresh","preset");
x.t("blockset","libraries");
x.t("blockset","viterbi");
x.t("minimal","error");
x.t("tab","synchronization");
x.t("tab","parameters");
x.t("tab","viterbi");
x.t("tab","activated");
x.t("tab","options");
x.t("tab","convolution");
x.t("tab","architecture");
x.t("tab","optional");
x.t("tab","puncturing");
x.t("tab","packet");
x.t("approximately","halved");
x.t("octal","decimal");
x.t("decimal","convolution");
x.t("acs","modules");
x.t("acs","module");
x.t("traced","back");
x.t("traced","directly");
x.t("deleted","prior");
x.t("across","channel");
x.t("preset","threshold");
x.t("compare","select");
x.t("kintex","device");
x.t("251","755");
x.t("erase","pin");
x.t("erase","ports");
x.t("erase","ber");
x.t("erase","port");
x.t("associated","logicore");
x.t("chip","area");
x.t("without","training");
x.t("maintains","state");
x.t("755","633");
x.t("labeled","sel");
x.t("labeled","din1");
x.t("edge","tb_block");
x.t("spartan","device");
x.t("null-symbol","given");
x.t("sector_in","inputs");
x.t("encoding","match");
x.t("widths","require");
x.t("widths","bits");
x.t("widths","increase");
x.t("(inclusive)","codes");
x.t("(inclusive)","vin");
x.t("higher","rate");
x.t("inputs","buses");
x.t("inputs","dual");
x.t("difference","input");
x.t("traceback-length","block");
x.t("specify","handling");
x.t("specify","convolution");
x.t("dynamically","modified");
x.t("dynamically","input");
}
