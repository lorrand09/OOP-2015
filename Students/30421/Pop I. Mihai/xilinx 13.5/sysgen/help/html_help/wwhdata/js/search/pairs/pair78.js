function FileData_Pairs(x)
{
x.t("double-clicking","icon");
x.t("example","keep");
x.t("example","strobe");
x.t("active","low");
x.t("active","high");
x.t("overflow","overflow");
x.t("overflow","flag");
x.t("overflow","read");
x.t("overflow","output");
x.t("clock","block");
x.t("clock","write");
x.t("clock","distributed");
x.t("clock","edge");
x.t("provide","data");
x.t("provide","fifo");
x.t("positionbyte","64-bit");
x.t("possible","choices");
x.t("parameter","dialog");
x.t("betransmitted","alongside");
x.t("alongside","data");
x.t("fpga","possible");
x.t("version","data");
x.t("keep","[0]");
x.t("keep","[7]");
x.t("flag","active");
x.t("flag","indicates");
x.t("flag","options");
x.t("flag","adds");
x.t("current","cycle");
x.t("user","overflows");
x.t("topic","common");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("field","indicates");
x.t("boundary","packet");
x.t("guaranteed","underreport");
x.t("rising","clock");
x.t("rising","edge");
x.t("implemented","fpga");
x.t("uses","following");
x.t("interface","block");
x.t("interface","write");
x.t("interface","width");
x.t("icon","simulink");
x.t("interrupt","flag");
x.t("basic","tab");
x.t("payload","integer");
x.t("payload","used");
x.t("type","specifies");
x.t("reset","port");
x.t("xilinx","logicore");
x.t("xilinx","axi");
x.t("xilinx","blockset");
x.t("listed","following");
x.t("queue","axi-compatible");
x.t("channel","tdata");
x.t("channel","tready");
x.t("count","guaranteed");
x.t("[63:56]","null");
x.t("[63:56]","valid");
x.t("low","overflow");
x.t("low","data");
x.t("block","parameter");
x.t("block","flag");
x.t("block","uses");
x.t("block","interface");
x.t("block","interrupt");
x.t("block","xilinx");
x.t("block","listed");
x.t("block","ram");
x.t("block","parameters");
x.t("block","explained");
x.t("block","implements");
x.t("block","port");
x.t("indicates","overflow");
x.t("indicates","boundary");
x.t("indicates","number");
x.t("indicates","whether");
x.t("indicates","different");
x.t("indicates","underflow");
x.t("indicates","master");
x.t("indicates","actual");
x.t("indicates","slave");
x.t("invoked","double-clicking");
x.t("chennel","read");
x.t("8.3","floating-");
x.t("wr_data_count","next");
x.t("depends","implementation");
x.t("features","influence");
x.t("dsp","-1l");
x.t("cycle","block");
x.t("cycle","tid");
x.t("cycle","tvalid");
x.t("byte","example");
x.t("byte","positionbyte");
x.t("byte","keep");
x.t("byte","tdata");
x.t("byte","data");
x.t("byte","qualifier");
x.t("byte","tlast");
x.t("processed","part");
x.t("processed","data");
x.t("high","active");
x.t("counts","adds");
x.t("ram","common");
x.t("ram","parameters");
x.t("libraries","control");
x.t("box","invoked");
x.t("stored","range");
x.t("range","16-4m");
x.t("16-4m","actual");
x.t("operation","occurs");
x.t("operation","reflected");
x.t("common","clock");
x.t("common","options");
x.t("performance","options");
x.t("corresponds","least");
x.t("corresponds","significant");
x.t("virtex","device");
x.t("bytes","tdest");
x.t("bytes","tkeep");
x.t("bytes","removed");
x.t("part","data");
x.t("3,3e","dsp");
x.t("parameters","provide");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("parameters","used");
x.t("provides","routing");
x.t("place","tvalid");
x.t("influence","implementation");
x.t("occured","overflowflow");
x.t("occured","underflow");
x.t("boxes","xilinx");
x.t("data_count","port");
x.t("explained","topic");
x.t("write","clock");
x.t("write","channel");
x.t("write","operation");
x.t("input","data");
x.t("ports","tdata");
x.t("width","data");
x.t("stream","identifier");
x.t("stream","tstrb");
x.t("stream","64-bit");
x.t("stream","tkeep");
x.t("stream","associated");
x.t("overflowflow","read");
x.t("logicore","version");
x.t("logicore","block");
x.t("logicore","logicore");
x.t("logicore","system");
x.t("device","virtex");
x.t("device","3,3e");
x.t("device","kintex");
x.t("[7:0]","null");
x.t("[7:0]","valid");
x.t("occupancy","data");
x.t("logic","floating-point");
x.t("error","occured");
x.t("error","specifies");
x.t("underreport","number");
x.t("choices","common");
x.t("point","operator");
x.t("occurs","rising");
x.t("next","rising");
x.t("accept","transfer");
x.t("options","block");
x.t("options","underflow");
x.t("options","fifo");
x.t("control","logic");
x.t("number","bytes");
x.t("number","words");
x.t("written","fifo");
x.t("implements","fifo");
x.t("reflected","wr_data_count");
x.t("driving","valid");
x.t("specifies","number");
x.t("specifies","whether");
x.t("specifies","fifo");
x.t("words","stored");
x.t("words","written");
x.t("words","fifo");
x.t("whether","overflow");
x.t("whether","underflow");
x.t("whether","content");
x.t("different","streams");
x.t("user-defined","sideband");
x.t("index","xilinx");
x.t("report","field");
x.t("tid","data");
x.t("arestn","adds");
x.t("arestn","global");
x.t("floating-","point");
x.t("tdata","processed");
x.t("tdata","primary");
x.t("underflow","flag");
x.t("underflow","underflow");
x.t("underflow","read");
x.t("underflow","output");
x.t("-1l","-1l");
x.t("-1l","axi");
x.t("floating-point","memory");
x.t("identifier","indicates");
x.t("master","driving");
x.t("primary","payload");
x.t("primary","input");
x.t("primary","output");
x.t("adds","overflow");
x.t("adds","data_count");
x.t("adds","arestn");
x.t("adds","underflow");
x.t("log2","fifo");
x.t("memory","queue");
x.t("memory","index");
x.t("least","significant");
x.t("threshold","parameters");
x.t("actual","depth");
x.t("actual","fifo");
x.t("ensure","user");
x.t("slave","accept");
x.t("tstrb","byte");
x.t("null","byte");
x.t("null","bytes");
x.t("simulink","model");
x.t("tready","indicates");
x.t("tready","asserted");
x.t("specific","basic");
x.t("implementation","type");
x.t("implementation","features");
x.t("implementation","optional");
x.t("implementation","tab");
x.t("64-bit","data");
x.t("sideband","information");
x.t("axi-compatible","block");
x.t("exception","behavior");
x.t("generator","block");
x.t("generator","8.3");
x.t("valid","tready");
x.t("valid","transfer");
x.t("valid","strobe");
x.t("takes","place");
x.t("read","channel");
x.t("read","error");
x.t("[0]","data");
x.t("deasserted","null");
x.t("transfer","current");
x.t("transfer","takes");
x.t("transfer","transfer");
x.t("output","data");
x.t("output","port");
x.t("depth","specifies");
x.t("depth","report");
x.t("depth","actual");
x.t("depth","implementation");
x.t("depth","fifo");
x.t("data","payload");
x.t("data","[63:56]");
x.t("data","chennel");
x.t("data","byte");
x.t("data","counts");
x.t("data","stream");
x.t("data","[7:0]");
x.t("data","threshold");
x.t("data","tready");
x.t("data","bit");
x.t("data","sheet");
x.t("data","tuser");
x.t("data","passing");
x.t("optional","ports");
x.t("information","betransmitted");
x.t("information","data");
x.t("bit","corresponds");
x.t("strobe","[0]");
x.t("strobe","[7]");
x.t("[7]","data");
x.t("overflows","fifo");
x.t("tvalid","indicates");
x.t("tvalid","tready");
x.t("routing","information");
x.t("theassociated","byte");
x.t("global","reset");
x.t("port","block");
x.t("port","indicates");
x.t("sheet","spartan");
x.t("integer","number");
x.t("asserted","tdata");
x.t("significant","byte");
x.t("tdest","provides");
x.t("packet","arestn");
x.t("following","xilinx");
x.t("model","basic");
x.t("used","provide");
x.t("used","block");
x.t("tkeep","byte");
x.t("system","generator");
x.t("axi","fifo");
x.t("qualifier","indicates");
x.t("qualifier","deasserted");
x.t("v6.0","v6.0");
x.t("blockset","libraries");
x.t("blockset","axi");
x.t("tab","performance");
x.t("tab","parameters");
x.t("tab","fifo");
x.t("across","interface");
x.t("tuser","user-defined");
x.t("distributed","ram");
x.t("kintex","device");
x.t("fifo","implemented");
x.t("fifo","xilinx");
x.t("fifo","count");
x.t("fifo","block");
x.t("fifo","depends");
x.t("fifo","occupancy");
x.t("fifo","options");
x.t("fifo","memory");
x.t("fifo","ensure");
x.t("fifo","implementation");
x.t("fifo","exception");
x.t("fifo","generator");
x.t("fifo","depth");
x.t("fifo","axi");
x.t("fifo","fifo");
x.t("associated","byte");
x.t("associated","bytes");
x.t("tlast","indicates");
x.t("behavior","write");
x.t("operator","v6.0");
x.t("passing","across");
x.t("edge","write");
x.t("edge","log2");
x.t("spartan","device");
x.t("removed","data");
x.t("content","theassociated");
x.t("content","associated");
x.t("streams","data");
}
