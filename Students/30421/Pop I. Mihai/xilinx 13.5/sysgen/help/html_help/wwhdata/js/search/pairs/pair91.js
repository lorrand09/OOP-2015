function FileData_Pairs(x)
{
x.t("example","example");
x.t("example","implements");
x.t("four","instructions");
x.t("double-clicking","icon");
x.t("precision","single");
x.t("precision","pecifies");
x.t("precision","bits");
x.t("precision","number");
x.t("clock","periods");
x.t("below","shows");
x.t("below","specify");
x.t("signd","a:b");
x.t("parameter","dialog");
x.t("appendix","dsp48");
x.t("drive","inputs");
x.t("hardware","clock");
x.t("hardware","simulink");
x.t("version","sign");
x.t("version","data");
x.t("create","dsp48");
x.t("description","mux");
x.t("description","dsp48");
x.t("delayed","version");
x.t("delayed","symmetric");
x.t("6-1l","constant");
x.t("instructions","dsp48");
x.t("instructions","multiplexer");
x.t("binary","point");
x.t("carry","source");
x.t("carry","cin");
x.t("carry","custom");
x.t("carry","[8]");
x.t("carry","input");
x.t("source","dsp48");
x.t("source","sign");
x.t("source","either");
x.t("mux","[6:4]");
x.t("mux","specifies");
x.t("mux","[3:0]");
x.t("mux","setting");
x.t("cin","source");
x.t("cin","sign");
x.t("cin","select");
x.t("double","precision");
x.t("double","specifies");
x.t("topic","common");
x.t("generating","dsp48");
x.t("sequences","figure");
x.t("shows","example");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("implemented","unsigned");
x.t("field","below");
x.t("field","name");
x.t("uses","following");
x.t("mode","constant");
x.t("supply","desired");
x.t("icon","simulink");
x.t("icon","constant");
x.t("displays","selected");
x.t("register","mux");
x.t("register","dsp48");
x.t("register","downshifted");
x.t("register","a:b");
x.t("basic","elements");
x.t("basic","tab");
x.t("type","specified");
x.t("type","dsp48");
x.t("type","value");
x.t("type","fixed-point");
x.t("type","output");
x.t("sample","period");
x.t("sample","periods");
x.t("[17:0]","concatenated");
x.t("[17:0]","produce");
x.t("ds48","instruction");
x.t("xilinx","logicore");
x.t("xilinx","blocks");
x.t("xilinx","constant");
x.t("xilinx","blockset");
x.t("form","z_mux");
x.t("listed","following");
x.t("saturated","needed");
x.t("needed","positive");
x.t("new","value");
x.t("single","precision");
x.t("single","specifies");
x.t("block","parameter");
x.t("block","create");
x.t("block","description");
x.t("block","uses");
x.t("block","icon");
x.t("block","xilinx");
x.t("block","listed");
x.t("block","parameters");
x.t("block","explained");
x.t("block","similar");
x.t("block","constant");
x.t("block","used");
x.t("block","drives");
x.t("block","generates");
x.t("invoked","double-clicking");
x.t("pecifies","data");
x.t("found","dsp48");
x.t("cascaded","input");
x.t("36-bit","value");
x.t("add","subtract");
x.t("bits","double");
x.t("bits","custom");
x.t("bits","specifies");
x.t("selects","delayed");
x.t("selects","instruction");
x.t("dsp","-1l");
x.t("directly","drive");
x.t("desired","instructions");
x.t("desired","sequence");
x.t("specified","fixed-point");
x.t("[6:4]","pcin");
x.t("libraries","basic");
x.t("box","invoked");
x.t("operation","displays");
x.t("operation","select");
x.t("common","options");
x.t("name","location");
x.t("follows","constant");
x.t("changed","new");
x.t("exactly","specified");
x.t("sampled","constant");
x.t("virtex","device");
x.t("dsp48","block");
x.t("dsp48","found");
x.t("dsp48","cascaded");
x.t("dsp48","operation");
x.t("dsp48","input");
x.t("dsp48","control");
x.t("dsp48","instruction");
x.t("dsp48","output");
x.t("dsp48","adder");
x.t("dsp48","tab");
x.t("custom","reveals");
x.t("custom","instruction");
x.t("custom","activates");
x.t("perform","addition");
x.t("3,3e","dsp");
x.t("boolean","value");
x.t("boolean","fixed-point");
x.t("useful","generating");
x.t("useful","mainly");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","allow");
x.t("parameters","specific");
x.t("parameters","used");
x.t("zero","least");
x.t("inherited","blocks");
x.t("plus","register");
x.t("plus","a:b");
x.t("subtract","carry");
x.t("[8]","carry");
x.t("operand","specifies");
x.t("operand","[7]");
x.t("sign","pcin");
x.t("sign","a:b");
x.t("boxes","xilinx");
x.t("allows","sample");
x.t("allows","selection");
x.t("selection","dsp48");
x.t("reveals","mask");
x.t("explained","topic");
x.t("multiplier","using");
x.t("target","hardware");
x.t("allow","formation");
x.t("implies","carry");
x.t("implies","[17:0]");
x.t("pcout","dsp48");
x.t("35x35-bit","multiplier");
x.t("width","sample");
x.t("width","exponent");
x.t("width","fraction");
x.t("width","specify");
x.t("mask","parameters");
x.t("addition","subtraction");
x.t("input","dsp48");
x.t("input","plus");
x.t("input","pcout");
x.t("input","specifies");
x.t("input","downshifted");
x.t("input","pcin");
x.t("logicore","version");
x.t("logicore","block");
x.t("logicore","logicore");
x.t("logicore","system");
x.t("device","virtex");
x.t("device","3,3e");
x.t("device","kintex");
x.t("round","pcin");
x.t("round","a:b");
x.t("selected","type");
x.t("selected","dsp48");
x.t("activated","detailed");
x.t("concatenated","[17:0]");
x.t("logic","math");
x.t("blocks","supply");
x.t("blocks","dsp48");
x.t("blocks","constant");
x.t("blocks","eventually");
x.t("point","fixed-point");
x.t("point","output");
x.t("point","operator");
x.t("point","position");
x.t("multiplication","inputs");
x.t("multiplexer","selects");
x.t("period","sampled");
x.t("period","associated");
x.t("appears","block");
x.t("select","cin");
x.t("select","allows");
x.t("select","signed");
x.t("options","block");
x.t("control","sequences");
x.t("control","logic");
x.t("control","instruction");
x.t("number","bits");
x.t("number","bit");
x.t("number","negative");
x.t("implements","35x35-bit");
x.t("muxes","specifies");
x.t("specifies","source");
x.t("specifies","carry");
x.t("specifies","double");
x.t("specifies","single");
x.t("specifies","whether");
x.t("specifies","value");
x.t("specifies","bit");
x.t("cannot","expressed");
x.t("z_mux","yx_mux");
x.t("whether","dsp48");
x.t("index","xilinx");
x.t("detailed","description");
x.t("floating-","point");
x.t("format","instruction");
x.t("-1l","6-1l");
x.t("msb","multiplication");
x.t("floating-point","precision");
x.t("floating-point","index");
x.t("floating-point","arithmetic");
x.t("downshifted","dsp48");
x.t("downshifted","operand");
x.t("least","significant");
x.t("option","signd");
x.t("[3:0]","dsp48");
x.t("symmetric","round");
x.t("instruction","mux");
x.t("instruction","field");
x.t("instruction","mode");
x.t("instruction","form");
x.t("instruction","block");
x.t("instruction","desired");
x.t("instruction","operation");
x.t("instruction","dsp48");
x.t("instruction","useful");
x.t("instruction","selected");
x.t("instruction","format");
x.t("instruction","selecting");
x.t("instruction","arithmetic");
x.t("establish","hardware");
x.t("formation","instruction");
x.t("simulink","sample");
x.t("simulink","constant");
x.t("simulink","model");
x.t("activates","field");
x.t("value","implemented");
x.t("value","dsp48");
x.t("value","boolean");
x.t("value","appears");
x.t("value","specifies");
x.t("value","constant");
x.t("value","signed");
x.t("value","rounded");
x.t("value","used");
x.t("similar","simulink");
x.t("constant","xilinx");
x.t("constant","block");
x.t("constant","changed");
x.t("constant","allows");
x.t("constant","blocks");
x.t("constant","floating-");
x.t("constant","value");
x.t("constant","constant");
x.t("constant","fixed-point");
x.t("constant","output");
x.t("constant","data");
x.t("figure","below");
x.t("specific","basic");
x.t("signed","output");
x.t("signed","comp");
x.t("periods","dsp48");
x.t("periods","used");
x.t("selecting","custom");
x.t("yx_mux","carry");
x.t("depending","mux");
x.t("mnemonic","description");
x.t("fixed-point","precision");
x.t("fixed-point","type");
x.t("fixed-point","select");
x.t("fixed-point","cannot");
x.t("fixed-point","floating-point");
x.t("fixed-point","value");
x.t("fixed-point","output");
x.t("generator","block");
x.t("sequence","four");
x.t("sequence","block");
x.t("output","precision");
x.t("output","register");
x.t("output","type");
x.t("output","boolean");
x.t("output","inherited");
x.t("output","number");
x.t("output","floating-point");
x.t("location","binary");
x.t("location","mnemonic");
x.t("data","type");
x.t("data","sheet");
x.t("subtraction","muxes");
x.t("bit","binary");
x.t("bit","zero");
x.t("bit","location");
x.t("[7]","add");
x.t("adder","carry");
x.t("adder","cin");
x.t("adder","perform");
x.t("adder","pcin");
x.t("adder","a:b");
x.t("exponent","width");
x.t("eventually","target");
x.t("sheet","spartan");
x.t("fraction","width");
x.t("pcin","cascaded");
x.t("pcin","dsp48");
x.t("pcin","operand");
x.t("pcin","sign");
x.t("pcin","implies");
x.t("pcin","symmetric");
x.t("pcin","depending");
x.t("pcin","pcin");
x.t("positive","value");
x.t("significant","bit");
x.t("concat","inputs");
x.t("following","xilinx");
x.t("elements","control");
x.t("used","block");
x.t("used","directly");
x.t("used","input");
x.t("used","establish");
x.t("model","basic");
x.t("rounded","saturated");
x.t("either","pcin");
x.t("either","a:b");
x.t("system","generator");
x.t("using","sequence");
x.t("arithmetic","type");
x.t("mainly","blocks");
x.t("setting","sign");
x.t("setting","option");
x.t("v6.0","appendix");
x.t("v6.0","v6.0");
x.t("blockset","libraries");
x.t("blockset","constant");
x.t("tab","ds48");
x.t("tab","follows");
x.t("tab","parameters");
x.t("tab","activated");
x.t("expressed","exactly");
x.t("kintex","device");
x.t("associated","constant");
x.t("operator","v6.0");
x.t("unsigned","dsp48");
x.t("unsigned","number");
x.t("position","binary");
x.t("drives","useful");
x.t("a:b","signd");
x.t("a:b","delayed");
x.t("a:b","selects");
x.t("a:b","parameters");
x.t("a:b","sign");
x.t("a:b","implies");
x.t("a:b","symmetric");
x.t("a:b","depending");
x.t("a:b","concat");
x.t("a:b","a:b");
x.t("spartan","device");
x.t("math","floating-point");
x.t("generates","constant");
x.t("produce","36-bit");
x.t("inputs","xilinx");
x.t("inputs","dsp48");
x.t("inputs","plus");
x.t("inputs","msb");
x.t("negative","value");
x.t("comp","unsigned");
x.t("specify","exponent");
x.t("specify","fraction");
}
