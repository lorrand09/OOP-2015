function FileData_Pairs(x)
{
x.t("double-clicking","icon");
x.t("precision","parameter");
x.t("precision","full");
x.t("precision","number");
x.t("precision","option");
x.t("precision","fixed-point");
x.t("precision","represent");
x.t("overflow","refer");
x.t("overflow","quantization");
x.t("parameter","dialog");
x.t("parameter","allows");
x.t("provide","enable");
x.t("defines","number");
x.t("full","precision");
x.t("full","block");
x.t("sufficient","precision");
x.t("refer","section");
x.t("delayed","parameters");
x.t("negation","input");
x.t("always","full");
x.t("binary","point");
x.t("don\u2019t","need");
x.t("user","defined");
x.t("topic","common");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("uses","sufficient");
x.t("icon","simulink");
x.t("basic","tab");
x.t("type","signed");
x.t("type","arithmetic");
x.t("sample","periods");
x.t("xilinx","negate");
x.t("xilinx","blockset");
x.t("total","bits");
x.t("listed","following");
x.t("block's","output");
x.t("block","parameter");
x.t("block","uses");
x.t("block","listed");
x.t("block","parameters");
x.t("block","explained");
x.t("block","computes");
x.t("invoked","double-clicking");
x.t("need","full");
x.t("bits","specifies");
x.t("bits","and/or");
x.t("bits","fixed-point");
x.t("quantization","overflow");
x.t("quantization","refer");
x.t("quantization","optional");
x.t("libraries","floating-point");
x.t("box","invoked");
x.t("common","options");
x.t("follows","precision");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("parameters","used");
x.t("floating","point");
x.t("reduced","number");
x.t("zero","least");
x.t("allows","specify");
x.t("explained","topic");
x.t("input","block");
x.t("point","fixed-point");
x.t("point","output");
x.t("point","position");
x.t("error","user");
x.t("options","block");
x.t("number","sample");
x.t("number","total");
x.t("number","bits");
x.t("number","fixed-point");
x.t("number","bit");
x.t("number","unsigned");
x.t("specifies","bit");
x.t("index","xilinx");
x.t("section","overflow");
x.t("floating-point","math");
x.t("enable","port");
x.t("negate","xilinx");
x.t("negate","block");
x.t("negate","negate");
x.t("option","allows");
x.t("least","significant");
x.t("and/or","fractional");
x.t("simulink","model");
x.t("latency","defines");
x.t("specific","basic");
x.t("signed","complement");
x.t("signed","comp");
x.t("periods","block's");
x.t("fixed-point","precision");
x.t("fixed-point","output");
x.t("fixed-point","arithmetic");
x.t("computes","arithmetic");
x.t("represent","result");
x.t("output","precision");
x.t("output","delayed");
x.t("output","always");
x.t("output","type");
x.t("output","quantization");
x.t("output","number");
x.t("output","signed");
x.t("output","unsigned");
x.t("location","binary");
x.t("optional","port");
x.t("result","without");
x.t("defined","don\u2019t");
x.t("bit","binary");
x.t("bit","zero");
x.t("bit","location");
x.t("port","provide");
x.t("port","latency");
x.t("fractional","bits");
x.t("significant","bit");
x.t("complement","number");
x.t("following","xilinx");
x.t("model","basic");
x.t("used","block");
x.t("arithmetic","negation");
x.t("arithmetic","type");
x.t("arithmetic","floating");
x.t("blockset","libraries");
x.t("blockset","negate");
x.t("tab","follows");
x.t("tab","parameters");
x.t("without","error");
x.t("unsigned","number");
x.t("unsigned","output");
x.t("position","binary");
x.t("math","index");
x.t("specify","reduced");
x.t("specify","output");
x.t("comp","output");
}
