function FileData_Pairs(x)
{
x.t("registers","selected");
x.t("registers","implementation");
x.t("registers","alumode");
x.t("double-clicking","icon");
x.t("four","12-bit");
x.t("four","bit");
x.t("overflow","output");
x.t("overflow","port");
x.t("equal","length");
x.t("rst_carryin","made");
x.t("considerations","user");
x.t("considerations","xilinx");
x.t("considerations","details");
x.t("provide","overflow");
x.t("provide","pattern");
x.t("provide","carry");
x.t("provide","carryout");
x.t("provide","multiplier");
x.t("provide","pcout");
x.t("provide","underflow");
x.t("provide","bcout");
x.t("provide","port");
x.t("provide","global");
x.t("provide","pcin");
x.t("provide","acout");
x.t("available","carry_in_sel");
x.t("available","mode");
x.t("available","resets");
x.t("available","reset");
x.t("available","pcout");
x.t("available","enable");
x.t("available","bcout");
x.t("available","port");
x.t("available","otherwise");
x.t("available","acout");
x.t("determined","number");
x.t("below","[n]");
x.t("reported","parameters");
x.t("parameter","dialog");
x.t("building","block");
x.t("hardware","primitive");
x.t("hardware","primitives");
x.t("hardware","useful");
x.t("hardware","maximum");
x.t("pattern","detected");
x.t("pattern","detector");
x.t("pattern","bar");
x.t("pattern","detect");
x.t("pattern","input");
x.t("pattern","attribute");
x.t("pattern","detection");
x.t("pattern","used");
x.t("pattern","either");
x.t("detected","reset");
x.t("detector","mask");
x.t("detector","choices");
x.t("fpga","xtremedsp");
x.t("subtracters","built");
x.t("acin","input");
x.t("acin","port");
x.t("implement","small");
x.t("refer","following");
x.t("description","may");
x.t("carry","register");
x.t("carry","reset");
x.t("carry","indicates");
x.t("carry","selected");
x.t("carry","select");
x.t("carry","port");
x.t("carry","cascade");
x.t("(multsigncascin)","exposed");
x.t("carryout","mode");
x.t("carryout","lsb");
x.t("carryout","output");
x.t("carryout","port");
x.t("mux","select");
x.t("carry_in_sel","register");
x.t("carry_in_sel","ports");
x.t("carry_in_sel","selected");
x.t("carry_in_sel","port");
x.t("ce_b1","first");
x.t("user","guide");
x.t("ce_b2","second");
x.t("topic","common");
x.t("48-bit","value");
x.t("48-bit","adder");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("xtremedsp","design");
x.t("field","port");
x.t("outputs","pcout");
x.t("implemented","rtl");
x.t("generating","multiple");
x.t("18-bit","25-bit");
x.t("icon","simulink");
x.t("register","available");
x.t("register","pattern");
x.t("register","carry");
x.t("register","reset");
x.t("register","opmode");
x.t("register","matched");
x.t("register","input");
x.t("register","selected");
x.t("register","next");
x.t("register","internal");
x.t("register","made");
x.t("register","bcout");
x.t("register","pipeline");
x.t("register","output");
x.t("register","alumode");
x.t("register","port");
x.t("register","acout");
x.t("mode","operation");
x.t("mode","used");
x.t("provided","pattern");
x.t("provided","inverse");
x.t("provided","port");
x.t("bar","detect");
x.t("bar","detection");
x.t("support","96-bit");
x.t("rst_a","made");
x.t("basic","tab");
x.t("best","described");
x.t("resets","pipeline");
x.t("resets","output");
x.t("rst_b","made");
x.t("25-bit","signed");
x.t("reset","register");
x.t("reset","ports");
x.t("reset","port");
x.t("dsp48es","provide");
x.t("rst_c","made");
x.t("xilinx","xtremedsp");
x.t("xilinx","virtex");
x.t("xilinx","dsp48e");
x.t("xilinx","blockset");
x.t("sections","provide");
x.t("multiple","cycle-true");
x.t("listed","following");
x.t("primitive","synthesizable");
x.t("consolidate","control");
x.t("lsb","corresponds");
x.t("detect","port");
x.t("removes","register");
x.t("speed","lower");
x.t("certain","bits");
x.t("(patternbdetect)","output");
x.t("details","adder");
x.t("distinct","clocks");
x.t("block","provide");
x.t("block","parameter");
x.t("block","pattern");
x.t("block","listed");
x.t("block","dsp");
x.t("block","parameters");
x.t("block","optimized");
x.t("block","explained");
x.t("block","target");
x.t("block","virtex-5");
x.t("block","bcin");
x.t("block","targeted");
x.t("block","pipelining");
x.t("block","efficient");
x.t("block","used");
x.t("passes","bit");
x.t("96-bit","accumulators/adders");
x.t("combines","18-bit");
x.t("combines","opmode");
x.t("invoked","double-clicking");
x.t("cascaded","acin");
x.t("cascaded","bcin");
x.t("indicates","operation");
x.t("indicates","whether");
x.t("during","pattern");
x.t("check","output");
x.t("bits","carry_in_sel");
x.t("bits","during");
x.t("bits","opmode");
x.t("bits","wide");
x.t("bits","alumode");
x.t("bits","corresponding");
x.t("guide","dsp48");
x.t("guide","detailed");
x.t("guide","optional");
x.t("rtl","description");
x.t("dsp","xilinx");
x.t("dsp","applications");
x.t("selects","special");
x.t("opmode","carry");
x.t("opmode","carry_in_sel");
x.t("opmode","register");
x.t("opmode","block");
x.t("opmode","indicates");
x.t("opmode","bits");
x.t("opmode","ports");
x.t("opmode","alumode");
x.t("opmode","port");
x.t("directly","port");
x.t("directly","dsp48e");
x.t("cycle","pattern");
x.t("built","two");
x.t("primitives","mode");
x.t("high","speed");
x.t("libraries","index");
x.t("programmable","mux");
x.t("synthesizable","model");
x.t("box","invoked");
x.t("operation","four");
x.t("operation","adder/subtractor");
x.t("operation","two");
x.t("operation","dsp48e");
x.t("wide","mode");
x.t("wide","bits");
x.t("wide","msb");
x.t("rst_m","made");
x.t("common","options");
x.t("cycle-true","islands");
x.t("virtex","xtremedsp");
x.t("virtex","devices");
x.t("corresponds","second");
x.t("corresponds","first");
x.t("(multsigncascout)","made");
x.t("performance","without");
x.t("dsp48","block");
x.t("dsp48","macro");
x.t("carryin","opmode");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("parameters","used");
x.t("parameters","attributes");
x.t("rst_p","made");
x.t("useful","design");
x.t("sign","cascade");
x.t("accumulators/adders","subtracters");
x.t("optimized","hardware");
x.t("boxes","following");
x.t("matched","pattern");
x.t("map","directly");
x.t("24-bit","fields");
x.t("24-bit","adders");
x.t("explained","topic");
x.t("multiplier","carry");
x.t("multiplier","48-bit");
x.t("multiplier","register");
x.t("multiplier","reset");
x.t("multiplier","indicates");
x.t("multiplier","sign");
x.t("multiplier","selected");
x.t("multiplier","instruction");
x.t("multiplier","pipeline");
x.t("multiplier","encountered");
x.t("target","devices");
x.t("pcout","registered");
x.t("pcout","output");
x.t("pcout","port");
x.t("rst_alumode","made");
x.t("fields","four12-bit");
x.t("fields","achieved");
x.t("input","provide");
x.t("input","pattern");
x.t("input","register");
x.t("input","multiplier");
x.t("input","mask");
x.t("input","split");
x.t("input","length");
x.t("input","specifies");
x.t("input","whether");
x.t("input","taken");
x.t("input","bcout");
x.t("input","port");
x.t("input","operations");
x.t("input","acout");
x.t("ports","parameters");
x.t("ports","15-bit");
x.t("ports","based");
x.t("ports","dsp48e");
x.t("ports","tab");
x.t("contain","dsp48e");
x.t("attribute","48-bit");
x.t("attribute","bit");
x.t("attribute","48bit");
x.t("mask","field");
x.t("mask","register");
x.t("mask","certain");
x.t("mask","selects");
x.t("mask","input");
x.t("mask","attribute");
x.t("mask","whether");
x.t("mask","used");
x.t("mask","mode1");
x.t("virtex-5","fpga");
x.t("virtex-5","xtremedsp");
x.t("second","b/bcin");
x.t("second","adder's");
x.t("second","pipeline");
x.t("second","a/acin");
x.t("addition","bit");
x.t("device","families");
x.t("selected","registers");
x.t("selected","overflow");
x.t("selected","pattern");
x.t("selected","carry");
x.t("selected","carryout");
x.t("selected","block");
x.t("selected","combines");
x.t("selected","multiplier");
x.t("selected","pcout");
x.t("selected","mask");
x.t("selected","underflow");
x.t("selected","enable");
x.t("selected","bcout");
x.t("selected","implementation");
x.t("selected","optional");
x.t("selected","port");
x.t("selected","pcin");
x.t("selected","dsp48e");
x.t("selected","acout");
x.t("selected","dynamically");
x.t("reset/enable","ports");
x.t("reset/enable","tab");
x.t("small","add-subtract");
x.t("functions","high");
x.t("logic","best");
x.t("logic","utilization");
x.t("choices","select");
x.t("registered","reset/enable");
x.t("registered","pipeline");
x.t("error","reported");
x.t("next","cycle");
x.t("explanation","parameters");
x.t("occurs","number");
x.t("carrycascout","made");
x.t("give","valuable");
x.t("select","registers");
x.t("select","indicates");
x.t("select","mask");
x.t("select","adder's");
x.t("select","port");
x.t("select","rounding");
x.t("bcin","input");
x.t("bcin","length");
x.t("bcin","port");
x.t("unit","pattern");
x.t("unit","split");
x.t("exposed","port");
x.t("exposed","pcin");
x.t("first","b/bcin");
x.t("first","adder's");
x.t("first","pipeline");
x.t("first","a/acin");
x.t("split","12-bit");
x.t("split","two");
x.t("mult_carry_in","multiplier");
x.t("targeted","device");
x.t("options","block");
x.t("control","port");
x.t("number","below");
x.t("number","mask");
x.t("gui","mask");
x.t("ce_a1","first");
x.t("design","considerations");
x.t("design","using");
x.t("tied","provide");
x.t("length","removes");
x.t("length","b/bcin");
x.t("length","less");
x.t("length","bcout");
x.t("length","pipeline");
x.t("length","a/acin");
x.t("length","acout");
x.t("ce_a2","second");
x.t("maximum","performance");
x.t("specifies","input");
x.t("specifies","length");
x.t("12-bit","sections");
x.t("12-bit","adders");
x.t("whether","carry");
x.t("whether","outputs");
x.t("whether","opmode");
x.t("whether","input");
x.t("whether","gui");
x.t("whether","internal");
x.t("whether","read");
x.t("whether","alumode");
x.t("may","map");
x.t("subtracter","adder/subtracted/logic");
x.t("four12-bit","fields");
x.t("index","dsp");
x.t("detailed","explanation");
x.t("inverse","pattern");
x.t("ce_ctrl","made");
x.t("ce_ctrl","controls");
x.t("internal","multiplier");
x.t("msb","corresponds");
x.t("[n]","determined");
x.t("underflow","occurs");
x.t("underflow","output");
x.t("underflow","port");
x.t("connected","available");
x.t("connected","acin");
x.t("connected","carry");
x.t("connected","dsp48");
x.t("connected","pcout");
x.t("connected","multiplier");
x.t("connected","bcin");
x.t("connected","pcin");
x.t("enable","ports");
x.t("enable","port");
x.t("option","selected");
x.t("option","used");
x.t("adder/subtractor/logic","unit");
x.t("symmetric","convergent");
x.t("b/bcin","register");
x.t("b/bcin","input");
x.t("b/bcin","selected");
x.t("b/bcin","pipeline");
x.t("lower","power");
x.t("adder/subtracted/logic","unit");
x.t("adder's","carryout");
x.t("adder's","input");
x.t("instruction","provide");
x.t("instruction","using");
x.t("families","contain");
x.t("insight","using");
x.t("taken","directly");
x.t("made","available");
x.t("less","equal");
x.t("less","logic");
x.t("simulink","model");
x.t("value","48-bit");
x.t("value","passes");
x.t("value","value");
x.t("value","used");
x.t("value","masks");
x.t("1-bit","wide");
x.t("bcout","pipeline");
x.t("bcout","output");
x.t("bcout","port");
x.t("power","less");
x.t("signed","multiplier");
x.t("pipeline","registers");
x.t("pipeline","acin");
x.t("pipeline","carry");
x.t("pipeline","register");
x.t("pipeline","indicates");
x.t("pipeline","opmode");
x.t("pipeline","multiplier");
x.t("pipeline","input");
x.t("pipeline","length");
x.t("pipeline","specifies");
x.t("pipeline","b/bcin");
x.t("pipeline","pipeline");
x.t("pipeline","alumode");
x.t("pipeline","selections");
x.t("implementation","parameters");
x.t("implementation","tab");
x.t("specific","basic");
x.t("specific","reset/enable");
x.t("specific","implementation");
x.t("specific","pipelining");
x.t("specific","optional");
x.t("macro","generating");
x.t("islands","distinct");
x.t("generate","dsp48e");
x.t("pipelining","tab");
x.t("read","bcin");
x.t("read","port");
x.t("adder/subtractor","48-bit");
x.t("adder/subtractor","mode");
x.t("encountered","simulation");
x.t("output","register");
x.t("output","adder/subtractor/logic");
x.t("output","pipeline");
x.t("output","port");
x.t("optional","input");
x.t("optional","ports");
x.t("optional","port");
x.t("ce_c","port");
x.t("alumode","register");
x.t("alumode","indicates");
x.t("alumode","carryin");
x.t("alumode","selected");
x.t("alumode","carry_in");
x.t("alumode","port");
x.t("detection","reset");
x.t("detection","(patternbdetect)");
x.t("detection","mask");
x.t("detection","selected");
x.t("detection","logic");
x.t("detection","value");
x.t("detection","read");
x.t("detection","output");
x.t("detection","port");
x.t("bit","input");
x.t("bit","select");
x.t("bit","[n]");
x.t("bit","value");
x.t("bit","carry_in");
x.t("bit","adders");
x.t("bit","hex");
x.t("carry_in","carry_in_sel");
x.t("carry_in","port");
x.t("underflowed","underflow");
x.t("clocks","virtex-5");
x.t("adder","carryout");
x.t("adder","programmable");
x.t("adder","selected");
x.t("adder","subtracter");
x.t("efficient","building");
x.t("port","rst_carryin");
x.t("port","provide");
x.t("port","acin");
x.t("port","(multsigncascin)");
x.t("port","carry");
x.t("port","ce_b1");
x.t("port","ce_b2");
x.t("port","provided");
x.t("port","rst_a");
x.t("port","register");
x.t("port","rst_b");
x.t("port","reset");
x.t("port","rst_c");
x.t("port","cascaded");
x.t("port","indicates");
x.t("port","bits");
x.t("port","rst_m");
x.t("port","(multsigncascout)");
x.t("port","dsp48");
x.t("port","rst_p");
x.t("port","multiplier");
x.t("port","rst_alumode");
x.t("port","input");
x.t("port","second");
x.t("port","selected");
x.t("port","registered");
x.t("port","carrycascout");
x.t("port","bcin");
x.t("port","exposed");
x.t("port","first");
x.t("port","mult_carry_in");
x.t("port","ce_a1");
x.t("port","tied");
x.t("port","ce_a2");
x.t("port","ce_ctrl");
x.t("port","connected");
x.t("port","option");
x.t("port","b/bcin");
x.t("port","made");
x.t("port","1-bit");
x.t("port","pipeline");
x.t("port","output");
x.t("port","ce_c");
x.t("port","bit");
x.t("port","alumode");
x.t("port","rst");
x.t("port","ce_carry_in");
x.t("port","a/acin");
x.t("port","dsp48e");
x.t("port","controls");
x.t("port","rst_ctrl");
x.t("port","using");
x.t("port","ce_alumode");
x.t("port","ce_m");
x.t("port","ce_p");
x.t("described","equality");
x.t("global","reset");
x.t("global","enable");
x.t("rst","made");
x.t("selections","provide");
x.t("beyond","bit");
x.t("15-bit","port");
x.t("otherwise","port");
x.t("pcin","port");
x.t("two","dsp48es");
x.t("two","24-bit");
x.t("two","bit");
x.t("ce_carry_in","carry");
x.t("topics","give");
x.t("applications","xilinx");
x.t("convergent","rounding");
x.t("based","pipeline");
x.t("adders","four");
x.t("adders","carryout");
x.t("adders","virtex");
x.t("a/acin","register");
x.t("a/acin","selected");
x.t("a/acin","pipeline");
x.t("dsp48e","hardware");
x.t("dsp48e","implemented");
x.t("dsp48e","xilinx");
x.t("dsp48e","block");
x.t("dsp48e","combines");
x.t("dsp48e","instruction");
x.t("dsp48e","underflowed");
x.t("dsp48e","dsp48e");
x.t("dsp48e","overflowed");
x.t("controls","opmode");
x.t("utilization","adder");
x.t("valuable","insight");
x.t("following","user");
x.t("following","xilinx");
x.t("following","topics");
x.t("model","basic");
x.t("model","selected");
x.t("model","option");
x.t("used","pattern");
x.t("used","implement");
x.t("used","support");
x.t("used","block");
x.t("used","opmode");
x.t("used","mask");
x.t("used","symmetric");
x.t("used","generate");
x.t("hex","value");
x.t("special","masks");
x.t("corresponding","addition");
x.t("either","mask");
x.t("rst_ctrl","made");
x.t("simulation","error");
x.t("using","pattern");
x.t("using","multiplier");
x.t("using","mask");
x.t("using","dsp48e");
x.t("using","understanding");
x.t("rounding","pattern");
x.t("rounding","mask");
x.t("ce_alumode","alumode");
x.t("add-subtract","functions");
x.t("setting","mode");
x.t("understanding","dsp48");
x.t("blockset","libraries");
x.t("blockset","dsp48e");
x.t("tab","acin");
x.t("tab","reset");
x.t("tab","consolidate");
x.t("tab","block");
x.t("tab","synthesizable");
x.t("tab","parameters");
x.t("tab","length");
x.t("operations","selected");
x.t("cascade","port");
x.t("acout","pipeline");
x.t("acout","output");
x.t("acout","port");
x.t("ce_m","multiplier");
x.t("without","using");
x.t("bit.48-bit","value");
x.t("overflowed","beyond");
x.t("achieved","setting");
x.t("equality","check");
x.t("mode1","mode2");
x.t("devices","contain");
x.t("devices","dsp48e");
x.t("dynamically","optional");
x.t("48bit","hex");
x.t("masks","bit");
x.t("masks","used");
x.t("masks","bit.48-bit");
x.t("mode2","refer");
x.t("attributes","virtex-5");
x.t("ce_p","port");
}
