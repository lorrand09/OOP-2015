function FileData_Pairs(x)
{
x.t("registers","required");
x.t("registers","external");
x.t("registers","reset");
x.t("registers","time-alignment");
x.t("registers","custom");
x.t("registers","selected");
x.t("registers","enable");
x.t("registers","option");
x.t("registers","note");
x.t("sel","third");
x.t("sel","input");
x.t("sel","second");
x.t("sel","appears");
x.t("sel","signal");
x.t("sel","port");
x.t("double-clicking","icon");
x.t("active","pipeline");
x.t("active","individual");
x.t("muxb","muxc");
x.t("tells","system");
x.t("example","appear");
x.t("example","using");
x.t("example","alignment");
x.t("modes","listed");
x.t("modes","adder");
x.t("p=p-cin","----");
x.t("arise","control");
x.t("supports","carry-in");
x.t("determined","user-specified");
x.t("determined","opmodes");
x.t("determined","order");
x.t("parameter","values");
x.t("available","dsp48");
x.t("available","options");
x.t("else","latency");
x.t("muxc","muxctrl");
x.t("integers","ports");
x.t("below","shows");
x.t("below","opmode");
x.t("below","dsp48");
x.t("below","symbolic");
x.t("irrespective","case");
x.t("abstraction","blocks");
x.t("ever","target");
x.t("right","shifted");
x.t("shown","below");
x.t("p=c-cin","----");
x.t("user-specified","parameter");
x.t("refer","table");
x.t("refer","topic");
x.t("refer","dsp48");
x.t("refer","port");
x.t("refer","symbolic");
x.t("table","irrespective");
x.t("table","cin");
x.t("table","opmodes");
x.t("table","ports");
x.t("table","consider");
x.t("table","optional");
x.t("table","above");
x.t("table","a:b");
x.t("p=pcin-a:b-c-cin","adder");
x.t("p=c-p-cin","----");
x.t("currently","example");
x.t("instructions","field");
x.t("instructions","require");
x.t("instructions","p=pcin");
x.t("instructions","dsp48");
x.t("instructions","macro");
x.t("carryout","carrycascout");
x.t("various","xtremedsp");
x.t("eight","opmodes");
x.t("once","once");
x.t("once","inputs");
x.t("always","present");
x.t("required","register");
x.t("cin","refer");
x.t("cin","p=pcin-a:b-c-cin");
x.t("cin","cin");
x.t("cin","p=c-c-cin");
x.t("cin","p=pcin-a:b-cin");
x.t("cin","p=-c-p-cin");
x.t("cin","p=pcin");
x.t("cin","p=-p-cin");
x.t("cin","p=p-c-p-cin");
x.t("cin","-a:b");
x.t("cin","p=-c-cin");
x.t("cin","multiplier");
x.t("cin","input");
x.t("cin","_port1");
x.t("cin","p=c-c-p-cin");
x.t("cin","p=pcin-p-cin");
x.t("cin","----");
x.t("cin","p=pcin-p-c-cin");
x.t("cin","p=p");
x.t("cin","optional");
x.t("cin","adder");
x.t("cin","pcin");
x.t("cin","p=p-p-cin");
x.t("cin","p=-cin");
x.t("cin","p=p-c-cin");
x.t("cin","p=pcin-a");
x.t("cin","p=pcin-c");
x.t("discussed","greater");
x.t("topic","details");
x.t("topic","entering");
x.t("/-/","operators");
x.t("descriptions","usage");
x.t("refers","symbolic");
x.t("p=c-c-cin","----");
x.t("helps","makes");
x.t("technologies","depending");
x.t("reinterpret","convert");
x.t("xtremedsp","slice");
x.t("outputs","determined");
x.t("outputs","underneath");
x.t("outputs","registered");
x.t("field","tells");
x.t("field","sel");
x.t("field","instructions");
x.t("field","discussed");
x.t("field","require");
x.t("field","specified");
x.t("field","opmode");
x.t("field","enables");
x.t("field","corresponds");
x.t("field","dsp48");
x.t("field","contain");
x.t("field","specifies");
x.t("field","connected");
x.t("field","latency");
x.t("field","output");
x.t("field","used");
x.t("dialog","box");
x.t("implemented","ouput");
x.t("implemented","dsp48");
x.t("implemented","value");
x.t("implemented","case");
x.t("shows","dsp48");
x.t("0x00","pcout");
x.t("p=pcin-a:b-cin","adder");
x.t("17-p-c-cin","----");
x.t("generating","multiple");
x.t("dsp/dsp48a/dsp48e","collectively");
x.t("interface","dsp48");
x.t("icon","simulink");
x.t("register","dsp48");
x.t("register","instances");
x.t("register","output");
x.t("provided","table");
x.t("provided","block");
x.t("mode","mode");
x.t("mode","selection");
x.t("mode","multiplier");
x.t("mode","supported");
x.t("mode","latency");
x.t("18-bit","inputs");
x.t("support","dsp48");
x.t("support","input");
x.t("type","memory");
x.t("type","value");
x.t("type","pcin");
x.t("type","restrictions");
x.t("type","alignment");
x.t("basic","tab");
x.t("categories","identifiers");
x.t("time","block");
x.t("external","registers");
x.t("external","dsp48");
x.t("reset","ports");
x.t("reset","enable");
x.t("reset","port");
x.t("orders","multiple");
x.t("shifted","input");
x.t("xilinx","technologies");
x.t("xilinx","xtremedsp");
x.t("xilinx","blockset");
x.t("multiple","operands");
x.t("multiple","cycle-true");
x.t("multiple","opmodes");
x.t("multiple","symbolic");
x.t("inside","outside");
x.t("expose","bcout");
x.t("execution","determined");
x.t("followed","number");
x.t("editing","custom");
x.t("listed","below");
x.t("listed","table");
x.t("listed","once");
x.t("listed","instructions");
x.t("listed","following");
x.t("wraps","dsp48/dsp48e/dsp48a");
x.t("convert","blocks");
x.t("text","block");
x.t("speed","operation");
x.t("require","xtremedsp");
x.t("require","multiplier");
x.t("require","using");
x.t("automatically","added");
x.t("ouput","case");
x.t("identifiers/operands","signal_1");
x.t("limitations","support");
x.t("limitations","dsp48");
x.t("exceeds","18bits");
x.t("consists","controls");
x.t("details","dsp48");
x.t("details","issues");
x.t("17-a","b-cin");
x.t("single","dsp48");
x.t("distinct","clocks");
x.t("block","dialog");
x.t("block","generating");
x.t("block","dsp/dsp48a/dsp48e");
x.t("block","interface");
x.t("block","external");
x.t("block","listed");
x.t("block","wraps");
x.t("block","symbols");
x.t("block","identifiers");
x.t("block","dsp48");
x.t("block","provides");
x.t("block","parameters");
x.t("block","mask");
x.t("block","bcin");
x.t("block","instead");
x.t("block","option");
x.t("block","variable");
x.t("block","pipelining");
x.t("block","along");
x.t("block","port");
x.t("block","pcin");
x.t("block","mreg");
x.t("block","without");
x.t("block","achieved");
x.t("configurations","dsp48");
x.t("manifest","ports");
x.t("18bits","result");
x.t("entering","opmodes");
x.t("entering","pipeline");
x.t("invoked","double-clicking");
x.t("operands","opmode");
x.t("operands","opmodes");
x.t("operands","appearing");
x.t("appropriately","aligns");
x.t("list","opmodes");
x.t("list","separated");
x.t("group","controls");
x.t("simplifies","using");
x.t("assignment","begin");
x.t("assignment","operator");
x.t("36-bit","input");
x.t("p=-c-p-cin","----");
x.t("carry-in","fabric");
x.t("presented","port");
x.t("simple","model");
x.t("c-cin","adder");
x.t("exceed","data");
x.t("dsp","ever");
x.t("dsp","block");
x.t("dsp","technology");
x.t("dsp","slice");
x.t("dsp","system");
x.t("referred","xtremedsp");
x.t("p=pcin","cin");
x.t("p=pcin","17-p-c-cin");
x.t("p=pcin","17-a");
x.t("p=pcin","bcin");
x.t("p=pcin","17-a:b-cin");
x.t("p=pcin","17cin");
x.t("p=pcin","17-c-a:b-cin");
x.t("p=pcin","17-p-cin");
x.t("p=pcin","17-c-cin");
x.t("p=pcin","a:b");
x.t("depends","dsp48");
x.t("supplying","inputs");
x.t("time-alignment","issues");
x.t("features","supports");
x.t("specified","sel");
x.t("specified","instructions");
x.t("specified","block");
x.t("specified","compile");
x.t("specified","dsp48a");
x.t("specified","dsp48e");
x.t("handle","multiple");
x.t("opmode","instructions");
x.t("opmode","implemented");
x.t("opmode","execution");
x.t("opmode","listed");
x.t("opmode","list");
x.t("opmode","assignment");
x.t("opmode","specified");
x.t("opmode","dsp48");
x.t("opmode","selection");
x.t("opmode","first");
x.t("opmode","maximum");
x.t("opmode","format");
x.t("opmode","follow");
x.t("opmode","instruction");
x.t("opmode","port");
x.t("opmode","used");
x.t("opmode","strictly");
x.t("opmode","contains");
x.t("high","speed");
x.t("directly","output");
x.t("libraries","index");
x.t("box","sel");
x.t("box","invoked");
x.t("box","above");
x.t("operation","dsp48");
x.t("operation","opmodes");
x.t("outside","xtremedsp");
x.t("synthesizable","model");
x.t("symbols","refer");
x.t("p=-p-cin","----");
x.t("p=p-c-p-cin","----");
x.t("p=p-c-p-cin","adder");
x.t("cycle-true","islands");
x.t("identifiers","descriptions");
x.t("identifiers","listed");
x.t("identifiers","manifest");
x.t("identifiers","operands");
x.t("identifiers","list");
x.t("identifiers","identifiers");
x.t("identifiers","operand");
x.t("identifiers","match");
x.t("identifiers","include");
x.t("identifiers","examples");
x.t("identifiers","port");
x.t("identifiers","two");
x.t("identifiers","inputs");
x.t("underneath","dsp48");
x.t("underneath","mask");
x.t("enables","dsp48");
x.t("enables","specify");
x.t("virtex","dsp48");
x.t("virtex","virtex-5");
x.t("previously","opmode");
x.t("corresponds","position");
x.t("p=a:b","cin");
x.t("-a:b","c-cin");
x.t("dsp48","registers");
x.t("dsp48","refer");
x.t("dsp48","field");
x.t("dsp48","exceeds");
x.t("dsp48","block");
x.t("dsp48","opmodes");
x.t("dsp48","multiplier");
x.t("dsp48","legal");
x.t("dsp48","supported");
x.t("dsp48","multiplexer");
x.t("dsp48","documentation");
x.t("dsp48","macro");
x.t("dsp48","capable");
x.t("dsp48","dynamic");
x.t("dsp48","dsp48a");
x.t("dsp48","slice");
x.t("dsp48","adder");
x.t("dsp48","port");
x.t("dsp48","operate");
x.t("dsp48","block/dsp48");
x.t("dsp48","rounding");
x.t("technology-specific","dsp");
x.t("opmodes","instructions");
x.t("opmodes","topic");
x.t("opmodes","implemented");
x.t("opmodes","listed");
x.t("opmodes","opmode");
x.t("opmodes","entered");
x.t("opmodes","dsp48");
x.t("opmodes","0x60-0x6f");
x.t("opmodes","supported");
x.t("opmodes","0x50-0x5f");
x.t("opmodes","multiplexers");
x.t("opmodes","0x10-0x1f");
x.t("opmodes","except");
x.t("opmodes","used");
x.t("opmodes","following");
x.t("opmodes","a:b");
x.t("opmodes","inputs");
x.t("entered","instructions");
x.t("entered","dsp48");
x.t("custom","external");
x.t("custom","provides");
x.t("custom","selected");
x.t("custom","option");
x.t("custom","pipeline");
x.t("custom","pipleline");
x.t("muxctrl","field");
x.t("0x60-0x6f","right");
x.t("provides","device");
x.t("provides","individual");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("replaced","bcin");
x.t("p=-c-cin","----");
x.t("none","instructions");
x.t("makes","design");
x.t("makes","pipeline");
x.t("operand","format");
x.t("operand","symbolic");
x.t("eases","dsp");
x.t("allows","high");
x.t("selection","provided");
x.t("selection","depends");
x.t("selection","dsp48");
x.t("selection","stated");
x.t("target","technology");
x.t("pcout","various");
x.t("pcout","dsp48");
x.t("pcout","ports");
x.t("pcout","bcout");
x.t("pcout","output");
x.t("pcout","port");
x.t("multiplier","mode");
x.t("multiplier","p=pcin");
x.t("multiplier","dsp48");
x.t("multiplier","configured");
x.t("multiplier","p=c");
x.t("multiplier","latency");
x.t("multiplier","p=p");
x.t("multiplier","interprets");
x.t("array","integers");
x.t("third","instruction");
x.t("fields","multiple");
x.t("fields","respectively");
x.t("device","independent");
x.t("input","refer");
x.t("input","opmode");
x.t("input","dsp48");
x.t("input","first");
x.t("input","appears");
x.t("input","connected");
x.t("input","data");
x.t("input","port");
x.t("ports","determined");
x.t("ports","dsp48");
x.t("ports","pcout");
x.t("ports","different");
x.t("ports","ordering");
x.t("ports","routed");
x.t("ports","implementation");
x.t("ports","two");
x.t("ports","tab");
x.t("virtex-5","specified");
x.t("virtex-5","spartan");
x.t("contain","least");
x.t("three","legal");
x.t("three","pipeline");
x.t("three","inputs");
x.t("second","instruction");
x.t("second","position");
x.t("characters","underscore");
x.t("mask","supplying");
x.t("mask","signal");
x.t("mask","include");
x.t("dsp48/dsp48e/dsp48a","block");
x.t("selected","sel");
x.t("selected","register");
x.t("selected","mode");
x.t("selected","custom");
x.t("selected","dsp48");
x.t("selected","multiplexer");
x.t("selected","rst_all");
x.t("selected","bcout");
x.t("selected","ce_all");
x.t("selected","acout");
x.t("signals","suffer");
x.t("signals","data");
x.t("signals","using");
x.t("signals","without");
x.t("adhere","rules");
x.t("begin","alphabet");
x.t("begin","expression");
x.t("legal","list");
x.t("legal","opmodes");
x.t("legal","option");
x.t("legal","symbolic");
x.t("present","refer");
x.t("instanced","underneath");
x.t("concatenated","signed");
x.t("independent","abstraction");
x.t("blocks","dsp48");
x.t("blocks","data");
x.t("registered","allows");
x.t("registered","latency");
x.t("configured","custom");
x.t("supported","modes");
x.t("supported","currently");
x.t("supported","dsp48");
x.t("supported","dsp48a");
x.t("supported","dsp48e");
x.t("error","following");
x.t("collectively","referred");
x.t("carrycascout","pcout");
x.t("carrycascout","appear");
x.t("multiplexer","registers");
x.t("multiplexer","cin");
x.t("multiplexer","outputs");
x.t("multiplexer","opmode");
x.t("involved","entering");
x.t("operators","symbolic");
x.t("delay$","12signal");
x.t("respectively","symbols");
x.t("p=cin","cin");
x.t("give","valuable");
x.t("appears","opmode");
x.t("appears","opmodes");
x.t("appears","pcout");
x.t("appears","bcout");
x.t("appears","depending");
x.t("appears","global");
x.t("appears","acout");
x.t("options","available");
x.t("options","instructions");
x.t("options","field");
x.t("options","xtremedsp");
x.t("options","editing");
x.t("options","group");
x.t("options","custom");
x.t("options","array");
x.t("options","include");
x.t("options","ctrl");
x.t("options","data");
x.t("unit","orders");
x.t("unit","dsp48");
x.t("issues","arise");
x.t("issues","involved");
x.t("first","instruction");
x.t("first","position");
x.t("space","figure");
x.t("inport","pcin");
x.t("bcin","mode");
x.t("bcin","dsp48");
x.t("bcin","input");
x.t("bcin","words");
x.t("bcin","connected");
x.t("select","opmode");
x.t("number","registers");
x.t("number","design");
x.t("number","alphanumeric");
x.t("number","appear");
x.t("number","inputs");
x.t("control","signals");
x.t("control","instancing");
x.t("control","data");
x.t("12signal","port");
x.t("b-cin","multiplier");
x.t("17-a:b-cin","adder");
x.t("design","portable");
x.t("design","compiled");
x.t("maximum","eight");
x.t("underscore","symbolic");
x.t("signal","opmode");
x.t("signal","connected");
x.t("17cin","----");
x.t("specifies","instructions");
x.t("specifies","pipelining");
x.t("specifies","symbolic");
x.t("different","opmodes");
x.t("different","number");
x.t("different","different");
x.t("different","arithmetic");
x.t("words","depicted");
x.t("suffer","issue");
x.t("index","dsp");
x.t("instead","using");
x.t("p=c","cin");
x.t("compile","time");
x.t("user-selections","block");
x.t("-3a","dsp");
x.t("format","operands");
x.t("format","operand");
x.t("format","newline");
x.t("alphanumeric","characters");
x.t("match","port");
x.t("_port1","delay$");
x.t("17-c-a:b-cin","adder");
x.t("types","exceed");
x.t("types","input");
x.t("capability","enables");
x.t("ordering","operands");
x.t("added","figure");
x.t("p=p-a:b-cin","p=p");
x.t("p=c-a","b-cin");
x.t("important","three");
x.t("connected","sel");
x.t("connected","dsp48");
x.t("connected","pcout");
x.t("connected","bcout");
x.t("connected","multiplexers");
x.t("connected","port");
x.t("connected","rst");
x.t("enable","ports");
x.t("enable","port");
x.t("identifier","table");
x.t("identifier","begin");
x.t("identifier","port");
x.t("identifier","pcin");
x.t("identifier","used");
x.t("follow","rules");
x.t("feed","directly");
x.t("p=c-c-p-cin","----");
x.t("appear","depending");
x.t("appear","output");
x.t("option","custom");
x.t("option","dsp48");
x.t("option","selected");
x.t("option","aligns");
x.t("option","gives");
x.t("performing","different");
x.t("least","opmode");
x.t("memory","type");
x.t("0x50-0x5f","port");
x.t("rst_all","input");
x.t("issue","makes");
x.t("variable","number");
x.t("greater","detail");
x.t("unchecked","synthesizable");
x.t("instruction","implemented");
x.t("instruction","opmode");
x.t("instruction","specified");
x.t("illegal","symbolic");
x.t("documentation","dsp48");
x.t("ensure","high-speed");
x.t("insight","using");
x.t("rules","listed");
x.t("made","/-/");
x.t("consider","simple");
x.t("routed","inputs");
x.t("p=pcin-p-cin","----");
x.t("17-cin","----");
x.t("extremely","important");
x.t("technology","specified");
x.t("technology","virtex");
x.t("technology","unchecked");
x.t("simulink","model");
x.t("latency","else");
x.t("latency","external");
x.t("latency","dsp48");
x.t("latency","data");
x.t("include","cin");
x.t("include","external");
x.t("instances","inside");
x.t("disjoint","signed");
x.t("----","p=c-p-cin");
x.t("----","cin");
x.t("----","p=pcin");
x.t("----","p=a:b");
x.t("----","p=c");
x.t("----","p=p-a:b-cin");
x.t("----","p=p");
x.t("----","p=c-a:b-cin");
x.t("----","a:b");
x.t("17-p-cin","----");
x.t("bcout","dsp48");
x.t("bcout","ports");
x.t("bcout","output");
x.t("bcout","port");
x.t("bcout","acout");
x.t("configures","xtremedsp");
x.t("value","sel");
x.t("value","feed");
x.t("alphabet","a-z");
x.t("delayed_signal","examples");
x.t("usage","word");
x.t("additional","registers");
x.t("macro","refer");
x.t("macro","instructions");
x.t("macro","dialog");
x.t("macro","provided");
x.t("macro","mode");
x.t("macro","external");
x.t("macro","xilinx");
x.t("macro","require");
x.t("macro","limitations");
x.t("macro","block");
x.t("macro","simplifies");
x.t("macro","opmode");
x.t("macro","dsp48");
x.t("macro","opmodes");
x.t("macro","custom");
x.t("macro","none");
x.t("macro","eases");
x.t("macro","input");
x.t("macro","three");
x.t("macro","registered");
x.t("macro","configures");
x.t("macro","output");
x.t("macro","becomes");
x.t("macro","pseudo");
x.t("macro","operated");
x.t("macro","contains");
x.t("depending","opmode");
x.t("depending","target");
x.t("depending","input");
x.t("depending","user-selections");
x.t("multiplexers","appropriately");
x.t("multiplexers","handle");
x.t("multiplexers","instanced");
x.t("multiplexers","ensure");
x.t("specific","basic");
x.t("pipeline","legal");
x.t("pipeline","options");
x.t("pipeline","model");
x.t("pipleline","option");
x.t("instancing","xtremedsp");
x.t("instancing","register");
x.t("implementation","operand");
x.t("implementation","tab");
x.t("aligns","signals");
x.t("aligns","control");
x.t("figure","below");
x.t("figure","instructions");
x.t("figure","above");
x.t("signed","36-bit");
x.t("signed","complement");
x.t("gives","control");
x.t("islands","distinct");
x.t("generator","xtremedsp");
x.t("generator","dsp48");
x.t("pipelining","options");
x.t("pipelining","tab");
x.t("inferred","custom");
x.t("inferred","operations");
x.t("p=pcin-p-c-cin","----");
x.t("17-c-cin","----");
x.t("capable","performing");
x.t("expression","following");
x.t("netlisted","virtex-5");
x.t("netlisted","spartan");
x.t("word","identifiers");
x.t("along","reinterpret");
x.t("output","example");
x.t("output","always");
x.t("output","specified");
x.t("output","ports");
x.t("output","connected");
x.t("output","multiplexers");
x.t("output","data");
x.t("ctrl","muxa");
x.t("dynamic","operator");
x.t("separate","two");
x.t("diagram","three");
x.t("0x10-0x1f","pcin");
x.t("stated","previously");
x.t("p=p","cin");
x.t("p=p","17-p-c-cin");
x.t("p=p","17-a");
x.t("p=p","17-a:b-cin");
x.t("p=p","17-c-a:b-cin");
x.t("p=p","17-cin");
x.t("p=p","17-p-cin");
x.t("p=p","17-c-cin");
x.t("p=p","a:b");
x.t("data","type");
x.t("data","presented");
x.t("data","ports");
x.t("data","signals");
x.t("data","types");
x.t("data","depending");
x.t("data","port");
x.t("data","paths");
x.t("becomes","active");
x.t("becomes","two");
x.t("optional","opmodes");
x.t("depicted","following");
x.t("high-speed","operation");
x.t("appearing","instructions");
x.t("appearing","configurations");
x.t("defined","instruction");
x.t("examples","legal");
x.t("examples","illegal");
x.t("carry_in","dsp48");
x.t("appropriate","data");
x.t("result","error");
x.t("clocks","xilinx");
x.t("dsp48a","p=cin");
x.t("dsp48a","slice");
x.t("dsp48a","dsp48e");
x.t("slice","available");
x.t("slice","helps");
x.t("slice","reset");
x.t("slice","block");
x.t("slice","virtex");
x.t("slice","multiplexer");
x.t("slice","latency");
x.t("slice","inferred");
x.t("slice","netlisted");
x.t("slice","adder");
x.t("slice","used");
x.t("slice","inputs");
x.t("values","input");
x.t("adder","p=p-cin");
x.t("adder","p=c-cin");
x.t("adder","cin");
x.t("adder","mode");
x.t("adder","entering");
x.t("adder","p=pcin");
x.t("adder","dsp48");
x.t("adder","multiplier");
x.t("adder","concatenated");
x.t("adder","p=c-a");
x.t("adder","inferred");
x.t("adder","p=p");
x.t("adder","pcin");
x.t("adder","a:b");
x.t("case","number");
x.t("case","symbolic");
x.t("a-z","followed");
x.t("a-z","a-z");
x.t("interprets","ports");
x.t("pseudo","opmode");
x.t("portable","xilinx");
x.t("port","sel");
x.t("port","instructions");
x.t("port","field");
x.t("port","xtremedsp");
x.t("port","type");
x.t("port","automatically");
x.t("port","identifiers/operands");
x.t("port","identifiers");
x.t("port","dsp48");
x.t("port","fields");
x.t("port","pcout");
x.t("port","appears");
x.t("port","bcin");
x.t("port","capability");
x.t("port","identifier");
x.t("port","connected");
x.t("port","bcout");
x.t("port","output");
x.t("port","appearing");
x.t("port","carry_in");
x.t("port","appropriate");
x.t("port","port");
x.t("port","pcin");
x.t("port","acout");
x.t("port","a:b");
x.t("port","inputs");
x.t("character","used");
x.t("above","example");
x.t("above","details");
x.t("above","diagram");
x.t("above","symbolic");
x.t("rst","dsp48");
x.t("global","reset");
x.t("global","enable");
x.t("note","remainder");
x.t("two","modes");
x.t("two","categories");
x.t("two","custom");
x.t("two","different");
x.t("two","disjoint");
x.t("newline","character");
x.t("pcin","right");
x.t("pcin","cin");
x.t("pcin","dsp48");
x.t("pcin","input");
x.t("pcin","inport");
x.t("pcin","bcin");
x.t("pcin","port");
x.t("topics","give");
x.t("dsp48e","supported");
x.t("dsp48e","slice");
x.t("dsp48e","using");
x.t("controls","active");
x.t("controls","expose");
x.t("controls","becomes");
x.t("operate","dynamic");
x.t("order","opmodes");
x.t("entirely","made");
x.t("ce_all","input");
x.t("complement","18-bit");
x.t("valuable","insight");
x.t("following","table");
x.t("following","xilinx");
x.t("following","assignment");
x.t("following","figure");
x.t("following","topics");
x.t("system","generator");
x.t("model","shown");
x.t("model","xtremedsp");
x.t("model","basic");
x.t("model","extremely");
x.t("individual","registers");
x.t("individual","control");
x.t("used","refer");
x.t("used","opmode");
x.t("used","opmodes");
x.t("used","select");
x.t("used","implementation");
x.t("used","separate");
x.t("used","used");
x.t("used","devices");
x.t("separated","using");
x.t("block/dsp48","macro");
x.t("except","0x00");
x.t("p=p-p-cin","----");
x.t("p=c-a:b-cin","adder");
x.t("using","registers");
x.t("using","block");
x.t("using","identifiers");
x.t("using","technology-specific");
x.t("using","dsp48");
x.t("using","multiplier");
x.t("using","space");
x.t("using","additional");
x.t("using","pcin");
x.t("using","understanding");
x.t("symbolic","identifiers");
x.t("symbolic","port");
x.t("arithmetic","operations");
x.t("rounding","features");
x.t("understanding","dsp48");
x.t("blockset","libraries");
x.t("blockset","dsp48");
x.t("remainder","text");
x.t("tab","consists");
x.t("tab","dsp48");
x.t("tab","parameters");
x.t("tab","ports");
x.t("tab","selected");
x.t("tab","pipeline");
x.t("tab","inputs");
x.t("mreg","selected");
x.t("fabric","support");
x.t("acout","carryout");
x.t("acout","dsp48");
x.t("acout","ports");
x.t("acout","output");
x.t("operations","entered");
x.t("operations","input");
x.t("operator","unit");
x.t("operator","entirely");
x.t("operated","two");
x.t("p=-cin","----");
x.t("p=p-c-cin","----");
x.t("paths","ports");
x.t("without","limitations");
x.t("without","using");
x.t("a:b","cin");
x.t("a:b","refers");
x.t("a:b","xtremedsp");
x.t("a:b","replaced");
x.t("a:b","inputs");
x.t("spartan","-3a");
x.t("compiled","target");
x.t("achieved","sel");
x.t("position","opmode");
x.t("position","second");
x.t("position","using");
x.t("position","position");
x.t("p=pcin-a","b-cin");
x.t("restrictions","single");
x.t("strictly","adhere");
x.t("signal_1","delayed_signal");
x.t("alignment","multiplexers");
x.t("alignment","inputs");
x.t("inputs","registers");
x.t("inputs","outputs");
x.t("inputs","dsp48");
x.t("inputs","custom");
x.t("inputs","input");
x.t("inputs","defined");
x.t("inputs","adder");
x.t("inputs","port");
x.t("detail","topic");
x.t("muxa","muxb");
x.t("specify","custom");
x.t("devices","entering");
x.t("contains","instructions");
x.t("contains","cin");
x.t("p=pcin-c","cin");
}
