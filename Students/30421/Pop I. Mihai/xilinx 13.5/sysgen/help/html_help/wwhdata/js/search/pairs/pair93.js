function FileData_Pairs(x)
{
x.t("example","rate");
x.t("example","page_1");
x.t("equal","puncture");
x.t("clock","edge");
x.t("sclr","sclr");
x.t("sclr","asserted");
x.t("below","length");
x.t("punctures","punctured");
x.t("parameter","dialog");
x.t("digital","communication");
x.t("pattern","codes");
x.t("rffd","rffd");
x.t("rffd","ready");
x.t("version","data");
x.t("shown","figure");
x.t("rfd","rfd");
x.t("rfd","ready");
x.t("binary","convolution");
x.t("performs","forward");
x.t("1/2","rate");
x.t("1/2","encoder");
x.t("derived","array");
x.t("current","state");
x.t("topic","common");
x.t("outputs","three");
x.t("outputs","two");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("shows","block");
x.t("dual-channel","punctured");
x.t("rising","clock");
x.t("uses","following");
x.t("register","specified");
x.t("register","zero");
x.t("register","encoder");
x.t("register","computes");
x.t("modified","value");
x.t("state","parameters");
x.t("basic","tab");
x.t("pins","new");
x.t("sample","new");
x.t("(fec)","digital");
x.t("modulo-two","sum");
x.t("modulo-two","sums");
x.t("contribute","modulo-two");
x.t("1/7","encoder");
x.t("xilinx","logicore");
x.t("xilinx","convolution");
x.t("xilinx","blockset");
x.t("rate","1/2");
x.t("rate","derived");
x.t("rate","modified");
x.t("rate","1/7");
x.t("rate","total");
x.t("rate","(m)");
x.t("rate","encoder");
x.t("rate","output");
x.t("rate","punctured");
x.t("rate","n/m");
x.t("rate","ratio");
x.t("total","number");
x.t("data_in","sampled");
x.t("listed","following");
x.t("constraint","register");
x.t("constraint","length");
x.t("resetting","block");
x.t("new","data");
x.t("new","puncture");
x.t("new","symbol");
x.t("start","new");
x.t("block","parameter");
x.t("block","performs");
x.t("block","uses");
x.t("block","xilinx");
x.t("block","listed");
x.t("block","parameters");
x.t("block","explained");
x.t("block","implements");
x.t("block","punctured");
x.t("block","puncture");
x.t("block","shift");
x.t("block","remains");
x.t("rdy","rdy");
x.t("rdy","(ready)");
x.t("determines","whether");
x.t("indicates","core");
x.t("indicates","valid");
x.t("indicates","output");
x.t("indicates","fd_in");
x.t("sum","resetting");
x.t("group","rffd");
x.t("bits","encoded");
x.t("bits","input");
x.t("bits","data");
x.t("bits","two");
x.t("remove","bits");
x.t("(m)","codes");
x.t("data_out_v","sclr");
x.t("initialized","deasserted");
x.t("code0","code1");
x.t("dsp","-1l");
x.t("specified","constraint");
x.t("code1","two");
x.t("high","indicates");
x.t("synchronously","initialized");
x.t("libraries","communication");
x.t("tandem","viterbi");
x.t("forward","error");
x.t("forward","shift");
x.t("box","page_0");
x.t("box","following");
x.t("range","resulting");
x.t("resulting","rate");
x.t("(high)","core");
x.t("common","options");
x.t("communication","index");
x.t("communication","systems");
x.t("codes","equal");
x.t("codes","may");
x.t("codes","valid");
x.t("codes","output");
x.t("codes","ordinarily");
x.t("codes","used");
x.t("codes","specify");
x.t("sampled","rising");
x.t("sampled","logic-high");
x.t("virtex","device");
x.t("entered","optional");
x.t("(low)","synchronous");
x.t("synchronous","inputs");
x.t("3,3e","dsp");
x.t("window","contribute");
x.t("window","input");
x.t("zero","encoder");
x.t("parameters","dialog");
x.t("parameters","specific");
x.t("parameters","used");
x.t("prior","output");
x.t("indicate","start");
x.t("boxes","xilinx");
x.t("encoded","data");
x.t("encoded","using");
x.t("explained","topic");
x.t("array","binary");
x.t("array","length");
x.t("input","rate");
x.t("input","sampled");
x.t("input","present");
x.t("input","output");
x.t("input","data");
x.t("input","bit");
x.t("three","bits");
x.t("logicore","version");
x.t("logicore","block");
x.t("logicore","logicore");
x.t("logicore","data");
x.t("logicore","system");
x.t("flip-flops","synchronously");
x.t("device","virtex");
x.t("device","3,3e");
x.t("device","kintex");
x.t("viterbi","decoder");
x.t("signals","new");
x.t("present","punctured");
x.t("error","correction");
x.t("blocks","used");
x.t("respectively","punctures");
x.t("din","fd_in");
x.t("first","data");
x.t("options","block");
x.t("number","bits");
x.t("implements","encoder");
x.t("decoder","block");
x.t("sliding","window");
x.t("length","constraint");
x.t("length","convolution");
x.t("length","thus");
x.t("length","equals");
x.t("length","puncture");
x.t("length","shift");
x.t("length","(inclusive)");
x.t("whether","block");
x.t("specifies","dual-channel");
x.t("may","entered");
x.t("index","xilinx");
x.t("correction","(fec)");
x.t("ignored","block");
x.t("-1l","-1l");
x.t("-1l","convolution");
x.t("code","equal");
x.t("code","array");
x.t("logic-high","signals");
x.t("convolution","constraint");
x.t("convolution","codes");
x.t("convolution","code");
x.t("convolution","encoder");
x.t("encoder","outputs");
x.t("encoder","rate");
x.t("encoder","block");
x.t("encoder","v7.0");
x.t("encoder","input");
x.t("encoder","respectively");
x.t("encoder","convolution");
x.t("encoder","transmitted");
x.t("encoder","7.0");
x.t("feed","forward");
x.t("sums","sliding");
x.t("thus","example");
x.t("ready","sample");
x.t("ready","first");
x.t("ready","data");
x.t("value","range");
x.t("value","integer");
x.t("core","flip-flops");
x.t("core","ready");
x.t("figure","below");
x.t("figure","shows");
x.t("specific","basic");
x.t("rates","input");
x.t("transmitted","associated");
x.t("generator","block");
x.t("systems","values");
x.t("computes","modulo-two");
x.t("valid","data");
x.t("valid","position");
x.t("deasserted","(low)");
x.t("output","rate");
x.t("output","indicates");
x.t("output","length");
x.t("output","specifies");
x.t("output","bit");
x.t("data","shown");
x.t("data","indicates");
x.t("data","data_out_v");
x.t("data","high");
x.t("data","window");
x.t("data","prior");
x.t("data","input");
x.t("data","din");
x.t("data","rates");
x.t("data","sheet");
x.t("punctured","block");
x.t("punctured","determines");
x.t("punctured","input");
x.t("punctured","blocks");
x.t("punctured","output");
x.t("punctured","dual");
x.t("dual","output");
x.t("optional","pins");
x.t("bit","block");
x.t("bit","length");
x.t("bit","encoder");
x.t("bit","similarly");
x.t("equals","length");
x.t("values","resulting");
x.t("values","encoded");
x.t("page_0","tab");
x.t("7.0","xilinx");
x.t("7.0","block");
x.t("7.0","convolution");
x.t("sheet","example");
x.t("sheet","spartan");
x.t("page_1","tab");
x.t("two","bits");
x.t("two","codes");
x.t("two","puncture");
x.t("n/m","encoder");
x.t("integer","values");
x.t("puncture","pattern");
x.t("puncture","group");
x.t("puncture","code0");
x.t("puncture","input");
x.t("puncture","code");
x.t("puncture","output");
x.t("asserted","rdy");
x.t("asserted","(high)");
x.t("following","xilinx");
x.t("following","figure");
x.t("ordinarily","used");
x.t("used","block");
x.t("used","remove");
x.t("used","tandem");
x.t("used","indicate");
x.t("system","generator");
x.t("using","linear");
x.t("similarly","rate");
x.t("symbol","data_in");
x.t("blockset","libraries");
x.t("blockset","convolution");
x.t("tab","parameters");
x.t("tab","convolution");
x.t("tab","data");
x.t("kintex","device");
x.t("associated","logicore");
x.t("fd_in","first");
x.t("fd_in","asserted");
x.t("fd_in","fd_in");
x.t("position","indicates");
x.t("edge","rfd");
x.t("spartan","device");
x.t("shift","register");
x.t("(ready)","output");
x.t("linear","feed");
x.t("specify","bits");
x.t("ratio","input");
x.t("(inclusive)","codes");
x.t("inputs","ignored");
x.t("remains","current");
}
