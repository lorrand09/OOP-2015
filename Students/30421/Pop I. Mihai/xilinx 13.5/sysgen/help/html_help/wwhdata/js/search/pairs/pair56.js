function FileData_Pairs(x)
{
x.t("example","simulating");
x.t("example","importing");
x.t("example","dynamic");
x.t("example","using");
x.t("provide","vhdl");
x.t("hardware","system");
x.t("simultaneously","demonstrates");
x.t("simultaneously","using");
x.t("files","surrounding");
x.t("needs","vhdl");
x.t("table","9\u20111");
x.t("describes","create");
x.t("describes","access");
x.t("describes","assign");
x.t("describes","approach");
x.t("describes","design");
x.t("describes","import");
x.t("describes","black");
x.t("describes","co-simulate");
x.t("create","black");
x.t("co-simulation","configuring");
x.t("co-simulation","covered");
x.t("onto","black");
x.t("wizard","describes");
x.t("wizard","black");
x.t("ise","software");
x.t("wrapper","satisfy");
x.t("wrapper","simulation");
x.t("doing","black");
x.t("addressed","black");
x.t("user","parameters");
x.t("hdl","co-simulation");
x.t("hdl","simulator");
x.t("hdl","requirements");
x.t("hdl","modules");
x.t("hdl","black");
x.t("edif","brought");
x.t("edif","associated");
x.t("uses","system");
x.t("later","reuse");
x.t("scripts","modelsim");
x.t("interface","black");
x.t("interface","configure");
x.t("modelsim","describes");
x.t("modelsim","hdl");
x.t("modelsim","license");
x.t("modelsim","black");
x.t("modelsim","co-simulate");
x.t("wired","design");
x.t("satisfy","black");
x.t("compiles","black");
x.t("explains","configure");
x.t("multiple","black");
x.t("automatically","wires");
x.t("simulating","exporting");
x.t("simulating","several");
x.t("back","separate");
x.t("default","local");
x.t("details","requirements");
x.t("single","hdl");
x.t("advanced","black");
x.t("access","generics/parameters");
x.t("block","automatically");
x.t("block","co-simulating");
x.t("block","allows");
x.t("block","import");
x.t("block","dynamic");
x.t("block","behaves");
x.t("block","simulate");
x.t("satisfies","black");
x.t("license","doing");
x.t("surrounding","netlist");
x.t("m-function","describes");
x.t("simulator","explains");
x.t("simulator","session");
x.t("file","describes");
x.t("file","rest");
x.t("file","black");
x.t("counter","pass");
x.t("add","existing");
x.t("assign","generic");
x.t("filter","black");
x.t("configuring","hdl");
x.t("imported","module");
x.t("requirements","describes");
x.t("requirements","restrictions");
x.t("requires","provide");
x.t("box","example");
x.t("box","describes");
x.t("box","hdl");
x.t("box","interface");
x.t("box","block");
x.t("box","blocks");
x.t("box","tutorial");
x.t("box","override");
x.t("box","configuration");
x.t("box","using");
x.t("box","dynamically");
x.t("demonstrates","verilog");
x.t("demonstrates","several");
x.t("demonstrates","dynamic");
x.t("fir","filter");
x.t("libraries","later");
x.t("brought","design");
x.t("custom","scripts");
x.t("co-simulating","multiple");
x.t("session","black");
x.t("parameters","describes");
x.t("parameters","vhdl");
x.t("parameters","simulink");
x.t("boxes","simultaneously");
x.t("boxes","describes");
x.t("boxes","demonstrates");
x.t("boxes","black");
x.t("boxes","used");
x.t("boxes","using");
x.t("generic","values");
x.t("allows","vhdl");
x.t("wires","imported");
x.t("adjusts","changes");
x.t("encrypted","file");
x.t("encrypted","vhdl");
x.t("rest","netlist");
x.t("local","parameters");
x.t("mask","parameters");
x.t("input","port");
x.t("sometimes","important");
x.t("blocks","wired");
x.t("blocks","single");
x.t("blocks","simulink");
x.t("blocks","co-simulated");
x.t("generics/parameters","masked");
x.t("tutorial","example");
x.t("tutorial","exercise");
x.t("issues","addressed");
x.t("importing","hdl");
x.t("importing","simulating");
x.t("importing","verilog");
x.t("importing","vhdl");
x.t("importing","core");
x.t("design","modelsim");
x.t("design","encrypted");
x.t("design","black");
x.t("design","participates");
x.t("design","export");
x.t("design","system");
x.t("function","hdl");
x.t("approach","uses");
x.t("approach","requires");
x.t("software","modelsim");
x.t("verilog","edif");
x.t("verilog","black");
x.t("verilog","module");
x.t("changes","widths");
x.t("types","save");
x.t("important","add");
x.t("vhdl","wrapper");
x.t("vhdl","back");
x.t("vhdl","file");
x.t("vhdl","verilog");
x.t("vhdl","core");
x.t("vhdl","module");
x.t("vhdl","system");
x.t("override","default");
x.t("existing","hdl");
x.t("netlist","table");
x.t("netlist","black");
x.t("configuration","wizard");
x.t("configuration","m-function");
x.t("configuration","function");
x.t("simulink","libraries");
x.t("simulink","model");
x.t("exporting","encrypted");
x.t("modules","sometimes");
x.t("modules","importing");
x.t("modules","system");
x.t("core","wrapper");
x.t("core","generator");
x.t("several","black");
x.t("several","system");
x.t("generator","compiles");
x.t("generator","blocks");
x.t("generator","design");
x.t("generator","black");
x.t("generator","module");
x.t("generator","co-simulated");
x.t("import","design");
x.t("import","vhdl");
x.t("simulations","compiled");
x.t("exercise","advanced");
x.t("exercise","prompting");
x.t("black","box");
x.t("black","boxes");
x.t("participates","simulations");
x.t("dynamic","black");
x.t("dynamic","port");
x.t("separate","encrypted");
x.t("behaves","system");
x.t("module","needs");
x.t("module","describes");
x.t("module","satisfies");
x.t("module","demonstrates");
x.t("module","associated");
x.t("configure","ise");
x.t("configure","black");
x.t("data","types");
x.t("save","black");
x.t("values","based");
x.t("reuse","specify");
x.t("prompting","user");
x.t("port","interface");
x.t("port","data");
x.t("export","vhdl");
x.t("9\u20111","black");
x.t("based","input");
x.t("system","generator");
x.t("simulation","issues");
x.t("used","system");
x.t("model","passing");
x.t("masked","counter");
x.t("using","modelsim");
x.t("using","mask");
x.t("using","transpose");
x.t("transpose","fir");
x.t("pass","onto");
x.t("associated","files");
x.t("associated","black");
x.t("covered","black");
x.t("simulate","design");
x.t("compiled","hardware");
x.t("restrictions","details");
x.t("restrictions","vhdl");
x.t("passing","black");
x.t("co-simulate","hdl");
x.t("co-simulate","several");
x.t("co-simulate","black");
x.t("co-simulated","simultaneously");
x.t("co-simulated","using");
x.t("dynamically","adjusts");
x.t("widths","inputs");
x.t("inputs","black");
x.t("specify","custom");
}
