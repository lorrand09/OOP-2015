function FileData_Pairs(x)
{
x.t("example","xblock");
x.t("example","call");
x.t("example","following");
x.t("equal","input");
x.t("gcb","get_param");
x.t("exist","source");
x.t("xoutport","objects");
x.t("xoutport","new");
x.t("xoutport","c.bind");
x.t("xoutport","xsignal");
x.t("xoutport","error");
x.t("xoutport","object");
x.t("nosubsourceblock","source");
x.t("nosubsourceblock","cannot");
x.t("create","xoutport");
x.t("create","xinport");
x.t("source","block");
x.t("source","xsignal");
x.t("source","configuration");
x.t("try","create");
x.t("try","bind");
x.t("try","two");
x.t("later","source");
x.t("line","connection");
x.t("get_param","set_param");
x.t("please","remove");
x.t("please","sure");
x.t("please","modify");
x.t("time","error");
x.t("calls","gcb");
x.t("calls","mask");
x.t("calls","cause");
x.t("calls","run");
x.t("parameterbinding","parameters");
x.t("i.e","try");
x.t("connection","xsignal");
x.t("access","api");
x.t("objects","xoutport");
x.t("objects","xinport");
x.t("objects","xsignal");
x.t("thrown","example");
x.t("thrown","top");
x.t("thrown","cell");
x.t("thrown","note");
x.t("new","block");
x.t("block","exist");
x.t("block","nosubsourceblock");
x.t("block","please");
x.t("block","named");
x.t("block","subsystem");
x.t("top","level");
x.t("sig","xsignal");
x.t("found","calling");
x.t("list","first");
x.t("list","already");
x.t("list","output");
x.t("list","contains");
x.t("invoked","without");
x.t("initialization","code");
x.t("again","pick");
x.t("api","error/warning");
x.t("c.bind","(a)");
x.t("c.bind","(b)");
x.t("remove","calls");
x.t("remove","run");
x.t("sure","model");
x.t("set_param","add_block");
x.t("name","second");
x.t("char","array");
x.t("(a)","c.bind");
x.t("(a)","sig.bind");
x.t("argument","argument");
x.t("argument","expected");
x.t("argument","xblock");
x.t("argument","subsystem");
x.t("argument","valid");
x.t("argument","model");
x.t("parameters","illegal");
x.t("xinport","xoutport");
x.t("xinport","objects");
x.t("xinport","new");
x.t("xinport","sig");
x.t("xinport","xsignal");
x.t("xinport","error");
x.t("xinport","object");
x.t("exists","xinport");
x.t("exists","xsub2script");
x.t("xsignal","xoutport");
x.t("xsignal","xinport");
x.t("xsignal","error");
x.t("xsignal","appear");
x.t("xsignal","sig.bind");
x.t("xsignal","object");
x.t("destination","port");
x.t("array","expected");
x.t("array","otherwise");
x.t("array","object");
x.t("fix","later");
x.t("string","model");
x.t("input","port");
x.t("cell","array");
x.t("second","time");
x.t("second","argument");
x.t("mask","initialization");
x.t("error","example");
x.t("error","thrown");
x.t("error","xinport");
x.t("error","messages");
x.t("error","message");
x.t("point","simulink");
x.t("something","i.e");
x.t("blocks","please");
x.t("blocks","following");
x.t("untitled/subsystem/a","cannot");
x.t("messages","api");
x.t("messages","programmatic");
x.t("messages","xblock");
x.t("messages","condition");
x.t("inport","binding");
x.t("first","argument");
x.t("cause","error");
x.t("function","calls");
x.t("function","pointer");
x.t("cannot","found");
x.t("cannot","added");
x.t("toplevel","defined");
x.t("driving","sources");
x.t("different","subsystem");
x.t("report","illegal");
x.t("twice","error");
x.t("handling","messages");
x.t("bind","xoutport");
x.t("bind","xsignal");
x.t("xlsub2script","invoked");
x.t("xlsub2script","again");
x.t("xlsub2script","first");
x.t("xlsub2script","subsystem");
x.t("programmatic","access");
x.t("calling","xblock");
x.t("expected","cell");
x.t("expected","second");
x.t("expected","xlsub2script");
x.t("added","xoutport");
x.t("added","try");
x.t("xblock","nosubsourceblock");
x.t("xblock","error");
x.t("xblock","function");
x.t("xblock","report");
x.t("xblock","expected");
x.t("xblock","addsub");
x.t("xblock","sourceblock");
x.t("xblock","call");
x.t("code","subsystem");
x.t("level","char");
x.t("message","(s)");
x.t("message","intuitive");
x.t("appear","inport");
x.t("appear","outport");
x.t("outport","binding");
x.t("illegal","xblock");
x.t("illegal","parameterization");
x.t("greater","equal");
x.t("pick","different");
x.t("latency","illegal");
x.t("latency","latency");
x.t("latency","value");
x.t("2nd","argument");
x.t("configuration","struct");
x.t("simulink","function");
x.t("simulink","subsystem");
x.t("sources","error");
x.t("value","greater");
x.t("value","value");
x.t("named","untitled/subsystem/a");
x.t("already","line");
x.t("already","exists");
x.t("already","driven");
x.t("sig.bind","(a)");
x.t("sig.bind","(b)");
x.t("condition","error");
x.t("parameterization","error");
x.t("parameterization","latency");
x.t("subsystem","block");
x.t("subsystem","char");
x.t("subsystem","simulink");
x.t("subsystem","goto");
x.t("subsystem","model");
x.t("subsystem","run");
x.t("(s)","try");
x.t("(s)","xlsub2script");
x.t("(s)","calling");
x.t("valid","string");
x.t("output","port");
x.t("sequence","calls");
x.t("addsub","struct");
x.t("defined","point");
x.t("add_block","please");
x.t("port","already");
x.t("port","binding");
x.t("goto","blocks");
x.t("otherwise","error");
x.t("two","driving");
x.t("two","sources");
x.t("note","error");
x.t("opened","argument");
x.t("opened","first");
x.t("sourceblock","parameterbinding");
x.t("call","xoutport");
x.t("call","source");
x.t("call","xinport");
x.t("driven","something");
x.t("pointer","2nd");
x.t("following","sequence");
x.t("following","goto");
x.t("xsub2script","error");
x.t("model","block");
x.t("model","remove");
x.t("model","subsystem");
x.t("model","opened");
x.t("run","xlsub2script");
x.t("error/warning","handling");
x.t("(b)","source");
x.t("(b)","destination");
x.t("without","argument");
x.t("modify","model");
x.t("struct","toplevel");
x.t("struct","latency");
x.t("intuitive","fix");
x.t("binding","list");
x.t("contains","objects");
x.t("object","name");
x.t("object","twice");
x.t("object","outport");
x.t("object","already");
x.t("object","two");
}
