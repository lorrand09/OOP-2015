function FileData_Pairs(x)
{
x.t("passed","serial");
x.t("4-bit","words");
x.t("4-bit","word");
x.t("double-clicking","icon");
x.t("attaches","input");
x.t("0001","4-bits");
x.t("parameter","dialog");
x.t("pattern","inserting");
x.t("implement","soft");
x.t("8-bit","word");
x.t("inserts","symbol");
x.t("binary","word");
x.t("continuous","soft");
x.t("8-bits","msb");
x.t("topic","common");
x.t("shows","matched");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("icon","simulink");
x.t("type","ufixk_0");
x.t("type","ufixn_0");
x.t("ufixk_0","equals");
x.t("erasure","signal");
x.t("xilinx","depuncture");
x.t("xilinx","blockset");
x.t("xilinx","depuncturer");
x.t("form","erasure");
x.t("form","soft");
x.t("form","12-bit");
x.t("listed","following");
x.t("multiplied","length");
x.t("lsb","form");
x.t("extracts","3-bits");
x.t("block","parameter");
x.t("block","implement");
x.t("block","inserts");
x.t("block","listed");
x.t("block","accepts");
x.t("block","parameters");
x.t("block","allows");
x.t("block","explained");
x.t("block","serial");
x.t("block","connected");
x.t("block","concatenates");
x.t("block","serialized");
x.t("block","depuncture");
x.t("block","used");
x.t("block","extract_erasure");
x.t("add_erasure","subsytem");
x.t("add_erasure","subsystem");
x.t("soft","decision");
x.t("soft","inputs");
x.t("subsytem","passed");
x.t("invoked","double-clicking");
x.t("parallel","block");
x.t("parallel","serial");
x.t("filter","block");
x.t("accepts","data");
x.t("specified","depuncture");
x.t("libraries","communication");
x.t("ufixn_0","equals");
x.t("range","punctured");
x.t("box","invoked");
x.t("common","options");
x.t("communication","index");
x.t("codes","previous");
x.t("codes","following");
x.t("illustrates","application");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("parameters","used");
x.t("allows","insert");
x.t("decision","input");
x.t("decision","viterbi");
x.t("matched","filter");
x.t("explained","topic");
x.t("string","multiplied");
x.t("string","input");
x.t("string","number");
x.t("input","4-bit");
x.t("input","data");
x.t("input","symbol");
x.t("ones","depuncture");
x.t("viterbi","decoding");
x.t("viterbi","decoder");
x.t("3-bits","msb");
x.t("serial","block");
x.t("serial","parallel");
x.t("options","block");
x.t("number","ones");
x.t("decoding","punctured");
x.t("length","depuncture");
x.t("length","insert");
x.t("signal","viterbi");
x.t("signal","output");
x.t("decoder","block");
x.t("12-bit","word");
x.t("words","using");
x.t("specifies","binary");
x.t("specifies","depuncture");
x.t("index","xilinx");
x.t("arbitrary","symbol");
x.t("presents","8-bit");
x.t("msb","form");
x.t("msb","code");
x.t("code","8-bits");
x.t("code","xilinx");
x.t("code","form");
x.t("code","parameters");
x.t("code","specifies");
x.t("code","produces");
x.t("connected","add_erasure");
x.t("convolution","codes");
x.t("produces","output");
x.t("previous","diagram");
x.t("non-erasure","signal");
x.t("concatenates","two");
x.t("serialized","4-bit");
x.t("simulink","model");
x.t("1-bit","lsb");
x.t("specific","xilinx");
x.t("depuncture","pattern");
x.t("depuncture","xilinx");
x.t("depuncture","block");
x.t("depuncture","code");
x.t("depuncture","depuncture");
x.t("subsystem","attaches");
x.t("subsystem","takes");
x.t("decode","range");
x.t("word","extracts");
x.t("word","1-bit");
x.t("word","depuncture");
x.t("word","output");
x.t("word","inserted");
x.t("takes","input");
x.t("location","specified");
x.t("output","add_erasure");
x.t("output","depuncture");
x.t("output","data");
x.t("diagram","shows");
x.t("diagram","illustrates");
x.t("data","type");
x.t("data","word");
x.t("data","location");
x.t("data","mark");
x.t("punctured","convolution");
x.t("inserted","depuncture");
x.t("equals","length");
x.t("4-bits","msb");
x.t("application","block");
x.t("two","continuous");
x.t("mark","non-erasure");
x.t("inserting","string");
x.t("following","xilinx");
x.t("following","diagram");
x.t("used","block");
x.t("used","decode");
x.t("model","parameters");
x.t("symbol","0001");
x.t("symbol","input");
x.t("symbol","insert");
x.t("using","parallel");
x.t("blockset","libraries");
x.t("blockset","depuncture");
x.t("insert","string");
x.t("insert","specifies");
x.t("insert","arbitrary");
x.t("extract_erasure","subsystem");
x.t("depuncturer","block");
x.t("inputs","presents");
}
