function FileData_Pairs(x)
{
x.t("registers","input");
x.t("clock","cycles");
x.t("clock","edge");
x.t("passed","via");
x.t("unlike","5.1");
x.t("unlike","convolutional");
x.t("double-clicking","icon");
x.t("equal","row");
x.t("equal","rows");
x.t("equal","column");
x.t("tells","system");
x.t("sclr","sclr");
x.t("sclr","asserted");
x.t("safely","asserted");
x.t("below","shows");
x.t("below","file");
x.t("below","setup");
x.t("below","unique");
x.t("below","arbitrary");
x.t("below","accomplish");
x.t("columns","parameter");
x.t("columns","shown");
x.t("columns","always");
x.t("columns","provided");
x.t("columns","block");
x.t("columns","sampled");
x.t("columns","chosen");
x.t("columns","selected");
x.t("columns","fixed");
x.t("columns","number");
x.t("columns","value");
x.t("columns","constant");
x.t("columns","deasserted");
x.t("columns","smallest");
x.t("possible","unpruned");
x.t("possible","block");
x.t("possible","select");
x.t("possible","minimum");
x.t("possible","number");
x.t("possible","value");
x.t("possible","values");
x.t("256","(inclusive)");
x.t("parameter","defines");
x.t("parameter","use_coe_file_to_define_branch_lengths");
x.t("parameter","keep");
x.t("parameter","dialog");
x.t("parameter","coe_file_defines_individual_branch_lengths_for_every_branch_in_each_configu");
x.t("parameter","variable");
x.t("parameter","coe_file_defines_branch_length_constant_for_each_configuration");
x.t("parameter","rectangular");
x.t("parameter","relevant");
x.t("parameter","effect");
x.t("config_sel","new_config");
x.t("available","external");
x.t("available","block");
x.t("available","variable");
x.t("available","selectable");
x.t("pulse","required");
x.t("pulse","finally");
x.t("pulse","appears");
x.t("fpga","ram");
x.t("fpga","resources");
x.t("rather","incremented");
x.t("(c-1)","(r-2)");
x.t("right","starting");
x.t("ever","possible");
x.t("defines","valid");
x.t("rffd","rffd");
x.t("rffd","ready");
x.t("version","required");
x.t("version","block");
x.t("version","input");
x.t("version","data");
x.t("drive","input");
x.t("detector","detect");
x.t("shown","below");
x.t("shown","figure");
x.t("shown","following");
x.t("clear","branches");
x.t("look-up","table");
x.t("use_coe_file_to_define_branch_lengths","location");
x.t("every","block");
x.t("every","symbol");
x.t("preferable","store");
x.t("continuously","input");
x.t("refer","interleaver/de-interleaver");
x.t("refer","associated");
x.t("table","roms");
x.t("description","optional");
x.t("description","row_valid");
x.t("rfd","rfd");
x.t("rfd","ready");
x.t("5.1","version");
x.t("5.1","block");
x.t("5.1","input");
x.t("required","drive");
x.t("required","entire");
x.t("required","input");
x.t("required","elsewhere");
x.t("required","inter-column");
x.t("required","memory");
x.t("keep","underlying");
x.t("keep","core");
x.t("always","equal");
x.t("col_sel","sampled");
x.t("instructions","apply");
x.t("row\\column","(c-2)");
x.t("apply","interleaver");
x.t("try","options");
x.t("descriptions","forney");
x.t("current","state");
x.t("topic","common");
x.t("pwd","command");
x.t("shows","operation");
x.t("line","shift");
x.t("rising","clock");
x.t("rising","edge");
x.t("last","branch");
x.t("last","row");
x.t("last","symbol");
x.t("uniform","amount");
x.t("dout","sclr");
x.t("dout","every");
x.t("dout","parameters");
x.t("dout","ports");
x.t("dout","ndo");
x.t("dout","col_sel_valid");
x.t("dout","fundamental");
x.t("dout","difference");
x.t("outputs","block");
x.t("dialog","box");
x.t("dialog","boxes");
x.t("later","block_end");
x.t("until","input");
x.t("sequences","relative");
x.t("uses","following");
x.t("errors","introduced");
x.t("errors","error");
x.t("introduced","signal");
x.t("illustrated","figure");
x.t("icon","simulink");
x.t("mode","select");
x.t("ration","location");
x.t("potentially","cope");
x.t("provided","coe");
x.t("necessary","rows");
x.t("state","rfd");
x.t("block_end","block_end");
x.t("block_end","asserted");
x.t("please","consult");
x.t("basic","parameters");
x.t("type","selected");
x.t("type","select");
x.t("type","row");
x.t("type","variable");
x.t("type","constant");
x.t("type","selectable");
x.t("type","constan");
x.t("type","port");
x.t("type","either");
x.t("best","results");
x.t("best","depends");
x.t("pins","following");
x.t("sample","new");
x.t("external","ram");
x.t("external","memory");
x.t("external","core");
x.t("operates","follows");
x.t("operates","reverse");
x.t("operates","series");
x.t("reset","pin");
x.t("pin","exposed");
x.t("pin","rst");
x.t("left","right");
x.t("left","column");
x.t("inter-row","permutations");
x.t("column-wise","top");
x.t("vector","exists");
x.t("time","pulse");
x.t("xilinx","logicore");
x.t("xilinx","interleaver");
x.t("xilinx","blockset");
x.t("connection","delay");
x.t("sid","shown");
x.t("sid","constant_difference_between_consecutive_branches");
x.t("whenever","new");
x.t("lined","signal");
x.t("listed","following");
x.t("channel","inverse");
x.t("original","data");
x.t("back","branch");
x.t("product","specification");
x.t("constant_difference_between_consecutive_branches","specified");
x.t("unpruned","interleaver");
x.t("unpruned","interleaver/deinterleavers");
x.t("automatically","whenever");
x.t("detect","low-to-high");
x.t("single","pulse");
x.t("single","bit");
x.t("start","branch");
x.t("start","new");
x.t("branch","clear");
x.t("branch","longest");
x.t("branch","lengths");
x.t("branch","interleaver");
x.t("branch","next");
x.t("branch","appears");
x.t("branch","advance");
x.t("branch","length");
x.t("branch","unique");
x.t("branch","(b-1)");
x.t("branch","process");
x.t("branch","using");
x.t("certain","order");
x.t("new","block");
x.t("new","row");
x.t("new","data");
x.t("new","symbol");
x.t("new","inputs");
x.t("low","predefined");
x.t("coef.coe","file");
x.t("block","parameter");
x.t("block","uses");
x.t("block","mode");
x.t("block","xilinx");
x.t("block","listed");
x.t("block","new");
x.t("block","block");
x.t("block","size");
x.t("block","assume");
x.t("block","operation");
x.t("block","symbols");
x.t("block","parameters");
x.t("block","explained");
x.t("block","input");
x.t("block","flip-flops");
x.t("block","6.0");
x.t("block","interleaver");
x.t("block","appears");
x.t("block","first");
x.t("block","written");
x.t("block","setup");
x.t("block","implements");
x.t("block","row");
x.t("block","memory");
x.t("block","option");
x.t("block","value");
x.t("block","similar");
x.t("block","generated");
x.t("block","although");
x.t("block","read");
x.t("block","output");
x.t("block","logic-based");
x.t("block","column");
x.t("block","behavior");
x.t("block","memories");
x.t("block","pruned");
x.t("block","de-interleaver");
x.t("block","remains");
x.t("interleaved","symbols");
x.t("top","row");
x.t("top","bottom");
x.t("configurations","specified");
x.t("configurations","number");
x.t("configurations","greater");
x.t("size","type");
x.t("size","automatically");
x.t("size","block");
x.t("size","sampled");
x.t("size","chosen");
x.t("size","fixed");
x.t("size","number");
x.t("size","row");
x.t("size","changes");
x.t("size","value");
x.t("size","already");
x.t("size","constant");
x.t("reduced.the","largest");
x.t("usually","efficient");
x.t("rdy","rdy");
x.t("rdy","asserted");
x.t("rdy","(ready)");
x.t("command","specify");
x.t("file","tells");
x.t("file","parameter");
x.t("file","pwd");
x.t("file","xilinx");
x.t("file","branch");
x.t("file","block");
x.t("file","add");
x.t("file","specified");
x.t("file","allowing");
x.t("file","syntax");
x.t("file","number");
x.t("file","row");
x.t("file","rectangular");
x.t("file","column");
x.t("file","used");
x.t("file","specify");
x.t("clarity","illustrated");
x.t("longest","deinterleaver");
x.t("invoked","double-clicking");
x.t("need","row");
x.t("need","column");
x.t("entering","value");
x.t("indicates","safely");
x.t("indicates","core");
x.t("fashion","following");
x.t("randomize","location");
x.t("row-wise","left");
x.t("add","number");
x.t("beginning","every");
x.t("deinterleaver","5.1");
x.t("deinterleaver","mode");
x.t("deinterleaver","branch");
x.t("deinterleaver","block");
x.t("deinterleaver","6.0");
x.t("deinterleaver","interleaver");
x.t("deinterleaver","symbol");
x.t("deinterleaver","v6.0");
x.t("bits","applications");
x.t("presented","input");
x.t("increase","length");
x.t("rom-based","look-up");
x.t("results","parameter");
x.t("results","block");
x.t("initialized","rffd");
x.t("simple","single-shot");
x.t("assume","previous");
x.t("referred","de-interleaver");
x.t("large","interleavers");
x.t("arms","start");
x.t("arms","branch");
x.t("arms","rotate");
x.t("depends","number");
x.t("depends","core");
x.t("remember","possible");
x.t("dsp","-1l");
x.t("ram","external");
x.t("ram","forney");
x.t("specified","branch");
x.t("specified","file");
x.t("specified","coe");
x.t("specified","length");
x.t("specified","value");
x.t("via","file");
x.t("writing","input");
x.t("high","last");
x.t("high","indicates");
x.t("high","first");
x.t("high","value");
x.t("synchronously","initialized");
x.t("libraries","communication");
x.t("symbols","continuously");
x.t("symbols","outputs");
x.t("symbols","external");
x.t("symbols","presented");
x.t("symbols","symbols");
x.t("symbols","stored");
x.t("symbols","rearranged");
x.t("symbols","entire");
x.t("symbols","internal");
x.t("symbols","grouped");
x.t("symbols","term");
x.t("symbols","previous");
x.t("symbols","rectangular");
x.t("operation","forney");
x.t("operation","rectangular");
x.t("operation","figure");
x.t("operation","entirely");
x.t("resulting","core");
x.t("box","invoked");
x.t("stored","internal");
x.t("wide","range");
x.t("range","possible");
x.t("(high)","block");
x.t("common","options");
x.t("communication","index");
x.t("follows","input");
x.t("follows","number");
x.t("follows","memory");
x.t("follows","pipelining");
x.t("follows","dimensions");
x.t("follows","optional");
x.t("follows","permutations");
x.t("exactly","match");
x.t("sampled","rising");
x.t("sampled","start");
x.t("sampled","din");
x.t("sampled","first");
x.t("sampled","col");
x.t("sampled","row");
x.t("sampled","logic-high");
x.t("sampled","pruning");
x.t("sampled","block_size");
x.t("previously","described");
x.t("performance","parameters");
x.t("virtex","device");
x.t("forney","sid");
x.t("forney","parameters");
x.t("forney","convolutional");
x.t("perform","general");
x.t("cycles","later");
x.t("cycles","din");
x.t("alue","max");
x.t("(low)","synchronous");
x.t("synchronous","inputs");
x.t("3,3e","dsp");
x.t("methods","operation");
x.t("provides","option");
x.t("parameters","try");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","configuration");
x.t("parameters","specific");
x.t("parameters","defined");
x.t("parameters","used");
x.t("parameters","tab");
x.t("none","tells");
x.t("exists","coe");
x.t("illustrates","interleaver");
x.t("convolutional","operation");
x.t("convolutional","interleaver");
x.t("convolutional","rectangular");
x.t("determine","best");
x.t("fdo","first");
x.t("fdo","asserted");
x.t("fdo","time-delayed");
x.t("pipelines","underlying");
x.t("boxes","migrate");
x.t("allows","interleavers");
x.t("composed","number");
x.t("(r-2)","(r-1)");
x.t("selection","values");
x.t("pathname","file");
x.t("pathname","coe");
x.t("row_sel_valid","optional");
x.t("explained","topic");
x.t("rearranged","new");
x.t("rearranged","methods");
x.t("sets","width");
x.t("sets","commutator");
x.t("array","certain");
x.t("array","size");
x.t("array","composed");
x.t("array","either");
x.t("entire","block");
x.t("coe","file");
x.t("impossible","block");
x.t("6.0","xilinx");
x.t("6.0","block");
x.t("6.0","logicore");
x.t("6.0","interleaver/de-interleaver");
x.t("6.0","interleaver/");
x.t("6.0","following");
x.t("device","virtex");
x.t("device","3,3e");
x.t("device","rearranges");
x.t("device","kintex");
x.t("input","pin");
x.t("input","lined");
x.t("input","branch");
x.t("input","start");
x.t("input","new");
x.t("input","beginning");
x.t("input","symbols");
x.t("input","sampled");
x.t("input","fdo");
x.t("input","ports");
x.t("input","din");
x.t("input","signal");
x.t("input","rectangular");
x.t("input","col_valid");
x.t("input","bus");
x.t("input","data");
x.t("input","correct");
x.t("input","port");
x.t("input","commutator");
x.t("input","symbol");
x.t("logicore","version");
x.t("logicore","product");
x.t("logicore","block");
x.t("logicore","forney");
x.t("logicore","logicore");
x.t("logicore","small");
x.t("logicore","sometimes");
x.t("logicore","interleaver/de-interleaver");
x.t("logicore","minimum");
x.t("width","parameter");
x.t("width","input");
x.t("width","din");
x.t("width","col");
x.t("width","row");
x.t("width","bus");
x.t("width","block_size");
x.t("ports","type");
x.t("ports","driving");
x.t("chosen","last");
x.t("chosen","block_start");
x.t("chosen","optional");
x.t("flip-flops","synchronously");
x.t("relative","new");
x.t("relative","pathname");
x.t("interleaver","operates");
x.t("interleaver","block");
x.t("interleaver","deinterleaver");
x.t("interleaver","referred");
x.t("interleaver","symbols");
x.t("interleaver","device");
x.t("interleaver","smaller");
x.t("interleaver","works");
x.t("interleaver","core");
x.t("interleaver","used");
x.t("interleaver","de-interleaver");
x.t("interleaver","inputs");
x.t("store","data");
x.t("lengths","passed");
x.t("lengths","shown");
x.t("lengths","branch");
x.t("lengths","specified");
x.t("allowing","branch");
x.t("accepted","interleaved");
x.t("selected","parameter");
x.t("selected","block");
x.t("selected","sets");
x.t("selected","number");
x.t("selected","illegal");
x.t("selected","case");
x.t("selected","block_size_valid");
x.t("small","possible");
x.t("signals","block");
x.t("signals","valid");
x.t("spreads","burst");
x.t("error","correction");
x.t("blocks","unlike");
x.t("blocks","col_valid");
x.t("blocks","following");
x.t("logic","logicore");
x.t("logic","circuits");
x.t("sometimes","reduced.the");
x.t("supported","variabl");
x.t("supported","variable");
x.t("calculate","block");
x.t("falls","last");
x.t("interleaver/de-interleaver","6.0");
x.t("interleaver/de-interleaver","system");
x.t("interleaver/de-interleaver","v6.0");
x.t("delay","line");
x.t("delay","number");
x.t("din","dout");
x.t("din","time");
x.t("din","sampled");
x.t("din","fdo");
x.t("din","row_sel_valid");
x.t("din","port");
x.t("din","commutator");
x.t("next","rising");
x.t("next","branch");
x.t("rotate","back");
x.t("syntax","please");
x.t("automatic","sysgen");
x.t("finally","appears");
x.t("collection","bits");
x.t("arm","din");
x.t("appears","dout");
x.t("appears","zero-delay");
x.t("select","possible");
x.t("select","block");
x.t("select","deinterleaver");
x.t("select","forney");
x.t("select","interleaver");
x.t("select","automatic");
x.t("select","appropriate");
x.t("select","values");
x.t("select","distributed");
x.t("elsewhere","design");
x.t("options","block");
x.t("options","determine");
x.t("fixed","value");
x.t("minimum","number");
x.t("minimum","medium");
x.t("smaller","quantity");
x.t("means","core");
x.t("block_start","output");
x.t("first","pulse");
x.t("first","data");
x.t("first","symbol");
x.t("exposed","first");
x.t("exposed","v6.0");
x.t("interleaver/","de-interleaver");
x.t("others","symbol");
x.t("number","clock");
x.t("number","columns");
x.t("number","configurations");
x.t("number","parameters");
x.t("number","select");
x.t("number","rows");
x.t("number","branches");
x.t("number","values");
x.t("written","column-wise");
x.t("written","row-wise");
x.t("inter-column","permutations");
x.t("underlying","logicore");
x.t("variabl","equal");
x.t("variabl","block");
x.t("processing","previous");
x.t("ndo","new");
x.t("ndo","rdy");
x.t("ndo","signals");
x.t("ndo","time-delayed");
x.t("vin","following");
x.t("setup","interleaver");
x.t("setup","branches");
x.t("implements","interleaver");
x.t("signal","shown");
x.t("signal","sequences");
x.t("signal","single");
x.t("signal","transmission");
x.t("better","chance");
x.t("recover","original");
x.t("function","rearranging");
x.t("advance","next");
x.t("length","descriptions");
x.t("length","uniform");
x.t("length","illustrated");
x.t("length","branch");
x.t("length","array");
x.t("length","coe");
x.t("length","number");
x.t("length","decremented");
x.t("length","individually");
x.t("length","branches");
x.t("length","although");
x.t("design","select");
x.t("max","depends");
x.t("max","(inclusive)");
x.t("col","block");
x.t("col","input");
x.t("col","port");
x.t("maximum","performance");
x.t("particular","interleaver");
x.t("receive","end");
x.t("different","large");
x.t("different","mixed-up");
x.t("may","preferable");
x.t("whether","resulting");
x.t("whether","data");
x.t("specifies","whether");
x.t("unique","lengths");
x.t("unique","length");
x.t("cope","wide");
x.t("driving","exposed");
x.t("index","xilinx");
x.t("correction","circuits");
x.t("inverse","file");
x.t("inverse","interleaver");
x.t("rearranging","symbols");
x.t("interleavers","specified");
x.t("interleavers","may");
x.t("decremented","rather");
x.t("arbitrary","whether");
x.t("starting","left");
x.t("starting","top");
x.t("row","refer");
x.t("row","type");
x.t("row","inter-row");
x.t("row","unpruned");
x.t("row","previously");
x.t("row","input");
x.t("row","col");
x.t("row","constant");
x.t("row","port");
x.t("row","column");
x.t("row","permutations");
x.t("row","permute");
x.t("detailed","description");
x.t("detailed","information");
x.t("consecutive","branches");
x.t("ignored","block");
x.t("types","interleaver/de-interleavers");
x.t("internal","fpga");
x.t("internal","results");
x.t("(b-1)","length");
x.t("(b-1)","reached");
x.t("match","number");
x.t("changes","block");
x.t("transmission","interleaving");
x.t("individually","controllable");
x.t("works","writing");
x.t("grouped","blocks");
x.t("-1l","interleaver/de-interleaver");
x.t("-1l","-1l");
x.t("end","channel");
x.t("end","recover");
x.t("rows","columns");
x.t("rows","parameter");
x.t("rows","always");
x.t("rows","provided");
x.t("rows","sampled");
x.t("rows","chosen");
x.t("rows","selected");
x.t("rows","fixed");
x.t("rows","value");
x.t("rows","smallest");
x.t("(c-2)","(c-1)");
x.t("row_sel","sampled");
x.t("logic-high","signals");
x.t("transition","vin");
x.t("term","symbol");
x.t("interleaving","randomize");
x.t("interleaving","spreads");
x.t("interleaving","function");
x.t("zero-delay","connection");
x.t("consult","logicore");
x.t("col_sel_valid","optional");
x.t("memory","ever");
x.t("memory","array");
x.t("memory","specifies");
x.t("memory","core");
x.t("memory","depth");
x.t("memory","case");
x.t("memory","style");
x.t("option","best");
x.t("option","usually");
x.t("option","store");
x.t("option","means");
x.t("option","effect");
x.t("previous","block");
x.t("previous","interleaver");
x.t("previous","blocks");
x.t("coe_file_defines_individual_branch_lengths_for_every_branch_in_each_configu","ration");
x.t("known","amount");
x.t("ready","sample");
x.t("ready","first");
x.t("ready","data");
x.t("rearranges","order");
x.t("repeated","figure");
x.t("branches","256");
x.t("branches","size");
x.t("branches","increase");
x.t("branches","alue");
x.t("branches","array");
x.t("branches","lengths");
x.t("branches","data");
x.t("branches","otherwise");
x.t("greater","block");
x.t("variable","block");
x.t("variable","number");
x.t("variable","row");
x.t("variable","column");
x.t("illegal","value");
x.t("fundamental","latency");
x.t("architecture","rom-based");
x.t("new_config","inputs");
x.t("coe_file_defines_branch_length_constant_for_each_configuration","location");
x.t("rectangular","block");
x.t("rectangular","parameters");
x.t("rectangular","memory");
x.t("amount","logic");
x.t("amount","core");
x.t("latency","core");
x.t("matters","inverse");
x.t("simulink","model");
x.t("configuration","row");
x.t("configuration","defined");
x.t("brief","description");
x.t("core","potentially");
x.t("core","operates");
x.t("core","clarity");
x.t("core","provides");
x.t("core","parameters");
x.t("core","allows");
x.t("core","small");
x.t("core","calculate");
x.t("core","ready");
x.t("core","selecting");
x.t("core","called");
x.t("value","parameter");
x.t("value","sampled");
x.t("value","col");
x.t("value","row");
x.t("value","rows");
x.t("value","actually");
x.t("value","used");
x.t("value","block_size");
x.t("interleaver/deinterleavers","coe");
x.t("interleaver/deinterleavers","column");
x.t("col_valid","low");
x.t("col_valid","optional");
x.t("similar","fashion");
x.t("similar","ndo");
x.t("bus","width");
x.t("bus","smallest");
x.t("bus","classic");
x.t("interleaver/de-interleavers","generated");
x.t("figure","below");
x.t("figure","row\\column");
x.t("figure","illustrates");
x.t("figure","above");
x.t("figure","difference");
x.t("incremented","branch");
x.t("specific","basic");
x.t("specific","forney");
x.t("specific","rectangular");
x.t("specific","port");
x.t("constant","block");
x.t("constant","entering");
x.t("constant","number");
x.t("constant","row");
x.t("constant","value");
x.t("constant","selecting");
x.t("constant","column");
x.t("constant","difference");
x.t("largest","possible");
x.t("selecting","rows");
x.t("selecting","option");
x.t("already","available");
x.t("generated","config_sel");
x.t("generated","logicore");
x.t("process","repeated");
x.t("actually","occur");
x.t("generator","block");
x.t("generator","row");
x.t("generator","column");
x.t("pipelining","pipelines");
x.t("circuit","rising");
x.t("although","branch");
x.t("although","perform");
x.t("read","column-wise");
x.t("read","row-wise");
x.t("selectable","col_sel");
x.t("selectable","number");
x.t("selectable","row");
x.t("selectable","row_sel");
x.t("selectable","column");
x.t("valid","selection");
x.t("valid","data");
x.t("deasserted","(low)");
x.t("sequence","input");
x.t("location","errors");
x.t("location","file");
x.t("controllable","illustrated");
x.t("output","available");
x.t("output","dout");
x.t("output","rectangular");
x.t("output","similar");
x.t("output","asserted");
x.t("depth","symbol");
x.t("dimensions","number");
x.t("medium","maximum");
x.t("single-shot","circuit");
x.t("diagram","specify");
x.t("data","dout");
x.t("data","indicates");
x.t("data","symbols");
x.t("data","fdo");
x.t("data","input");
x.t("data","width");
x.t("data","din");
x.t("data","ndo");
x.t("data","particular");
x.t("data","inverse");
x.t("data","rectangular");
x.t("data","sheet");
x.t("data","asserted");
x.t("information","rectangular");
x.t("constan","block");
x.t("optional","pins");
x.t("optional","new");
x.t("optional","output");
x.t("optional","port");
x.t("correct","signal");
x.t("bit","others");
x.t("examples","detailed");
x.t("appropriate","branch");
x.t("appropriate","style");
x.t("defined","exactly");
x.t("defined","coe");
x.t("pruning","impossible");
x.t("pruning","used");
x.t("affecting","processing");
x.t("case","select");
x.t("case","core");
x.t("case","based");
x.t("values","parameter");
x.t("values","need");
x.t("values","number");
x.t("values","defined");
x.t("above","branches");
x.t("called","interleaver");
x.t("specification","reset");
x.t("specification","detailed");
x.t("specification","examples");
x.t("rst","sets");
x.t("(r-1)","rectangular");
x.t("sysgen","appropriate");
x.t("roms","used");
x.t("port","unlike");
x.t("port","refer");
x.t("port","parameters");
x.t("port","width");
x.t("port","case");
x.t("described","block");
x.t("efficient","selecting");
x.t("migrate","interleaver");
x.t("sheet","spartan");
x.t("chance","correcting");
x.t("transmit","end");
x.t("two","types");
x.t("column","type");
x.t("column","inter-row");
x.t("column","rectangular");
x.t("column","value");
x.t("column","constant");
x.t("column","permutations");
x.t("column","permute");
x.t("logic-based","logic");
x.t("otherwise","branch");
x.t("predefined","number");
x.t("applications","symbol");
x.t("commutator","arms");
x.t("commutator","arm");
x.t("permutations","none");
x.t("permutations","supported");
x.t("permutations","configuration");
x.t("permutations","performed");
x.t("based","required");
x.t("asserted","until");
x.t("asserted","high");
x.t("asserted","(high)");
x.t("asserted","without");
x.t("low-to-high","transition");
x.t("order","input");
x.t("order","sequence");
x.t("order","reading");
x.t("burst","errors");
x.t("correcting","data");
x.t("entirely","different");
x.t("reached","commutator");
x.t("reverse","input");
x.t("time-delayed","version");
x.t("following","instructions");
x.t("following","xilinx");
x.t("following","brief");
x.t("following","figure");
x.t("following","diagram");
x.t("following","symbol");
x.t("used","parameter");
x.t("used","keep");
x.t("used","necessary");
x.t("used","branch");
x.t("used","block");
x.t("used","select");
x.t("used","receive");
x.t("used","constant");
x.t("used","transmit");
x.t("used","compute");
x.t("used","describe");
x.t("used","specify");
x.t("mixed-up","order");
x.t("bottom","starting");
x.t("model","basic");
x.t("style","select");
x.t("style","memory");
x.t("compute","internal");
x.t("either","variabl");
x.t("either","length");
x.t("relevant","variable");
x.t("relevant","constant");
x.t("relevant","selectable");
x.t("smallest","possible");
x.t("smallest","value");
x.t("system","generator");
x.t("block_size","last");
x.t("block_size","input");
x.t("block_size","port");
x.t("symbol","last");
x.t("symbol","single");
x.t("symbol","block");
x.t("symbol","sampled");
x.t("symbol","width");
x.t("symbol","input");
x.t("symbol","falls");
x.t("symbol","din");
x.t("symbol","memory");
x.t("symbol","bus");
x.t("symbol","output");
x.t("symbol","used");
x.t("classic","interleaving");
x.t("general","interleaving");
x.t("v6.0","version");
x.t("v6.0","product");
x.t("v6.0","block");
x.t("permute","vector");
x.t("setting","block");
x.t("using","coef.coe");
x.t("blockset","libraries");
x.t("blockset","interleaver/de-interleaver");
x.t("series","delay");
x.t("tab","follows");
x.t("tab","parameters");
x.t("distributed","block");
x.t("accomplish","simple");
x.t("kintex","device");
x.t("performed","required");
x.t("performed","remember");
x.t("performed","coe");
x.t("behavior","configurations");
x.t("occur","known");
x.t("associated","interleaver");
x.t("block_size_valid","optional");
x.t("without","affecting");
x.t("describe","collection");
x.t("edge","detector");
x.t("edge","last");
x.t("edge","rdy");
x.t("memories","required");
x.t("effect","block");
x.t("effect","setting");
x.t("spartan","device");
x.t("circuits","better");
x.t("circuits","used");
x.t("shift","registers");
x.t("reading","different");
x.t("pruned","block");
x.t("pruned","pruning");
x.t("(ready)","output");
x.t("de-interleaver","5.1");
x.t("de-interleaver","operates");
x.t("de-interleaver","branch");
x.t("de-interleaver","blocks");
x.t("de-interleaver","matters");
x.t("de-interleaver","two");
x.t("de-interleaver","v6.0");
x.t("difference","interleaver");
x.t("difference","ndo");
x.t("difference","consecutive");
x.t("specify","branch");
x.t("specify","pathname");
x.t("specify","relative");
x.t("specify","unique");
x.t("inputs","block");
x.t("inputs","parameters");
x.t("inputs","accepted");
x.t("inputs","ignored");
x.t("(inclusive)","max");
x.t("(inclusive)","architecture");
x.t("quantity","fpga");
x.t("resources","pruned");
x.t("row_valid","optional");
x.t("remains","current");
}
