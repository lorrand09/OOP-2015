function FileData_Pairs(x)
{
x.t("registers","typically");
x.t("double-clicking","icon");
x.t("ieee","transactions");
x.t("sub-blocks","open");
x.t("odd-symmetric","fir");
x.t("below","cic");
x.t("transactions","acoustics");
x.t("digital","filters");
x.t("digital","down-converters");
x.t("digital","systems");
x.t("digital","up-converters");
x.t("building","blocks");
x.t("taking","subsamples");
x.t("keep","integrator");
x.t("binary","point");
x.t("16384","(inclusive)");
x.t("explore","popup");
x.t("double","click");
x.t("dialog","box");
x.t("decimator","sample");
x.t("decimator","down-sampler");
x.t("last","integrator");
x.t("provided","filter");
x.t("interface","cic");
x.t("icon","simulink");
x.t("162","1981");
x.t("sample","rate");
x.t("sample","input");
x.t("open","sub-block");
x.t("basic","building");
x.t("change","16384");
x.t("change","rate");
x.t("change","block");
x.t("change","factor");
x.t("type","interpolator");
x.t("single-pole","iir");
x.t("(2)",":155");
x.t("xilinx","reference");
x.t("rate","change");
x.t("rate","increase");
x.t("rate","changes");
x.t("rate","larger");
x.t("rate","factor");
x.t("rate","system");
x.t("popup","menu");
x.t("-rm","seen");
x.t("sections","keep");
x.t("sections","interpolator");
x.t("sections","together");
x.t("i.e","up-sampler");
x.t("filters","decimation");
x.t("filters","frequently");
x.t("filters","contain");
x.t("filters","multirate");
x.t("filters","used");
x.t("details","provided");
x.t("single","comb");
x.t("single","data");
x.t("single","integrator");
x.t("block","dialog");
x.t("block","interface");
x.t("block","i.e");
x.t("block","single");
x.t("block","follows");
x.t("block","parameters");
x.t("block","select");
x.t("block","model");
x.t("cascaded","integrator-comb");
x.t("interpolation","ieee");
x.t("interpolation","structures");
x.t("occupied","signal");
x.t("invoked","double-clicking");
x.t("realizing","large");
x.t("decimation","interpolation");
x.t("menu","double");
x.t("differentiators","reference");
x.t("filter","odd-symmetric");
x.t("filter","type");
x.t("filter","xilinx");
x.t("filter","cascaded");
x.t("filter","cascades");
x.t("filter","design");
x.t("filter","transfer");
x.t("filter","described");
x.t("filter","cic");
x.t("filter","integrator");
x.t("bits","(inclusive)");
x.t("increase","factor");
x.t("large","sample");
x.t("large","excess");
x.t("r-1","zero-valued");
x.t("fir","filter");
x.t("box","invoked");
x.t("box","selected");
x.t("follows","input");
x.t("frequently","used");
x.t("(cic)","filters");
x.t("parameters","dialog");
x.t("parameters","block");
x.t("parameters","specific");
x.t("place","block");
x.t("unity","feedback");
x.t("figures","below");
x.t("multipliers","consist");
x.t("interpolator","decimator");
x.t("interpolator","up-sampler");
x.t("structures","supported");
x.t("structures","independent");
x.t("contain","multipliers");
x.t("input","binary");
x.t("input","sample");
x.t("input","filter");
x.t("input","bit");
x.t("input","port");
x.t("width","width");
x.t("width","input");
x.t("selected","block");
x.t("selected","integer");
x.t("supported","cic");
x.t("blocks","cic");
x.t("independent","rate");
x.t("point","binary");
x.t("point","location");
x.t("delay","selected");
x.t("delay","(inclusive)");
x.t("cascades","integrator");
x.t("select","explore");
x.t("iir","filter");
x.t("number","stages");
x.t("processing","assp-");
x.t("signal","processing");
x.t("signal","cic");
x.t("design","subsystems");
x.t("annotations","block");
x.t("annotations","place");
x.t("function","single");
x.t("function","(z)");
x.t("down-converters","digital");
x.t("consecutive","samples");
x.t("speech","signal");
x.t("changes","digital");
x.t("samples","consecutive");
x.t("samples","comb");
x.t("section","output");
x.t("[n]","single");
x.t("[n]","[n]");
x.t("[n]","differential");
x.t("[n]","[n-1]");
x.t("up-sampler","causes");
x.t("up-sampler","down-sampler");
x.t("reference","block");
x.t("reference","hogenauer");
x.t("reference","blockset");
x.t("excess","sample");
x.t("reduces","sample");
x.t("stage","block");
x.t("stage","(z)");
x.t("differential","delay");
x.t("click","sub-blocks");
x.t("together","comb");
x.t("coefficient","[n]");
x.t("seen","two");
x.t("simulink","model");
x.t("right-click","block");
x.t("implementation","details");
x.t("specific","reference");
x.t("pipeline","differentiators");
x.t("systems","decimation");
x.t("read","annotations");
x.t("assp-","(2)");
x.t("larger","bandwidth");
x.t("output","decimator");
x.t("output","last");
x.t("output","port");
x.t("comb","sections");
x.t("comb","single");
x.t("comb","filter");
x.t("comb","structures");
x.t("comb","section");
x.t("comb","stage");
x.t("transfer","function");
x.t("location","input");
x.t("data","input");
x.t("data","output");
x.t("inserted","sections");
x.t("zero-valued","samples");
x.t("acoustics","speech");
x.t("multirate","filters");
x.t("employed","applications");
x.t("(z)","-rm");
x.t("(z)","integrator's");
x.t("subsamples","output");
x.t("bit","width");
x.t("port","data");
x.t("port","two");
x.t("port","128");
x.t("feedback","coefficient");
x.t("described","[n]");
x.t("sub-block","model");
x.t("two","basic");
x.t("two","figures");
x.t("integer","rate");
x.t("hogenauer","economical");
x.t("economical","class");
x.t("adders","subtractors");
x.t("typically","employed");
x.t("applications","large");
x.t("factor","taking");
x.t("factor","transfer");
x.t("factor","inserting");
x.t("inserting","r-1");
x.t("[n-1]","[n]");
x.t("causes","rate");
x.t("integrator-comb","(cic)");
x.t("used","digital");
x.t("used","realizing");
x.t("system","sample");
x.t("model","parameters");
x.t("model","right-click");
x.t("model","read");
x.t("down-sampler","reduces");
x.t("down-sampler","inserted");
x.t(":155","162");
x.t("class","digital");
x.t("cic","filters");
x.t("cic","block");
x.t("cic","filter");
x.t("blockset","cic");
x.t("128","bits");
x.t("stages","(inclusive)");
x.t("subtractors","registers");
x.t("bandwidth","occupied");
x.t("up-converters","implementation");
x.t("integrator's","unity");
x.t("subsystems","read");
x.t("consist","adders");
x.t("(inclusive)","number");
x.t("(inclusive)","differential");
x.t("(inclusive)","pipeline");
x.t("(inclusive)","data");
x.t("integrator","single-pole");
x.t("integrator","sections");
x.t("integrator","stage");
x.t("integrator","comb");
}
