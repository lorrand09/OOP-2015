function FileData_Pairs(x)
{
x.t("coding","keep");
x.t("coding","qpsk");
x.t("coding","and/or");
x.t("looks","independent");
x.t("clock","cycles");
x.t("boutillon","danger");
x.t("ieee","pacrim");
x.t("below","snr");
x.t("0.0625db","awgn");
x.t("parameter","decimal");
x.t("shown","below");
x.t("keep","constant");
x.t("binary","point");
x.t("victoria","aug");
x.t("energy","snr");
x.t("0.0","15.9375");
x.t("1/2","coding");
x.t("qpsk","modulation");
x.t("qpsk","case");
x.t("ghazel","boutillon");
x.t("laamari","design");
x.t("sequences","channel");
x.t("variance","shown");
x.t("necessary","adjust");
x.t("/-1","/-1");
x.t("/-1","add");
x.t("emulator","ieee");
x.t("aug","2001");
x.t("type","binary");
x.t("type","reset");
x.t("reset","port");
x.t("xilinx","bpsk");
x.t("xilinx","reference");
x.t("xilinx","october");
x.t("xilinx","data");
x.t("formats","necessary");
x.t("rate","1/2");
x.t("channel","looks");
x.t("channel","clock");
x.t("channel","emulator");
x.t("channel","xilinx");
x.t("channel","bpsk");
x.t("channel","eb/no");
x.t("channel","reference");
x.t("channel","output");
x.t("speed","awgn");
x.t("block","parameter");
x.t("block","parameters");
x.t("block","noise");
x.t("block","adds");
x.t("add","rate");
x.t("add","independent");
x.t("bits","binary");
x.t("snr","type");
x.t("snr","add");
x.t("snr","overall");
x.t("snr","input");
x.t("snr","achieve");
x.t("snr","uncoded");
x.t("snr","value");
x.t("snr","defined");
x.t("ufix8_4","valid");
x.t("bpsk","channel");
x.t("bpsk","unit");
x.t("bpsk","modulation");
x.t("bpsk","awgn");
x.t("desired","noise");
x.t("high","speed");
x.t("range","0.0");
x.t("overall","latency");
x.t("[1]","ghazel");
x.t("danger","gulak");
x.t("performance","analysis");
x.t("communication","channel");
x.t("additive","white");
x.t("cycles","channel");
x.t("boolean","input");
x.t("zero","block");
x.t("parameters","block");
x.t("adjust","snr");
x.t("eb/no","snr");
x.t("input","ufix8_4");
x.t("input","signal");
x.t("input","port");
x.t("independent","bpsk");
x.t("independent","noise");
x.t("point","input");
x.t("point","position");
x.t("din","unsigned");
x.t("unit","symbol");
x.t("number","bits");
x.t("seed","value");
x.t("signal","noise");
x.t("design","performance");
x.t("different","modulation");
x.t("starting","seed");
x.t("achieve","desired");
x.t("noise","sequences");
x.t("noise","variance");
x.t("noise","input");
x.t("noise","scaled");
x.t("noise","generator");
x.t("noise","(awgn)");
x.t("noise","created");
x.t("reference","block");
x.t("reference","[1]");
x.t("reference","blockset");
x.t("steps","0.0625db");
x.t("adds","scaled");
x.t("scaled","based");
x.t("scaled","white");
x.t("conference","victoria");
x.t("accommodate","difference");
x.t("uncoded","qpsk");
x.t("uncoded","bpsk");
x.t("october","2002");
x.t("and/or","core");
x.t("modulation","/-1");
x.t("modulation","formats");
x.t("modulation","rate");
x.t("latency","awgn");
x.t("awgn","channel");
x.t("awgn","communication");
x.t("awgn","system");
x.t("core","different");
x.t("core","v1.0");
x.t("value","reference");
x.t("value","accommodate");
x.t("efficiency","bpsk");
x.t("1-bit","type");
x.t("constant","eb/no");
x.t("signed","number");
x.t("generator","reference");
x.t("valid","range");
x.t("output","bit");
x.t("data","sheet");
x.t("(awgn)","core");
x.t("defined","(eb/no)");
x.t("bit","signed");
x.t("case","eb/no");
x.t("gulak","laamari");
x.t("pacrim","conference");
x.t("port","snr");
x.t("port","boolean");
x.t("port","din");
x.t("sheet","additive");
x.t("based","snr");
x.t("created","white");
x.t("(eb/no)","uncoded");
x.t("15.9375","steps");
x.t("white","gaussian");
x.t("system","coding");
x.t("symbol","energy");
x.t("spectral","efficiency");
x.t("[2]","xilinx");
x.t("blockset","bpsk");
x.t("gaussian","noise");
x.t("decimal","starting");
x.t("2001","[2]");
x.t("analysis","high");
x.t("unsigned","1-bit");
x.t("position","zero");
x.t("v1.0","xilinx");
x.t("difference","spectral");
}
