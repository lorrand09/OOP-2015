<html>
<head>
<title>[% T.IP %]</title>
</head>
<img src="file:///[% T.SYSGENBUILD %]/data/images/sgbanner.jpg"/>
<p align="center">
<font color="blue" face="arial" size="6">
Understanding the files generated by System Generator for IPExport
</font> 
</p>
<br><br>
<font color="blue" face="arial" size="5">
1. Introduction
</font>
<br>
<font color="black" face="arial" size="3">
This document serves to explain the various files that get created during the process of compiling and exporting SysGen design to CoreGen. It also contains information about the process of using these files and checking them into the IP repository so as to make this core available in the IP builds. Section 2 documents the functionality of files created during IPExport flow. Section 3 contains information related to the check-in process.
</font>
<br><br>
<font color="blue" face="arial" size="5">
2. [% T.IP %]
</font>
<br>
<font color="black" face="arial" size="3">
This is the name of top level directory associated with this core. All files specific to this IP, including GUI files and generation files are contained in this directory. Please refer to document on craeting a design for IPExport. This directory and the subsequent files and directory described in this section are created only after the core has been successfully exported to coregen.
</font>
<br><br>
<font color="blue" face="arial" size="4">
2.1 <a href="[% T.IP %].xcd">[% T.IP %].xcd</a>
</font>
<br>
<font color="black" face="arial" size="3">
This file specifies information that is required for building [% T.IP %].class file associated with the core during IP builds. It specifies the core name, the generation flow used, core key etc. The location of this file in the IP repository and as deployed in coregen is the same relative the [% T.IP %] diectory. This file essentially contains a list of key value pairs. Currently, a number of keys are set to default values as they cannot be determined without user input. Following is a list of such key value pairs that the IP developer must edit appropriately : 
<br>
<br>
<b><i>modulename=Sysgen_IP_Core</i></b> - This will be used as a title for the Core GUI. Change it based on the IP.For example <i>Color_Correction_Matrix</i> will set the title as <i>Color Correction Matrix</i>. 
<br>
<br>
<b><i>taxonomy=/Example_Cores</i></b> - Taxonomy determines which functional group the core will appear in when CoreGen is launched. Update this to a more meaningful value, for eg. <i>/Video_&_Image_Processing</i> if deploying an MVI core.
<br>
<br>
<b><i>chipfamily=spratan3adsp virtex5</i></b> - List of devices to support separated by space.
<br>
<br>
<b><i>coredescription=This is a CCM core developed in SysGen and deployed in Coregen using IPExport technology</i></b> - This is the description that will appear in GUI and must be tailored accordingly.
<br>
<br>
<b><i>corecreationdate=April 28, 2008</i></b> - Update it to the IP release that will contain this Core
<br>
<br>
For more details on how this file should be checked into CoreGen repository please refer to Section 3. 
</font>
<br>
<br>
<font color="blue" face="arial" size="4">
2.2 gui
</font>
<br>
<font color="black" face="arial" size="3">
This subdirectory contains all the files related to the GUI of this core . Eventually, this directory should also include the [% T.IP %].ui file. When exporting a core from SysGen, it is assumed that a default GUI will be used for the core, hence [% T.IP %].ui file is not generated. The following section attempts to document the information contained in the various TCL files in this directory. 
</font>
<br><br>
<font color="blue" face="arial" size="3">
2.2.1 <a href="gui/[% T.IP %].tcl">[% T.IP %].tcl</a>
</font>
<br>
<font color="black" face="arial" size="3">
This is the standard file associated with the [% T.IP %] core for processing XCO parameters and implementing all the <b>xco</b> parameters to <b>sim</b> parameters translation. This file also verifies that a SysGen installation is available by interrogating the <b>SYSGENBUILD</b> environment variable. Currently, this environment variable must be set to the directory containing the <b>sysgen</b> folder. In the file generated by SysGen, no XCO validation, translation and upate is performed. This file must be modified by the IP developer to incorporate XCO validation and translation. Also pin information must be added to this file. Currently a default list of pin parameters and sim parameters are added by sourcing <b>sysgen_coregen_gui_util.tcl</b> 
</font>
<br><br>
</font>
<font color="blue" face="arial" size="3">
2.2.2 <a href="gui/[% T.IP %]_meta.tcl">[% T.IP %]_meta.tcl</a>
</font>
<br>
<font color="black" face="arial" size="3">
This file contains the names of <b>simParameters</b> and their default values. This file is sourced by <b>[% T.IP %].tcl</b>. These simParameters have a direct correspondence to the mask parameter names on the subsystem that was <b>Compiled for Export to CoreGen</b>. The names of the simParameters must be preserved unless the appropriate changes have been made in the original SysGen subsystem that was used to create this file.
</font>
<br><br>
</font>
<font color="blue" face="arial" size="3">
2.2.3 <a href="gui/[% T.IP %]_setenv.tcl">[% T.IP %]_setenv.tcl</a>
</font>
<br>
<font color="black" face="arial" size="3">
This file contains information about the port interface of the IP. It is used to configure the pins that are seen on the CoreGen IP block as well as SysGen generation flow for setting up rate and type propagation. This file is used by <b>[% T.IP %].tcl</b> as well as <b>[% T.IP %]_model.tcl</b> and should not be modified.
</font>
<br><br>
<font color="blue" face="arial" size="3">
2.2.4 <a href="gui/[% T.IP %]_util.tcl">[% T.IP %]_util.tcl</a>
</font>
<br>
<font color="black" face="arial" size="3">
This file contains information to locate the SysGen builds. Currently, it uses <b>SYSGENBUILD</b> environment variable but will later be converted to use relative paths based on the <b>XILINX</b> environment variable. This file should not be modified by the IP developer.
</font>
<br><br>
<font color="blue" face="arial" size="4">
2.3 generate
</font>
<br>
<font color="black" face="arial" size="3">
This subdirectory contains all the files related to generation and delivery of [% T.IP %]. The IP developer should not modify any of these files. The following section briefly describes the functionality of these files/scripts.
</font>
<br><br>
<font color="blue" face="arial" size="3">
2.3.1 <a href="generate/[% T.IP %]_model.tcl">[% T.IP %]_model.tcl</a>
</font>
<br>
<font color="black" face="arial" size="3">
This file invokes SysGen to perform netlisting of the parameterized core. Additionally, it is a standard interface script that is used by CoreGen to define the top level wrapper for creating NGC for this Core. This script is invoked by CoreGen prior to invocation of <b>[% T.IP %]_generate.tcl</b>. This script uses modules defined in <b>sysgen_environment.tcl</b> and <b>sysgen_coregen_model_util.tcl</b>. The generation of SysGen netlist is launched in a separate process through invocation of <b>sysgen_generate.tcl</b>
</font>
<br><br>
<font color="blue" face="arial" size="3">
2.3.2 <a href="generate/[% T.IP %]_generate.tcl">[% T.IP %]_generate.tcl</a>
</font>
<br>
<font color="black" face="arial" size="3">
This file is used to deliver the results of SysGen netlisting in the form requested. If NGC flow is selected then standard CoreGen files are delivered including an NGC file and NetGen based simulation model. If PCORE based netlisting is selected then the PCORE files are delivered in a top level directory called <b>pcore</b> co-located with the project file used for this generation.
</font>
<br><br>
<font color="blue" face="arial" size="4">
<a href="lib">2.4 lib</a>
</font>
<br>
<font color="black" face="arial" size="3">
This subdirectory contains the shared libraries required to interface with SysGen. This subdirectory should be checked into  a directory called <b>precompiled</b> more specifically <b>[% T.IP %]/precompiled/lib</b> in the ip repository. For more details please refer to Section 3.
</font>
<br>
<br>
<font color="blue" face="arial" size="3">
2.4.1 nt
</font>
<br>
<font color="black" face="arial" size="3">
This subdirectory is renamed as <b>ntopt</b>, specifically <b>[% T.IP %]/precompiled/lib/ntopt</b> in the ip repository. The files contained in this directory are described in the following sections.
</font>
<br><br>
<font color="blue" face="arial" size="3">
2.4.1.1 lib_[% T.IP %].dll
</font>
<br>
<font color="black" face="arial" size="3">
This shared library is used to elaborate the structural connectivity based on Core parameterization.
</font>
<br><br>
<font color="blue" face="arial" size="3">
2.4.1.2 [% T.IP %]_env.bin
</font>
<br>
<font color="black" face="arial" size="3">
This is a binary file that captures the default environment settings, parameterization and port information.
</font>
<br><br>
<br><br>
<font color="blue" face="arial" size="5">
3. Checking in Process
</font>
<br><br>
<font color="black" face="arial" size="3">
IP created using IPExport technology must be checked into IP repository for it to become part of the IPBuilds and hence be available for deployment using CoreGen.
</font>
<br><br>
<font color="blue" face="arial" size="4">
3.1 Organizing the files in the IP Repository
</font>
<br>
<font color="black" face="arial" size="3">
The files generated during <b>Deploy to Coregen</b> should be organized int the ip repository as shown below.
<br>
<img src="file:///[% T.SYSGENBUILD %]/data/images/folder_icon.jpg"/>[% T.IP %]
<br>
<font color="red" face="arial" size="3">
&nbsp;&nbsp;&nbsp;&nbsp;make.t
<br> 
&nbsp;&nbsp;&nbsp;&nbsp;Makevars 
<br>
</font>
&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %].xcd 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<img src="file:///[% T.SYSGENBUILD %]/data/images/folder_icon.jpg"/>gui 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %].tcl 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %]_meta.tcl 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %]_setenv.tcl 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %]_util.tcl</b> 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<img src="file:///[% T.SYSGENBUILD %]/data/images/folder_icon.jpg"/>generate
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %]_model.tcl 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %]_generate.tcl 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<img src="file:///[% T.SYSGENBUILD %]/data/images/folder_icon.jpg"/>precompiled
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="file:///[% T.SYSGENBUILD %]/data/images/folder_icon.jpg"/>lib
<br>   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="file:///[% T.SYSGENBUILD %]/data/images/folder_icon.jpg"/>ntopt
<br>   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lib_[% T.IP %].dll
<br>   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% T.IP %]_env.bin
<br>
[% IF T.HDLFILES_size > 0 %]
&nbsp;&nbsp;&nbsp;&nbsp;<img src="file:///[% T.SYSGENBUILD %]/data/images/folder_icon.jpg"/>hdl   
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;make.t 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Makevars 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bb_comps.vhd.src
[% END %] 
[% FOREACH HDLFILE = T.HDLFILES -%]
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% HDLFILE.NAME %] 
[% END %]
<br>
<br>
The IPExport flow does not create <b>make.t</b> and <b>Makevars</b> files. But the contents of these files has been reproduced in the sections below.
<br><br>
<font color="blue" face="arial" size="3">
3.1.1 [% T.IP %]/make.t
</font>
<br>
make.t is a template makefile that is used to build the core and deliver the files appropriately during IPBuilds. This is generic template file and does not depend on the IP itself.The contents of this file should be :
<br><br>
<i>
#! cd .
<br>
# ---------------------------------------------------------------
<br>
#
<br>
# Author: [% T.USERNAME %] 
<br>
# Date: 
<br>
#
<br>
# ---------------------------------------------------------------
<br>
# Core Specific Variables
<br>
!# ./Makevars
<br>
# ---------------------------------------------------------------
<br><br>
# Core Specific targets
<br>
CORE_SPECIFIC_LIBS_TARGET = ${ECHO} "Core Specific Libs Target"
<br>
CORE_SPECIFIC_RELEASE_TARGET = ${ECHO} "Core Specific Release Target"
<br>
CORE_SPECIFIC_CLEAN_TARGET = ${ECHO} "Core Specific Clean Target"
<br>
# ---------------------------------------------------------------
<br><br>
# Include the default targets for this core.
<br>
!# ${TEMPLATES}/${THIS_CORE}
</i>
<br>
<br>
<font color="blue" face="arial" size="3">
3.1.2 [% T.IP %]/Makevars
</font>
<br>
Makevars sets up all the build variables specific to the core. The contents of this file are as shown below :
<br><br>
<i>
# ---------------------------------------------------------------
<br>
# Makevars
<br>
#
<br>
# Author: [% T.USERNAME %] 
<br> 
# Date:
<br> 
#
<br>
# ---------------------------------------------------------------
<br><br>
# Core specific variables
<br>
FULL_CORENAME = [% T.IP %]
<br> 
CORE_NAME = [% T.CORENAME %] 
<br>
CORE_VERSION = [% T.COREVERSION %] 
<br>
# ---------------------------------------------------------------
<br>
# Reference to global makevars
<br>
!Envfile GLOBAL_MAKEVARS = Databases/ip/build/globalMakevars
<br>
!# ${GLOBAL_MAKEVARS}
<br>
# ---------------------------------------------------------------
<br>
# Define core type
<br>
# STANDARD_CORE, and others.
<br>
THIS_CORE = ${XST_CORE}
<br>
# ---------------------------------------------------------------
<br>
# Define release type
<br>
# NO_ENCRYPTION, HIDDEN_ENCRYPTION, VISIBLE_ENCRYPTION
<br>
ENCRYPTION_TYPE = ${HIDDEN_ENCRYPTION}
<br>
# ---------------------------------------------------------------
<br>
# Uncomment the following line to release a core license.
<br>
# RELEASE_CORE_LICENSE = ${_RELEASE_CORE_LICENSE}
<br>
</i>
</font>
<br>
[% IF T.HDLFILES_size > 0 %]
<font color="blue" face="arial" size="3">
3.1.3 [% T.IP %]/hdl/make.t
</font>
<br>
make.t is a template makefile that is used to build the hdl of this core and deliver the files appropriately during IPBuilds. This is generic template file and does not depend on the IP itself.The contents of this file should be :
<br><br>
<i>
#! cd .
<br>
# ---------------------------------------------------------------
<br>
#
<br>
# Author: [% T.USERNAME %] 
<br>
# Date: 
<br>
#
<br>
# ---------------------------------------------------------------
<br>
# Core Specific Variables
<br>
!# ./Makevars
<br>
# ---------------------------------------------------------------
<br><br>
# Core Specific targets
<br>
CORE_SPECIFIC_LIBS_TARGET = ${ECHO} "Core Specific Libs Target"
<br>
CORE_SPECIFIC_RELEASE_TARGET = ${ECHO} "Core Specific Release Target"
<br>
CORE_SPECIFIC_CLEAN_TARGET = ${ECHO} "Core Specific Clean Target"
<br>
# ---------------------------------------------------------------
<br><br>
# Include the default targets for this core.
<br>
!# ${TEMPLATES}/hdl/${THIS_CORE}
</i>
<br>
<br>
<font color="blue" face="arial" size="3">
3.1.4 [% T.IP %]/hdl/Makevars
</font>
<br>
Makevars sets up all the build variables specific to the hdl of core. The contents of this file are as shown below :
<br><br>
<i>
# ---------------------------------------------------------------
<br>
# Makevars
<br>
#
<br>
# Author: [% T.USERNAME %] 
<br> 
# Date:
<br> 
#
<br>
# ---------------------------------------------------------------
<br><br>
# Reference to core makevars
<br>
!# ../Makevars
<br> 
#Variables
<br>
SYN_HDL_SRCS = \
<br>
[% FOREACH HDLFILE = T.HDLFILES -%]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[% HDLFILE.NAME %] \
<br> 
[% END %]
# ---------------------------------------------------------------
<br>
</i>
</font>
<br>
[% END %]
<font color="blue" face="arial" size="4">
<b>3.2 Publishing the files</b>
</font>
<br>
<font color="black" face="arial" size="3">
Please create a sandbox for the ip core with the name [% T.IP %]. This should result in the following path for Lava builds : env\Databases\ip\src2\L\[% T.IP %]. Additionally also check out the <i>build</i> directory from the repository at env\Databases\ip\build. Prior to publishing please ensure that the Core builds using xbld. The commands to verify this is as follows :
<br><br>
<b>xbld -o libs</b>
<br> 
<b>xbld -o ip_release</b>
<br><br>
Ensure that the above two commands do not result in a build failure. If this is nt ensured then it is likely that publishing the core will result in an IP build failure. After verifying that the builds succeed use thr fllowing command to publish the core.
<br><br>
<b>xcs publish [% T.IP %] -notes "Add appropriate comments" -reviewer1 "IP_DEVELOPER_NAME"</b>
<br><br>
This step must be additionally followed with a communication, through mail, to System Integrator to publish the IP. Only after a mail has been sent, will the IP be available in the IP builds. Currently, such a mail can be sent to ipman@xilinx.com. 
</font>
</html>
