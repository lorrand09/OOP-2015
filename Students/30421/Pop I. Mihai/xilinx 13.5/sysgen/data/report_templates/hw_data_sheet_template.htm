[% BLOCK drawtable %]
<table>
[% FOREACH row = tabledata %]
<tr class="sg_row">[% IF loop.count == 1 %][% FOREACH elem = row %]
<td class="sg_cell_first_row">[% elem %]</td>[% END %][% ELSE %][% FOREACH elem = row %]
<td class="sg_cell">[% elem %]</td>[% END %][% END %]
</tr>[% END %]
<caption class="sg_caption">[% tableCaption %]</caption>
</table>
[% END %]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<style type="text/css">
body {margin-top:6.35em; 
      margin-left:6.35em; 
      width:62.5em;
      text-align:justify;
      font-size:1em; 
      font-family:"Arial", Serif;
      color:#000000;}

h1 {font-size:1.125em;
    font-family:"Arial", Sans-serif;
    color:#943634;}

p {font-size:inherit;
   width:62.5em;
   font-family:inherit;
   color:inherit;}

ul {font-size:inherit;
    width:62.5em;
    font-family:inherit;
    color:inherit;}

li {width:46.15em;}

.image {position: relative;
        width: 100%;}

table {border-collapse:collapse;
       border-spacing:0;
       caption-side:bottom;
       border-style:solid;
       border-width:thin;
       font-size:1em;
       width:62.5em;
       font-family:inherit;
       color:inherit;}

.title_table {border-collapse:collapse;
       border-spacing:0;
       caption-side:bottom;
       font-size:1em; 
       width:62.5em; 
       border-style:none;}

.title_table_image_cell {border-bottom:thin solid #000000;}

.title_table_design_cell {vertical-align:bottom;
        font-size:1.875em; 
        text-align:right; 
        border-bottom:thin solid #000000;}

.title_table_date_cell{font-size:1.25em; 
        vertical-align:bottom; 
        text-align:left; 
        border-bottom:thick solid #943634}

.sg_row {font-size:inherit;
         font-family:inherit;
         color:inherit;
         border-style:solid;
         border-width:thin;}

.sg_cell {margin:0;
          padding:1em;
          border-width:inherit;
          border-style:inherit;
          font-size:inherit;
          font-family:inherit;
          color:inherit;}

.sg_cell_first_row {margin:0;
          padding:1em;
          border-width:inherit;
          border-style:inherit;
          border-bottom:thick solid #943634;
          font-size:inherit;
          font-family:inherit;
          color:inherit;}

.sg_caption {text-align:left;
             caption-side:bottom;
             font-family:inherit;
             font-size:inherit;}
</style>
</head>
<body>
<table class="title_table">
<tr>
<td class="title_table_image_cell"><img src="images/hw_data_sheet_logo.gif"/></td>
<td class="title_table_design_cell">[% T.design %]</td>
</tr>
<tr>
<td colspan=2 class="title_table_date_cell"><b>[% T.date %]</b></td>
</tr>
</table>
<br>
<h1>Introduction</h1>
<p>
This document is generated from a <b>Xilinx System Generator for DSP</b> (System Generator) design. The purpose of the document is to specify the interface of this design. Each of the subsequent sections provides details on the port interface, signal timing, design files, design statistics and design environment.
</p> 
[% IF T.annotationInfoExists == 1 %]
<h1>Designer Comments</h1>
<p>
[% T.annotationInfoData %]
</p>
[% END %]
<h1>Port Interface</h1>
<p>
This section documents the port interface of [% T.design %]. All the <i>Gateway In</i> and <i>Gateway Out</i> blocks in a System Generator design are translated to top-level input and output ports. <i>System Generator Type</i> refers to the type of signals emanating from Gateway Ins and driving Gateway Outs. <i>Type</i> refers to one of the following -
</p> 
<ul>
<li>Data - Signals that are synchronized to Clock
<li>Clock - Clock signal for the design. All operations of the core are synchronized to the rising edge of the Clock signal
<li>Clock Enable - Clock Enable signal is attached to the clock enable pins of flip-flops. A valid clock signal occurs only when Clock Enable Signal attached to CE pin of flip-flops is high on a rising clock edge. If CE is Low, the flip-flops are held in their current state.
</ul>
<p>
<i>Period</i> refers to the sampling period of a particular signal. Please refer to the section below on Multi-rate Realization for more details.
</p>
[% PROCESS drawtable tabledata=T.portInterfaceData tableCaption="<i>Table 1.</i> <b>Top level port interface</b>"%]
<br>
<h1>Multi-rate Realization</h1>
[% IF T.clock_wrapper == "Clock Enables" %]
<p>
The design provided is a multi-rate design. Multiple rates in the design are realized using a network of clock enable generated by default_clock_driver instantiated in [% T.clkWrapper %].vhd. These clock enable are connected to flip-flops in the design and have a specific phase with the clock signals. The diagram below depicts the phase between the clock enable and clock. This diagram is not specifically tailored to [% T.clkWrapper %].vhd but is an example of how multiple rates are realized in designs produced using System Generator. 
</p>
<table>
<tr><td><img src="images/hw_data_sheet_timing_diagram.gif" title="Figure 1. An example of generated clock enables in a System Generator design"/></td></tr>
<caption class="sg_caption"><i>Figure 1.</i> <b>An example of generated clock enables in a System Generator design</b></caption>
</table>
<p>
The timing diagram above is an example of a System Generator design that contains three different rate domains with data periods
</p>
<ul>
<li>1 - Realized using the clk signal
<li>2 - Realized using ce2 signal 
<li>5 - Realized using ce5 signal
</ul>
<p>
As seen in the timing diagram, the first rising edge of ce2 is caused by the first rising edge of the clk and this allows the flip-flops connected to ce2 to capture data on the second rising edge of the clk. Similarly, the first rising edge of ce5 is caused by the fourth rising edge of clk and this allows the flip-flops connected to ce5 to capture data on the fifth rising edge of the clk. This rule can be extended to evety rate in the design. This phase has to be maintained to ensure that the design when simulated in System Generator is cycle accurate with hardware. The diagram also contains data signals - data2 and data5. These signals can either be generated by flip-flops connected to clock enable ce2 or ce5 or these signals can drive the input ports of the design. If these signals are driving input ports with normalized sample periods of 2 or 5 (refer to the Table 2 for details on the port interface of [% T.clkWrapper %].vhd), then they must also align with ce2 and ce5 signals as shown in the timing diagram to be cycle accurate with the System Generator simulation model of the design.
</p>
[% IF T.ce_clr == 1 %]
<br>
<p>
[% T.clkWrapper %] module also contains ce_clr port for resetting the clock enable generation logic. The figure below shows the reset of the ce5 signal generation logic after ce_clr signal is de-asserted. Please note that the diagram is just an example of how clock enables get reset and recover in System Generator designs exposing ce_clr pin and has not been tailored to this specific design. Use of ce_clr has an impact on blocks that can be used within a System Generator design. Please refer to the user guide for details on this limitation. In the diagram below the the ce_clr signal is asserted in the sixth clock cycle thereby reseting the clock enable generator. The clock enable generator recovers after ce_clr de-assertion and ce5 rises again after the 4th rising edge of the clk subsequent to the de-assertion of ce_clr. data1 and data5 are shown to elucidate the frames of data that are captured/generated after such a recovery.
</p>
<table class="image">
<caption class="sg_caption"> <i>Figure 2.</i> <b>An example of clock enables recovering from ce_clr assertion</b></caption>
<tr><td><img src="images/hw_data_sheet_timing_diagram_ce_clr.gif" title="Figure 1. An example of clock enables recovering from ce_clr assertion"/></tr></td>
</table>
[% END %]
[% END %]
[% IF T.clock_wrapper == "Expose Clock Ports" %]
<p>
The design provided is a multi-rate design. Multiple rates in the design are realized using multiple clocks. These clock ports are exposed as input ports in the top-level. The diagram below depicts the phase between the clocks that must be generated to drive the clock ports. This diagram is not specifically tailored to [% T.clkWrapper %].vhd but serves to clarify how multiple rates are realized in designs produced using System Generator.
</p>
<table class="image">
<caption class="sg_caption"><i>Figure 1.</i> <b>An example of Clocks generated to run a System Generator design</b></caption>
<tr><td><img src="images/hw_data_sheet_timing_diagram_multiple_clocks.gif" title="Figure 1. An example of Clocks generated to run a System Generator design"/></tr></td>
</table> 
<br>
<p>
The timing diagram above is an example of a System Generator that contains three different rate domains with data periods
</p>
<ul>
<li>1 - Realized using the clk_1 signal
<li>2 - Realized using clk_2 signal 
<li>5 - Realized using clk_5 signal
</ul>
<p>
As seen in the timing diagram the, the first rising edge of clk_2 is aligned with the 2nd rising edge of clk_1. The first rising edge of clk_5 is aligned with the 5th rising edge of clk_1. This rule can be extended to evety rate in the design. This phase has to be maintained to ensure that the design when simulated in System Generator is cycle accurate with hardware. 
</p>
[% END %]
[% IF T.clock_wrapper == "Clock Generator(DCM)" %]
<p>
The design provided is a multi-rate design. Multiple rates in the design are realized using a network of clocks and clock enables. Multiple clocks are synthesized using a DCM(Digital Clock Manager) instantiated in [% T.clkWrapper %].vhd. The rates that can be mapped to outputs of a DCM are mapped and other rates are derived using clock enables generated from the DCM synthesized clocks.
</p>
<table class="image">
<caption class="sg_caption"><i>Figure 1.</i> <b>An example of DCM used to generate clocks to run a System Generator design</b></caption>
<tr><td><img src="images/hw_data_sheet_timing_diagram_dcm.gif" title="Figure 1. An example of DCM used to generate clocks to run a System Generator design"/></tr></td>
</table>
<br>
<p>
The timing diagram above is an example of a System Generator design that contains three different rate domains with data periods
</p>
<ul>
<li>1 - Realized using the clk_1 signal
<li>2 - Realized using clk_2 signal 
<li>5 - Realized using clk_5 signal
</ul>
<p>
The clocks clk_1, clk_2 and clk_5 are synthesized using a DCM.The input clock to this DCM is clk. The locked signal indicates when the DCM has locked and the design is actually supplied with the multi rate realizing clocks. The data inputs to the design, as represented by data_1 and data_5, are synchronized with the respective clocks. Also, this data must be supplied only after the DCM has achieved lock as represented by the locked signal.
</p>
[% END %]
<h1>Design Files</h1>
<p>
System Generator creates a number of design files to assist in compiling the design all the way down to a bitstream. The Figure below gives an overview of the structural connectivity in the top-level module [% T.clkWrapper %] . This section also provides information on each of the files that are produced when the System Generator design is netlisted to create its HDL representation.
</p>
<table>
<caption class="sg_caption"><i>[% IF T.ce_clr == 1 %]Figure 3.[% ELSE %]Figure 2.[% END %] </i> <b>Structural connectivity of the top-level module [% T.clkWrapper %]</b></caption>
<tr><td>
<div class="image">
[% IF T.clock_wrapper == "Clock Enables"   %]
    <img src="images/hw_data_sheet_design_ce.gif" title="Figure 2. Structural connectivity of the top-level module [% T.clkWrapper %]"/>
    <p style="position:absolute;top:120px;left:80px;width:100%">default_clock_driver</p>
    <p style="position:absolute;top:188px;left:260px;width:100%">[% T.design %]</p>
    <p style="position:absolute;top:228px;left:120px;width:100%">[% T.clkWrapper %]</p>
[% END %]
[% IF T.clock_wrapper == "Clock Generator(DCM)"   %]
    <img src="images/hw_data_sheet_design_dcm.gif" title="Figure 2. Structural connectivity of the top-level module [% T.clkWrapper %]"/>
    <p style="position:absolute;top:500px;left:400px;width:100%">[% T.design %]</p>
    <p style="position:absolute;top:520px;left:120px;width:100%">[% T.clkWrapper %]</p>
[% END %]
[% IF T.clock_wrapper == "Expose Clock Ports"   %]
    <img src="images/hw_data_sheet_design_multiple_clocks.gif" title="Figure 2. Structural connectivity of the top-level module [% T.clkWrapper %]"/>
    <p style="position:absolute;top:160px;left:240px;width:100%">[% T.design %]</p>
    <p style="position:absolute;top:190px;left:180px;width:100%">[% T.clkWrapper %]</p>
[% END %]
</div>
</td></tr>
</table>
<br>
[% PROCESS drawtable tabledata=T.fileData tableCaption="<i>Table 2.</i> <b>HDL Files included in the design</b>"%]
<br>
[% PROCESS drawtable tabledata=T.projectFileData tableCaption="<i>Table 3.</i> <b>Project Files included in the design</b>"%]
</script>
<h1>Design Statistics</h1>
<p>
The table below contains the settings on the System Generator token used to generate the design.
</p>
[% PROCESS drawtable tabledata=T.compilationOptions tableCaption="<i>Table 4.</i> <b>Compilation Options</b>"%]
<br>
<p>
The table below lists all the System Generator blocks used in constructing the design and number of instances of each of the blocks. It also indicates IP versions that are used by the block and the license types of each of the IP.
</p>
[% PROCESS drawtable tabledata=T.blockCount tableCaption="<i>Table 5.</i> <b>Block Utilization Summary</b>"%]
<h1>Tools</h1>
<p>
The table below lists the tools and their versions used to generate this design.
</p>
[% PROCESS drawtable tabledata=T.toolVersionsData tableCaption="<i>Table 6.</i> <b>Tool Versions</b>"%]
[% IF T.memoryMapExists == 1 %]
<h1>Memory Map</h1>
<p>
This design is exported as a PCore. The memory map for the pcore is shown in the following table.
</p>
[% PROCESS drawtable tabledata=T.memoryMap tableCaption="<i>Table 7.</i> <b>Memory Map</b>"%]
<br>
[% END %]
</body>
</html>
